
calcc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019e  00800060  00003a9a  00003b2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  008001fe  008001fe  00003ccc  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  00003ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001c9f  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000090f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b504  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c88a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000da60  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000dc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000df16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e884  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__vector_1>
       8:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_2>
       c:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a2 12 	call	0x2544	; 0x2544 <main>
      8a:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ea       	ldi	r26, 0xAA	; 170
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ea       	ldi	r24, 0xAA	; 170
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a ea       	ldi	r22, 0xAA	; 170
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3c 1d 	jmp	0x3a78	; 0x3a78 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 40 1d 	jmp	0x3a80	; 0x3a80 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 38 1d 	jmp	0x3a70	; 0x3a70 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 54       	subi	r30, 0x4E	; 78
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <EXIT_Interrupts_Init>:
#include "EXIT_interrupts.h"
static void (*INT0_fptr) (void) = NULL;
static void (*INT1_fptr) (void) = NULL;
static void (*INT2_fptr) (void) = NULL;

void EXIT_Interrupts_Init(EXIT_interrupts_t source,EXIT_interrupts_edge_t edge){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2a 97       	sbiw	r28, 0x0a	; 10
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	6a 83       	std	Y+2, r22	; 0x02

	switch(source)
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	3a 87       	std	Y+10, r19	; 0x0a
     e4e:	29 87       	std	Y+9, r18	; 0x09
     e50:	89 85       	ldd	r24, Y+9	; 0x09
     e52:	9a 85       	ldd	r25, Y+10	; 0x0a
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	91 05       	cpc	r25, r1
     e58:	09 f4       	brne	.+2      	; 0xe5c <EXIT_Interrupts_Init+0x2e>
     e5a:	6d c0       	rjmp	.+218    	; 0xf36 <EXIT_Interrupts_Init+0x108>
     e5c:	29 85       	ldd	r18, Y+9	; 0x09
     e5e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e60:	22 30       	cpi	r18, 0x02	; 2
     e62:	31 05       	cpc	r19, r1
     e64:	09 f4       	brne	.+2      	; 0xe68 <EXIT_Interrupts_Init+0x3a>
     e66:	c9 c0       	rjmp	.+402    	; 0xffa <EXIT_Interrupts_Init+0x1cc>
     e68:	89 85       	ldd	r24, Y+9	; 0x09
     e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	09 f0       	breq	.+2      	; 0xe72 <EXIT_Interrupts_Init+0x44>
     e70:	ea c0       	rjmp	.+468    	; 0x1046 <EXIT_Interrupts_Init+0x218>
	{
		case EXIT_INT0:
			SET_BIT(GICR,INT0);
     e72:	ab e5       	ldi	r26, 0x5B	; 91
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	eb e5       	ldi	r30, 0x5B	; 91
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 64       	ori	r24, 0x40	; 64
     e7e:	8c 93       	st	X, r24
			switch(edge){
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	38 87       	std	Y+8, r19	; 0x08
     e88:	2f 83       	std	Y+7, r18	; 0x07
     e8a:	8f 81       	ldd	r24, Y+7	; 0x07
     e8c:	98 85       	ldd	r25, Y+8	; 0x08
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	91 05       	cpc	r25, r1
     e92:	21 f1       	breq	.+72     	; 0xedc <EXIT_Interrupts_Init+0xae>
     e94:	2f 81       	ldd	r18, Y+7	; 0x07
     e96:	38 85       	ldd	r19, Y+8	; 0x08
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	2c f4       	brge	.+10     	; 0xea8 <EXIT_Interrupts_Init+0x7a>
     e9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ea0:	98 85       	ldd	r25, Y+8	; 0x08
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	61 f0       	breq	.+24     	; 0xebe <EXIT_Interrupts_Init+0x90>
     ea6:	cf c0       	rjmp	.+414    	; 0x1046 <EXIT_Interrupts_Init+0x218>
     ea8:	2f 81       	ldd	r18, Y+7	; 0x07
     eaa:	38 85       	ldd	r19, Y+8	; 0x08
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	21 f1       	breq	.+72     	; 0xefa <EXIT_Interrupts_Init+0xcc>
     eb2:	8f 81       	ldd	r24, Y+7	; 0x07
     eb4:	98 85       	ldd	r25, Y+8	; 0x08
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	71 f1       	breq	.+92     	; 0xf18 <EXIT_Interrupts_Init+0xea>
     ebc:	c4 c0       	rjmp	.+392    	; 0x1046 <EXIT_Interrupts_Init+0x218>
				case EXIT_EDGE_LOW_LEVEL:
					CLEAR_BIT(MCUCR,ISC00);
     ebe:	a5 e5       	ldi	r26, 0x55	; 85
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e5 e5       	ldi	r30, 0x55	; 85
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	8e 7f       	andi	r24, 0xFE	; 254
     eca:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC01);
     ecc:	a5 e5       	ldi	r26, 0x55	; 85
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	e5 e5       	ldi	r30, 0x55	; 85
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	8d 7f       	andi	r24, 0xFD	; 253
     ed8:	8c 93       	st	X, r24
     eda:	b5 c0       	rjmp	.+362    	; 0x1046 <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_BOTH_RAISING_FALLING:
					SET_BIT(MCUCR,ISC00);
     edc:	a5 e5       	ldi	r26, 0x55	; 85
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e5 e5       	ldi	r30, 0x55	; 85
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	81 60       	ori	r24, 0x01	; 1
     ee8:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC01);
     eea:	a5 e5       	ldi	r26, 0x55	; 85
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e5 e5       	ldi	r30, 0x55	; 85
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8d 7f       	andi	r24, 0xFD	; 253
     ef6:	8c 93       	st	X, r24
     ef8:	a6 c0       	rjmp	.+332    	; 0x1046 <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_FALLING:
					CLEAR_BIT(MCUCR,ISC00);
     efa:	a5 e5       	ldi	r26, 0x55	; 85
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e5 e5       	ldi	r30, 0x55	; 85
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	8e 7f       	andi	r24, 0xFE	; 254
     f06:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC01);
     f08:	a5 e5       	ldi	r26, 0x55	; 85
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	e5 e5       	ldi	r30, 0x55	; 85
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	82 60       	ori	r24, 0x02	; 2
     f14:	8c 93       	st	X, r24
     f16:	97 c0       	rjmp	.+302    	; 0x1046 <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_RAISING:
					SET_BIT(MCUCR,ISC00);
     f18:	a5 e5       	ldi	r26, 0x55	; 85
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e5 e5       	ldi	r30, 0x55	; 85
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	81 60       	ori	r24, 0x01	; 1
     f24:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC01);
     f26:	a5 e5       	ldi	r26, 0x55	; 85
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e5 e5       	ldi	r30, 0x55	; 85
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	82 60       	ori	r24, 0x02	; 2
     f32:	8c 93       	st	X, r24
     f34:	88 c0       	rjmp	.+272    	; 0x1046 <EXIT_Interrupts_Init+0x218>




		case EXIT_INT1:
			SET_BIT(GICR,INT1);
     f36:	ab e5       	ldi	r26, 0x5B	; 91
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	eb e5       	ldi	r30, 0x5B	; 91
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 68       	ori	r24, 0x80	; 128
     f42:	8c 93       	st	X, r24

			switch(edge){
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	3e 83       	std	Y+6, r19	; 0x06
     f4c:	2d 83       	std	Y+5, r18	; 0x05
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	81 30       	cpi	r24, 0x01	; 1
     f54:	91 05       	cpc	r25, r1
     f56:	21 f1       	breq	.+72     	; 0xfa0 <EXIT_Interrupts_Init+0x172>
     f58:	2d 81       	ldd	r18, Y+5	; 0x05
     f5a:	3e 81       	ldd	r19, Y+6	; 0x06
     f5c:	22 30       	cpi	r18, 0x02	; 2
     f5e:	31 05       	cpc	r19, r1
     f60:	2c f4       	brge	.+10     	; 0xf6c <EXIT_Interrupts_Init+0x13e>
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	61 f0       	breq	.+24     	; 0xf82 <EXIT_Interrupts_Init+0x154>
     f6a:	6d c0       	rjmp	.+218    	; 0x1046 <EXIT_Interrupts_Init+0x218>
     f6c:	2d 81       	ldd	r18, Y+5	; 0x05
     f6e:	3e 81       	ldd	r19, Y+6	; 0x06
     f70:	22 30       	cpi	r18, 0x02	; 2
     f72:	31 05       	cpc	r19, r1
     f74:	21 f1       	breq	.+72     	; 0xfbe <EXIT_Interrupts_Init+0x190>
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	83 30       	cpi	r24, 0x03	; 3
     f7c:	91 05       	cpc	r25, r1
     f7e:	71 f1       	breq	.+92     	; 0xfdc <EXIT_Interrupts_Init+0x1ae>
     f80:	62 c0       	rjmp	.+196    	; 0x1046 <EXIT_Interrupts_Init+0x218>
				case EXIT_EDGE_LOW_LEVEL:
					CLEAR_BIT(MCUCR,ISC10);
     f82:	a5 e5       	ldi	r26, 0x55	; 85
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e5       	ldi	r30, 0x55	; 85
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8b 7f       	andi	r24, 0xFB	; 251
     f8e:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC11);
     f90:	a5 e5       	ldi	r26, 0x55	; 85
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e5 e5       	ldi	r30, 0x55	; 85
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	87 7f       	andi	r24, 0xF7	; 247
     f9c:	8c 93       	st	X, r24
     f9e:	53 c0       	rjmp	.+166    	; 0x1046 <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_BOTH_RAISING_FALLING:
					SET_BIT(MCUCR,ISC10);
     fa0:	a5 e5       	ldi	r26, 0x55	; 85
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e5 e5       	ldi	r30, 0x55	; 85
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	84 60       	ori	r24, 0x04	; 4
     fac:	8c 93       	st	X, r24
					CLEAR_BIT(MCUCR,ISC11);
     fae:	a5 e5       	ldi	r26, 0x55	; 85
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e5 e5       	ldi	r30, 0x55	; 85
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	87 7f       	andi	r24, 0xF7	; 247
     fba:	8c 93       	st	X, r24
     fbc:	44 c0       	rjmp	.+136    	; 0x1046 <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_FALLING:
					CLEAR_BIT(MCUCR,ISC10);
     fbe:	a5 e5       	ldi	r26, 0x55	; 85
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e5 e5       	ldi	r30, 0x55	; 85
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8b 7f       	andi	r24, 0xFB	; 251
     fca:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC11);
     fcc:	a5 e5       	ldi	r26, 0x55	; 85
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e5 e5       	ldi	r30, 0x55	; 85
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 60       	ori	r24, 0x08	; 8
     fd8:	8c 93       	st	X, r24
     fda:	35 c0       	rjmp	.+106    	; 0x1046 <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_RAISING:
					SET_BIT(MCUCR,ISC10);
     fdc:	a5 e5       	ldi	r26, 0x55	; 85
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e5 e5       	ldi	r30, 0x55	; 85
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	84 60       	ori	r24, 0x04	; 4
     fe8:	8c 93       	st	X, r24
					SET_BIT(MCUCR,ISC11);
     fea:	a5 e5       	ldi	r26, 0x55	; 85
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e5 e5       	ldi	r30, 0x55	; 85
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	88 60       	ori	r24, 0x08	; 8
     ff6:	8c 93       	st	X, r24
     ff8:	26 c0       	rjmp	.+76     	; 0x1046 <EXIT_Interrupts_Init+0x218>




		case EXIT_INT2:
			SET_BIT(GICR,INT2);
     ffa:	ab e5       	ldi	r26, 0x5B	; 91
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	eb e5       	ldi	r30, 0x5B	; 91
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 62       	ori	r24, 0x20	; 32
    1006:	8c 93       	st	X, r24
			switch(edge)
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	3c 83       	std	Y+4, r19	; 0x04
    1010:	2b 83       	std	Y+3, r18	; 0x03
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	82 30       	cpi	r24, 0x02	; 2
    1018:	91 05       	cpc	r25, r1
    101a:	31 f0       	breq	.+12     	; 0x1028 <EXIT_Interrupts_Init+0x1fa>
    101c:	2b 81       	ldd	r18, Y+3	; 0x03
    101e:	3c 81       	ldd	r19, Y+4	; 0x04
    1020:	23 30       	cpi	r18, 0x03	; 3
    1022:	31 05       	cpc	r19, r1
    1024:	49 f0       	breq	.+18     	; 0x1038 <EXIT_Interrupts_Init+0x20a>
    1026:	0f c0       	rjmp	.+30     	; 0x1046 <EXIT_Interrupts_Init+0x218>
			{
				case EXIT_EDGE_FALLING:
					SET_BIT(MCUCSR,ISC2);
    1028:	a4 e5       	ldi	r26, 0x54	; 84
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e4 e5       	ldi	r30, 0x54	; 84
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 64       	ori	r24, 0x40	; 64
    1034:	8c 93       	st	X, r24
    1036:	07 c0       	rjmp	.+14     	; 0x1046 <EXIT_Interrupts_Init+0x218>
					break;
				case EXIT_EDGE_RAISING:
					CLEAR_BIT(MCUCSR,ISC2);
    1038:	a4 e5       	ldi	r26, 0x54	; 84
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e4 e5       	ldi	r30, 0x54	; 84
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8f 7b       	andi	r24, 0xBF	; 191
    1044:	8c 93       	st	X, r24
			}
			break;
	}


}
    1046:	2a 96       	adiw	r28, 0x0a	; 10
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <EXIT_Interrupts_Disable>:
void EXIT_Interrupts_Disable(EXIT_interrupts_t source){
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <EXIT_Interrupts_Disable+0x6>
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
	switch(source)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3b 83       	std	Y+3, r19	; 0x03
    106e:	2a 83       	std	Y+2, r18	; 0x02
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	9b 81       	ldd	r25, Y+3	; 0x03
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	91 05       	cpc	r25, r1
    1078:	89 f0       	breq	.+34     	; 0x109c <EXIT_Interrupts_Disable+0x44>
    107a:	2a 81       	ldd	r18, Y+2	; 0x02
    107c:	3b 81       	ldd	r19, Y+3	; 0x03
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	a1 f0       	breq	.+40     	; 0x10ac <EXIT_Interrupts_Disable+0x54>
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	9b 81       	ldd	r25, Y+3	; 0x03
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	b9 f4       	brne	.+46     	; 0x10ba <EXIT_Interrupts_Disable+0x62>
	{
		case EXIT_INT0: CLEAR_BIT(GICR,INT0);break;
    108c:	ab e5       	ldi	r26, 0x5B	; 91
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	eb e5       	ldi	r30, 0x5B	; 91
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	8f 7b       	andi	r24, 0xBF	; 191
    1098:	8c 93       	st	X, r24
    109a:	0f c0       	rjmp	.+30     	; 0x10ba <EXIT_Interrupts_Disable+0x62>
		case EXIT_INT1:	CLEAR_BIT(GICR,INT1);break;
    109c:	ab e5       	ldi	r26, 0x5B	; 91
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	eb e5       	ldi	r30, 0x5B	; 91
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	8f 77       	andi	r24, 0x7F	; 127
    10a8:	8c 93       	st	X, r24
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <EXIT_Interrupts_Disable+0x62>
		case EXIT_INT2:	CLEAR_BIT(GICR,INT2);break;
    10ac:	ab e5       	ldi	r26, 0x5B	; 91
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	eb e5       	ldi	r30, 0x5B	; 91
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8f 7d       	andi	r24, 0xDF	; 223
    10b8:	8c 93       	st	X, r24
	}
}
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <EXIT_Set_CallBack>:
void EXIT_Set_CallBack(EXIT_interrupts_t source,void (*INT_ptf)(void)){
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	00 d0       	rcall	.+0      	; 0x10cc <EXIT_Set_CallBack+0x6>
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <EXIT_Set_CallBack+0x8>
    10ce:	0f 92       	push	r0
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	7b 83       	std	Y+3, r23	; 0x03
    10d8:	6a 83       	std	Y+2, r22	; 0x02

	switch(source)
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	3d 83       	std	Y+5, r19	; 0x05
    10e2:	2c 83       	std	Y+4, r18	; 0x04
    10e4:	8c 81       	ldd	r24, Y+4	; 0x04
    10e6:	9d 81       	ldd	r25, Y+5	; 0x05
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	91 05       	cpc	r25, r1
    10ec:	81 f0       	breq	.+32     	; 0x110e <EXIT_Set_CallBack+0x48>
    10ee:	2c 81       	ldd	r18, Y+4	; 0x04
    10f0:	3d 81       	ldd	r19, Y+5	; 0x05
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	91 f0       	breq	.+36     	; 0x111c <EXIT_Set_CallBack+0x56>
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	00 97       	sbiw	r24, 0x00	; 0
    10fe:	a1 f4       	brne	.+40     	; 0x1128 <EXIT_Set_CallBack+0x62>
	{
		case EXIT_INT0: INT0_fptr = INT_ptf;break;
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	9b 81       	ldd	r25, Y+3	; 0x03
    1104:	90 93 ff 01 	sts	0x01FF, r25
    1108:	80 93 fe 01 	sts	0x01FE, r24
    110c:	0d c0       	rjmp	.+26     	; 0x1128 <EXIT_Set_CallBack+0x62>
		case EXIT_INT1:	INT1_fptr = INT_ptf;break;
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	90 93 01 02 	sts	0x0201, r25
    1116:	80 93 00 02 	sts	0x0200, r24
    111a:	06 c0       	rjmp	.+12     	; 0x1128 <EXIT_Set_CallBack+0x62>
		case EXIT_INT2:	INT2_fptr = INT_ptf;break;
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	90 93 03 02 	sts	0x0203, r25
    1124:	80 93 02 02 	sts	0x0202, r24
	}
}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <__vector_1>:
ISR(INT0_vect)
{
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
	if(INT0_fptr)
    1162:	80 91 fe 01 	lds	r24, 0x01FE
    1166:	90 91 ff 01 	lds	r25, 0x01FF
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	29 f0       	breq	.+10     	; 0x1178 <__vector_1+0x40>
		INT0_fptr();
    116e:	e0 91 fe 01 	lds	r30, 0x01FE
    1172:	f0 91 ff 01 	lds	r31, 0x01FF
    1176:	09 95       	icall

}
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	ff 91       	pop	r31
    117e:	ef 91       	pop	r30
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <__vector_2>:
ISR(INT1_vect)
{
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	2f 93       	push	r18
    11aa:	3f 93       	push	r19
    11ac:	4f 93       	push	r20
    11ae:	5f 93       	push	r21
    11b0:	6f 93       	push	r22
    11b2:	7f 93       	push	r23
    11b4:	8f 93       	push	r24
    11b6:	9f 93       	push	r25
    11b8:	af 93       	push	r26
    11ba:	bf 93       	push	r27
    11bc:	ef 93       	push	r30
    11be:	ff 93       	push	r31
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	if(INT2_fptr)
    11c8:	80 91 02 02 	lds	r24, 0x0202
    11cc:	90 91 03 02 	lds	r25, 0x0203
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	29 f0       	breq	.+10     	; 0x11de <__vector_2+0x40>
		INT2_fptr();
    11d4:	e0 91 02 02 	lds	r30, 0x0202
    11d8:	f0 91 03 02 	lds	r31, 0x0203
    11dc:	09 95       	icall

}
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	ff 91       	pop	r31
    11e4:	ef 91       	pop	r30
    11e6:	bf 91       	pop	r27
    11e8:	af 91       	pop	r26
    11ea:	9f 91       	pop	r25
    11ec:	8f 91       	pop	r24
    11ee:	7f 91       	pop	r23
    11f0:	6f 91       	pop	r22
    11f2:	5f 91       	pop	r21
    11f4:	4f 91       	pop	r20
    11f6:	3f 91       	pop	r19
    11f8:	2f 91       	pop	r18
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	0f 90       	pop	r0
    1200:	1f 90       	pop	r1
    1202:	18 95       	reti

00001204 <__vector_3>:
ISR(INT2_vect)
{
    1204:	1f 92       	push	r1
    1206:	0f 92       	push	r0
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	0f 92       	push	r0
    120c:	11 24       	eor	r1, r1
    120e:	2f 93       	push	r18
    1210:	3f 93       	push	r19
    1212:	4f 93       	push	r20
    1214:	5f 93       	push	r21
    1216:	6f 93       	push	r22
    1218:	7f 93       	push	r23
    121a:	8f 93       	push	r24
    121c:	9f 93       	push	r25
    121e:	af 93       	push	r26
    1220:	bf 93       	push	r27
    1222:	ef 93       	push	r30
    1224:	ff 93       	push	r31
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
	if(INT2_fptr)
    122e:	80 91 02 02 	lds	r24, 0x0202
    1232:	90 91 03 02 	lds	r25, 0x0203
    1236:	00 97       	sbiw	r24, 0x00	; 0
    1238:	29 f0       	breq	.+10     	; 0x1244 <__vector_3+0x40>
		INT2_fptr();
    123a:	e0 91 02 02 	lds	r30, 0x0202
    123e:	f0 91 03 02 	lds	r31, 0x0203
    1242:	09 95       	icall

}
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	ff 91       	pop	r31
    124a:	ef 91       	pop	r30
    124c:	bf 91       	pop	r27
    124e:	af 91       	pop	r26
    1250:	9f 91       	pop	r25
    1252:	8f 91       	pop	r24
    1254:	7f 91       	pop	r23
    1256:	6f 91       	pop	r22
    1258:	5f 91       	pop	r21
    125a:	4f 91       	pop	r20
    125c:	3f 91       	pop	r19
    125e:	2f 91       	pop	r18
    1260:	0f 90       	pop	r0
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	0f 90       	pop	r0
    1266:	1f 90       	pop	r1
    1268:	18 95       	reti

0000126a <Dio_init>:
#include "Dio.h"


void Dio_init()
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	0f 92       	push	r0
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
	uint8 counter=0;
    1274:	19 82       	std	Y+1, r1	; 0x01
	for(counter=0;counter<PIN_COUNT;counter++)
    1276:	19 82       	std	Y+1, r1	; 0x01
    1278:	72 c1       	rjmp	.+740    	; 0x155e <Dio_init+0x2f4>
	{
		if(pin[counter].port == PORT_A)
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	c9 01       	movw	r24, r18
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	82 0f       	add	r24, r18
    1288:	93 1f       	adc	r25, r19
    128a:	fc 01       	movw	r30, r24
    128c:	ee 54       	subi	r30, 0x4E	; 78
    128e:	fe 4f       	sbci	r31, 0xFE	; 254
    1290:	80 81       	ld	r24, Z
    1292:	88 23       	and	r24, r24
    1294:	09 f0       	breq	.+2      	; 0x1298 <Dio_init+0x2e>
    1296:	4d c0       	rjmp	.+154    	; 0x1332 <Dio_init+0xc8>
		{
			if(pin[counter].direction == OUTPUT)
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	c9 01       	movw	r24, r18
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	82 0f       	add	r24, r18
    12a6:	93 1f       	adc	r25, r19
    12a8:	fc 01       	movw	r30, r24
    12aa:	ec 54       	subi	r30, 0x4C	; 76
    12ac:	fe 4f       	sbci	r31, 0xFE	; 254
    12ae:	80 81       	ld	r24, Z
    12b0:	81 30       	cpi	r24, 0x01	; 1
    12b2:	f9 f4       	brne	.+62     	; 0x12f2 <Dio_init+0x88>
				SET_BIT(DDRA,pin[counter].pin);
    12b4:	aa e3       	ldi	r26, 0x3A	; 58
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ea e3       	ldi	r30, 0x3A	; 58
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	c9 01       	movw	r24, r18
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	82 0f       	add	r24, r18
    12ce:	93 1f       	adc	r25, r19
    12d0:	fc 01       	movw	r30, r24
    12d2:	ed 54       	subi	r30, 0x4D	; 77
    12d4:	fe 4f       	sbci	r31, 0xFE	; 254
    12d6:	80 81       	ld	r24, Z
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <Dio_init+0x7e>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <Dio_init+0x7a>
    12ec:	84 2b       	or	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	33 c1       	rjmp	.+614    	; 0x1558 <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRA,pin[counter].pin);
    12f2:	aa e3       	ldi	r26, 0x3A	; 58
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	ea e3       	ldi	r30, 0x3A	; 58
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	c9 01       	movw	r24, r18
    1306:	88 0f       	add	r24, r24
    1308:	99 1f       	adc	r25, r25
    130a:	82 0f       	add	r24, r18
    130c:	93 1f       	adc	r25, r19
    130e:	fc 01       	movw	r30, r24
    1310:	ed 54       	subi	r30, 0x4D	; 77
    1312:	fe 4f       	sbci	r31, 0xFE	; 254
    1314:	80 81       	ld	r24, Z
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <Dio_init+0xbc>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <Dio_init+0xb8>
    132a:	80 95       	com	r24
    132c:	84 23       	and	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	13 c1       	rjmp	.+550    	; 0x1558 <Dio_init+0x2ee>
		}
		else if(pin[counter].port == PORT_B)
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	c9 01       	movw	r24, r18
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	82 0f       	add	r24, r18
    1340:	93 1f       	adc	r25, r19
    1342:	fc 01       	movw	r30, r24
    1344:	ee 54       	subi	r30, 0x4E	; 78
    1346:	fe 4f       	sbci	r31, 0xFE	; 254
    1348:	80 81       	ld	r24, Z
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	09 f0       	breq	.+2      	; 0x1350 <Dio_init+0xe6>
    134e:	4d c0       	rjmp	.+154    	; 0x13ea <Dio_init+0x180>
		{
			if(pin[counter].direction == OUTPUT)
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	c9 01       	movw	r24, r18
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	82 0f       	add	r24, r18
    135e:	93 1f       	adc	r25, r19
    1360:	fc 01       	movw	r30, r24
    1362:	ec 54       	subi	r30, 0x4C	; 76
    1364:	fe 4f       	sbci	r31, 0xFE	; 254
    1366:	80 81       	ld	r24, Z
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	f9 f4       	brne	.+62     	; 0x13aa <Dio_init+0x140>
				SET_BIT(DDRB,pin[counter].pin);
    136c:	a7 e3       	ldi	r26, 0x37	; 55
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e7 e3       	ldi	r30, 0x37	; 55
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	48 2f       	mov	r20, r24
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	c9 01       	movw	r24, r18
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	82 0f       	add	r24, r18
    1386:	93 1f       	adc	r25, r19
    1388:	fc 01       	movw	r30, r24
    138a:	ed 54       	subi	r30, 0x4D	; 77
    138c:	fe 4f       	sbci	r31, 0xFE	; 254
    138e:	80 81       	ld	r24, Z
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <Dio_init+0x136>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <Dio_init+0x132>
    13a4:	84 2b       	or	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	d7 c0       	rjmp	.+430    	; 0x1558 <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRB,pin[counter].pin);
    13aa:	a7 e3       	ldi	r26, 0x37	; 55
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e7 e3       	ldi	r30, 0x37	; 55
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	c9 01       	movw	r24, r18
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	82 0f       	add	r24, r18
    13c4:	93 1f       	adc	r25, r19
    13c6:	fc 01       	movw	r30, r24
    13c8:	ed 54       	subi	r30, 0x4D	; 77
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	80 81       	ld	r24, Z
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <Dio_init+0x174>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <Dio_init+0x170>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	b7 c0       	rjmp	.+366    	; 0x1558 <Dio_init+0x2ee>
		}
		else if(pin[counter].port == PORT_C)
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	c9 01       	movw	r24, r18
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	82 0f       	add	r24, r18
    13f8:	93 1f       	adc	r25, r19
    13fa:	fc 01       	movw	r30, r24
    13fc:	ee 54       	subi	r30, 0x4E	; 78
    13fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1400:	80 81       	ld	r24, Z
    1402:	82 30       	cpi	r24, 0x02	; 2
    1404:	09 f0       	breq	.+2      	; 0x1408 <Dio_init+0x19e>
    1406:	4d c0       	rjmp	.+154    	; 0x14a2 <Dio_init+0x238>
		{
			if(pin[counter].direction == OUTPUT)
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	c9 01       	movw	r24, r18
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	82 0f       	add	r24, r18
    1416:	93 1f       	adc	r25, r19
    1418:	fc 01       	movw	r30, r24
    141a:	ec 54       	subi	r30, 0x4C	; 76
    141c:	fe 4f       	sbci	r31, 0xFE	; 254
    141e:	80 81       	ld	r24, Z
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	f9 f4       	brne	.+62     	; 0x1462 <Dio_init+0x1f8>
				SET_BIT(DDRC,pin[counter].pin);
    1424:	a4 e3       	ldi	r26, 0x34	; 52
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e4 e3       	ldi	r30, 0x34	; 52
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	c9 01       	movw	r24, r18
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	82 0f       	add	r24, r18
    143e:	93 1f       	adc	r25, r19
    1440:	fc 01       	movw	r30, r24
    1442:	ed 54       	subi	r30, 0x4D	; 77
    1444:	fe 4f       	sbci	r31, 0xFE	; 254
    1446:	80 81       	ld	r24, Z
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <Dio_init+0x1ee>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <Dio_init+0x1ea>
    145c:	84 2b       	or	r24, r20
    145e:	8c 93       	st	X, r24
    1460:	7b c0       	rjmp	.+246    	; 0x1558 <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRC,pin[counter].pin);
    1462:	a4 e3       	ldi	r26, 0x34	; 52
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	e4 e3       	ldi	r30, 0x34	; 52
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	c9 01       	movw	r24, r18
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	82 0f       	add	r24, r18
    147c:	93 1f       	adc	r25, r19
    147e:	fc 01       	movw	r30, r24
    1480:	ed 54       	subi	r30, 0x4D	; 77
    1482:	fe 4f       	sbci	r31, 0xFE	; 254
    1484:	80 81       	ld	r24, Z
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <Dio_init+0x22c>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <Dio_init+0x228>
    149a:	80 95       	com	r24
    149c:	84 23       	and	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	5b c0       	rjmp	.+182    	; 0x1558 <Dio_init+0x2ee>
		}
		else if(pin[counter].port == PORT_D)
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	c9 01       	movw	r24, r18
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	fc 01       	movw	r30, r24
    14b4:	ee 54       	subi	r30, 0x4E	; 78
    14b6:	fe 4f       	sbci	r31, 0xFE	; 254
    14b8:	80 81       	ld	r24, Z
    14ba:	83 30       	cpi	r24, 0x03	; 3
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <Dio_init+0x256>
    14be:	4c c0       	rjmp	.+152    	; 0x1558 <Dio_init+0x2ee>
		{
			if(pin[counter].direction == OUTPUT)
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	c9 01       	movw	r24, r18
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	82 0f       	add	r24, r18
    14ce:	93 1f       	adc	r25, r19
    14d0:	fc 01       	movw	r30, r24
    14d2:	ec 54       	subi	r30, 0x4C	; 76
    14d4:	fe 4f       	sbci	r31, 0xFE	; 254
    14d6:	80 81       	ld	r24, Z
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	f9 f4       	brne	.+62     	; 0x151a <Dio_init+0x2b0>
				SET_BIT(DDRD,pin[counter].pin);
    14dc:	a1 e3       	ldi	r26, 0x31	; 49
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e1 e3       	ldi	r30, 0x31	; 49
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	c9 01       	movw	r24, r18
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	82 0f       	add	r24, r18
    14f6:	93 1f       	adc	r25, r19
    14f8:	fc 01       	movw	r30, r24
    14fa:	ed 54       	subi	r30, 0x4D	; 77
    14fc:	fe 4f       	sbci	r31, 0xFE	; 254
    14fe:	80 81       	ld	r24, Z
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <Dio_init+0x2a6>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <Dio_init+0x2a2>
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	1f c0       	rjmp	.+62     	; 0x1558 <Dio_init+0x2ee>
			else
				CLEAR_BIT(DDRD,pin[counter].pin);
    151a:	a1 e3       	ldi	r26, 0x31	; 49
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e1 e3       	ldi	r30, 0x31	; 49
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	c9 01       	movw	r24, r18
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	82 0f       	add	r24, r18
    1534:	93 1f       	adc	r25, r19
    1536:	fc 01       	movw	r30, r24
    1538:	ed 54       	subi	r30, 0x4D	; 77
    153a:	fe 4f       	sbci	r31, 0xFE	; 254
    153c:	80 81       	ld	r24, Z
    153e:	28 2f       	mov	r18, r24
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	02 2e       	mov	r0, r18
    1548:	02 c0       	rjmp	.+4      	; 0x154e <Dio_init+0x2e4>
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	0a 94       	dec	r0
    1550:	e2 f7       	brpl	.-8      	; 0x154a <Dio_init+0x2e0>
    1552:	80 95       	com	r24
    1554:	84 23       	and	r24, r20
    1556:	8c 93       	st	X, r24


void Dio_init()
{
	uint8 counter=0;
	for(counter=0;counter<PIN_COUNT;counter++)
    1558:	89 81       	ldd	r24, Y+1	; 0x01
    155a:	8f 5f       	subi	r24, 0xFF	; 255
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	83 31       	cpi	r24, 0x13	; 19
    1562:	08 f4       	brcc	.+2      	; 0x1566 <Dio_init+0x2fc>
    1564:	8a ce       	rjmp	.-748    	; 0x127a <Dio_init+0x10>
				SET_BIT(DDRD,pin[counter].pin);
			else
				CLEAR_BIT(DDRD,pin[counter].pin);
		}
	}
}
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <Dio_Write>:
void Dio_Write(channel_t ch,Dio_state_t state)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <Dio_Write+0x6>
    1574:	00 d0       	rcall	.+0      	; 0x1576 <Dio_Write+0x8>
    1576:	cd b7       	in	r28, 0x3d	; 61
    1578:	de b7       	in	r29, 0x3e	; 62
    157a:	8b 83       	std	Y+3, r24	; 0x03
    157c:	6c 83       	std	Y+4, r22	; 0x04
	Dio_port_t port = ch / 8;
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	86 95       	lsr	r24
    1582:	86 95       	lsr	r24
    1584:	86 95       	lsr	r24
    1586:	8a 83       	std	Y+2, r24	; 0x02
	Dio_pin_t pin = ch % 8;
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	87 70       	andi	r24, 0x07	; 7
    158c:	89 83       	std	Y+1, r24	; 0x01

	if(port == PORT_A)
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	88 23       	and	r24, r24
    1592:	81 f5       	brne	.+96     	; 0x15f4 <Dio_Write+0x86>
	{
		if(state == HIGH)
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	a1 f4       	brne	.+40     	; 0x15c2 <Dio_Write+0x54>
		{
			SET_BIT(PORTA,pin);
    159a:	ab e3       	ldi	r26, 0x3B	; 59
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	eb e3       	ldi	r30, 0x3B	; 59
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <Dio_Write+0x4a>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <Dio_Write+0x46>
    15bc:	84 2b       	or	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	b0 c0       	rjmp	.+352    	; 0x1722 <Dio_Write+0x1b4>
		}
		else if(state == LOW)
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	88 23       	and	r24, r24
    15c6:	09 f0       	breq	.+2      	; 0x15ca <Dio_Write+0x5c>
    15c8:	ac c0       	rjmp	.+344    	; 0x1722 <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTA,pin);
    15ca:	ab e3       	ldi	r26, 0x3B	; 59
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	eb e3       	ldi	r30, 0x3B	; 59
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <Dio_Write+0x7a>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <Dio_Write+0x76>
    15ec:	80 95       	com	r24
    15ee:	84 23       	and	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	97 c0       	rjmp	.+302    	; 0x1722 <Dio_Write+0x1b4>
		}
	}
	else if(port == PORT_B)
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	81 f5       	brne	.+96     	; 0x165a <Dio_Write+0xec>
	{
		if(state == HIGH)
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	a1 f4       	brne	.+40     	; 0x1628 <Dio_Write+0xba>
		{
			SET_BIT(PORTB,pin);
    1600:	a8 e3       	ldi	r26, 0x38	; 56
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e8 e3       	ldi	r30, 0x38	; 56
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <Dio_Write+0xb0>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <Dio_Write+0xac>
    1622:	84 2b       	or	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	7d c0       	rjmp	.+250    	; 0x1722 <Dio_Write+0x1b4>
		}
		else if(state == LOW)
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	88 23       	and	r24, r24
    162c:	09 f0       	breq	.+2      	; 0x1630 <Dio_Write+0xc2>
    162e:	79 c0       	rjmp	.+242    	; 0x1722 <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTB,pin);
    1630:	a8 e3       	ldi	r26, 0x38	; 56
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e8 e3       	ldi	r30, 0x38	; 56
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	02 2e       	mov	r0, r18
    1648:	02 c0       	rjmp	.+4      	; 0x164e <Dio_Write+0xe0>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	0a 94       	dec	r0
    1650:	e2 f7       	brpl	.-8      	; 0x164a <Dio_Write+0xdc>
    1652:	80 95       	com	r24
    1654:	84 23       	and	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	64 c0       	rjmp	.+200    	; 0x1722 <Dio_Write+0x1b4>
		}
	}
	else if(port == PORT_C)
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	82 30       	cpi	r24, 0x02	; 2
    165e:	81 f5       	brne	.+96     	; 0x16c0 <Dio_Write+0x152>
	{
		if(state == HIGH)
    1660:	8c 81       	ldd	r24, Y+4	; 0x04
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	a1 f4       	brne	.+40     	; 0x168e <Dio_Write+0x120>
		{
			SET_BIT(PORTC,pin);
    1666:	a5 e3       	ldi	r26, 0x35	; 53
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e5 e3       	ldi	r30, 0x35	; 53
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <Dio_Write+0x116>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <Dio_Write+0x112>
    1688:	84 2b       	or	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	4a c0       	rjmp	.+148    	; 0x1722 <Dio_Write+0x1b4>
		}
		else if(state == LOW)
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	88 23       	and	r24, r24
    1692:	09 f0       	breq	.+2      	; 0x1696 <Dio_Write+0x128>
    1694:	46 c0       	rjmp	.+140    	; 0x1722 <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTC,pin);
    1696:	a5 e3       	ldi	r26, 0x35	; 53
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e3       	ldi	r30, 0x35	; 53
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <Dio_Write+0x146>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <Dio_Write+0x142>
    16b8:	80 95       	com	r24
    16ba:	84 23       	and	r24, r20
    16bc:	8c 93       	st	X, r24
    16be:	31 c0       	rjmp	.+98     	; 0x1722 <Dio_Write+0x1b4>
		}
	}
	else if(port == PORT_D)
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	83 30       	cpi	r24, 0x03	; 3
    16c4:	71 f5       	brne	.+92     	; 0x1722 <Dio_Write+0x1b4>
	{
		if(state == HIGH)
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	81 30       	cpi	r24, 0x01	; 1
    16ca:	a1 f4       	brne	.+40     	; 0x16f4 <Dio_Write+0x186>
		{
			SET_BIT(PORTD,pin);
    16cc:	a2 e3       	ldi	r26, 0x32	; 50
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e2 e3       	ldi	r30, 0x32	; 50
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <Dio_Write+0x17c>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <Dio_Write+0x178>
    16ee:	84 2b       	or	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	17 c0       	rjmp	.+46     	; 0x1722 <Dio_Write+0x1b4>
		}
		else if(state == LOW)
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	88 23       	and	r24, r24
    16f8:	a1 f4       	brne	.+40     	; 0x1722 <Dio_Write+0x1b4>
		{
			CLEAR_BIT(PORTD,pin);
    16fa:	a2 e3       	ldi	r26, 0x32	; 50
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e2 e3       	ldi	r30, 0x32	; 50
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <Dio_Write+0x1aa>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <Dio_Write+0x1a6>
    171c:	80 95       	com	r24
    171e:	84 23       	and	r24, r20
    1720:	8c 93       	st	X, r24
		}
	}


}
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <Dio_Read>:
Dio_state_t Dio_Read(channel_t ch)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	00 d0       	rcall	.+0      	; 0x1736 <Dio_Read+0x6>
    1736:	00 d0       	rcall	.+0      	; 0x1738 <Dio_Read+0x8>
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	8c 83       	std	Y+4, r24	; 0x04
	Dio_state_t state = LOW;
    173e:	1b 82       	std	Y+3, r1	; 0x03
	Dio_port_t port = ch / 8;
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	86 95       	lsr	r24
    1744:	86 95       	lsr	r24
    1746:	86 95       	lsr	r24
    1748:	8a 83       	std	Y+2, r24	; 0x02
	Dio_pin_t pin = ch % 8;
    174a:	8c 81       	ldd	r24, Y+4	; 0x04
    174c:	87 70       	andi	r24, 0x07	; 7
    174e:	89 83       	std	Y+1, r24	; 0x01
	if(port == PORT_A)
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	88 23       	and	r24, r24
    1754:	91 f4       	brne	.+36     	; 0x177a <Dio_Read+0x4a>
	{
		state = READ_BIT(PINA,pin);
    1756:	e9 e3       	ldi	r30, 0x39	; 57
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a9 01       	movw	r20, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <Dio_Read+0x3e>
    176a:	55 95       	asr	r21
    176c:	47 95       	ror	r20
    176e:	8a 95       	dec	r24
    1770:	e2 f7       	brpl	.-8      	; 0x176a <Dio_Read+0x3a>
    1772:	ca 01       	movw	r24, r20
    1774:	81 70       	andi	r24, 0x01	; 1
    1776:	8b 83       	std	Y+3, r24	; 0x03
    1778:	3e c0       	rjmp	.+124    	; 0x17f6 <Dio_Read+0xc6>
	}
	else if(port == PORT_B)
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	81 30       	cpi	r24, 0x01	; 1
    177e:	91 f4       	brne	.+36     	; 0x17a4 <Dio_Read+0x74>
	{
		state = READ_BIT(PINB,pin);
    1780:	e6 e3       	ldi	r30, 0x36	; 54
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	88 2f       	mov	r24, r24
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	a9 01       	movw	r20, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <Dio_Read+0x68>
    1794:	55 95       	asr	r21
    1796:	47 95       	ror	r20
    1798:	8a 95       	dec	r24
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <Dio_Read+0x64>
    179c:	ca 01       	movw	r24, r20
    179e:	81 70       	andi	r24, 0x01	; 1
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    17a2:	29 c0       	rjmp	.+82     	; 0x17f6 <Dio_Read+0xc6>
	}
	else if(port == PORT_C)
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	82 30       	cpi	r24, 0x02	; 2
    17a8:	91 f4       	brne	.+36     	; 0x17ce <Dio_Read+0x9e>
	{
		state = READ_BIT(PINC,pin);
    17aa:	e3 e3       	ldi	r30, 0x33	; 51
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	a9 01       	movw	r20, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <Dio_Read+0x92>
    17be:	55 95       	asr	r21
    17c0:	47 95       	ror	r20
    17c2:	8a 95       	dec	r24
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <Dio_Read+0x8e>
    17c6:	ca 01       	movw	r24, r20
    17c8:	81 70       	andi	r24, 0x01	; 1
    17ca:	8b 83       	std	Y+3, r24	; 0x03
    17cc:	14 c0       	rjmp	.+40     	; 0x17f6 <Dio_Read+0xc6>
	}
	else if(port == PORT_D)
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	83 30       	cpi	r24, 0x03	; 3
    17d2:	89 f4       	brne	.+34     	; 0x17f6 <Dio_Read+0xc6>
	{
		state = READ_BIT(PIND,pin);
    17d4:	e0 e3       	ldi	r30, 0x30	; 48
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	88 2f       	mov	r24, r24
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	a9 01       	movw	r20, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <Dio_Read+0xbc>
    17e8:	55 95       	asr	r21
    17ea:	47 95       	ror	r20
    17ec:	8a 95       	dec	r24
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <Dio_Read+0xb8>
    17f0:	ca 01       	movw	r24, r20
    17f2:	81 70       	andi	r24, 0x01	; 1
    17f4:	8b 83       	std	Y+3, r24	; 0x03
	}

	return state;
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <SevSegment_Display_Number>:
 *      Author: Mahmoud Abdelmoniem
 *
 */

#include "SevSegment.h"
void SevSegment_Display_Number(uint8 number){
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	0f 92       	push	r0
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	89 83       	std	Y+1, r24	; 0x01

#if SEGMENT_TYPE == COMMON_CATHODE
	Dio_Write(SEV_PIN1, READ_BIT(number,0));
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	98 2f       	mov	r25, r24
    1816:	91 70       	andi	r25, 0x01	; 1
    1818:	80 e1       	ldi	r24, 0x10	; 16
    181a:	69 2f       	mov	r22, r25
    181c:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	Dio_Write(SEV_PIN2, READ_BIT(number,1));
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	86 95       	lsr	r24
    1824:	98 2f       	mov	r25, r24
    1826:	91 70       	andi	r25, 0x01	; 1
    1828:	81 e1       	ldi	r24, 0x11	; 17
    182a:	69 2f       	mov	r22, r25
    182c:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	Dio_Write(SEV_PIN3, READ_BIT(number,2));
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	86 95       	lsr	r24
    1834:	86 95       	lsr	r24
    1836:	98 2f       	mov	r25, r24
    1838:	91 70       	andi	r25, 0x01	; 1
    183a:	82 e1       	ldi	r24, 0x12	; 18
    183c:	69 2f       	mov	r22, r25
    183e:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	Dio_Write(SEV_PIN4, READ_BIT(number,3));
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	86 95       	lsr	r24
    1846:	86 95       	lsr	r24
    1848:	86 95       	lsr	r24
    184a:	98 2f       	mov	r25, r24
    184c:	91 70       	andi	r25, 0x01	; 1
    184e:	83 e1       	ldi	r24, 0x13	; 19
    1850:	69 2f       	mov	r22, r25
    1852:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	Dio_Write(SEV_PIN1, (READ_BIT(number,0))^1);
	Dio_Write(SEV_PIN2, (READ_BIT(number,1))^1);
	Dio_Write(SEV_PIN3, (READ_BIT(number,2))^1);
	Dio_Write(SEV_PIN4, (READ_BIT(number,3))^1);
#endif
}
    1856:	0f 90       	pop	r0
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <SevSegment_Display_Counter>:

void SevSegment_Display_Counter(uint8 counterUP_DOWN,uint16 delay)
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	a1 97       	sbiw	r28, 0x21	; 33
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	8f 8f       	std	Y+31, r24	; 0x1f
    1874:	79 a3       	std	Y+33, r23	; 0x21
    1876:	68 a3       	std	Y+32, r22	; 0x20
	if(COUNTER_UP == counterUP_DOWN)
    1878:	8f 8d       	ldd	r24, Y+31	; 0x1f
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	09 f0       	breq	.+2      	; 0x1880 <SevSegment_Display_Counter+0x22>
    187e:	86 c0       	rjmp	.+268    	; 0x198c <SevSegment_Display_Counter+0x12e>
	{
		for(uint8 counter =0;counter<10;counter++)
    1880:	1e 8e       	std	Y+30, r1	; 0x1e
    1882:	7f c0       	rjmp	.+254    	; 0x1982 <SevSegment_Display_Counter+0x124>
		{
			SevSegment_Display_Number(counter);
    1884:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1886:	0e 94 03 0c 	call	0x1806	; 0x1806 <SevSegment_Display_Number>
			_delay_ms(delay);
    188a:	88 a1       	ldd	r24, Y+32	; 0x20
    188c:	99 a1       	ldd	r25, Y+33	; 0x21
    188e:	cc 01       	movw	r24, r24
    1890:	a0 e0       	ldi	r26, 0x00	; 0
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	89 8f       	std	Y+25, r24	; 0x19
    18a2:	9a 8f       	std	Y+26, r25	; 0x1a
    18a4:	ab 8f       	std	Y+27, r26	; 0x1b
    18a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	69 8d       	ldd	r22, Y+25	; 0x19
    18aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a ef       	ldi	r20, 0xFA	; 250
    18b6:	54 e4       	ldi	r21, 0x44	; 68
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8d 8b       	std	Y+21, r24	; 0x15
    18c2:	9e 8b       	std	Y+22, r25	; 0x16
    18c4:	af 8b       	std	Y+23, r26	; 0x17
    18c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18c8:	6d 89       	ldd	r22, Y+21	; 0x15
    18ca:	7e 89       	ldd	r23, Y+22	; 0x16
    18cc:	8f 89       	ldd	r24, Y+23	; 0x17
    18ce:	98 8d       	ldd	r25, Y+24	; 0x18
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	5f e3       	ldi	r21, 0x3F	; 63
    18d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	2c f4       	brge	.+10     	; 0x18ea <SevSegment_Display_Counter+0x8c>
		__ticks = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	9c 8b       	std	Y+20, r25	; 0x14
    18e6:	8b 8b       	std	Y+19, r24	; 0x13
    18e8:	3f c0       	rjmp	.+126    	; 0x1968 <SevSegment_Display_Counter+0x10a>
	else if (__tmp > 65535)
    18ea:	6d 89       	ldd	r22, Y+21	; 0x15
    18ec:	7e 89       	ldd	r23, Y+22	; 0x16
    18ee:	8f 89       	ldd	r24, Y+23	; 0x17
    18f0:	98 8d       	ldd	r25, Y+24	; 0x18
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	3f ef       	ldi	r19, 0xFF	; 255
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	57 e4       	ldi	r21, 0x47	; 71
    18fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	4c f5       	brge	.+82     	; 0x1954 <SevSegment_Display_Counter+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	69 8d       	ldd	r22, Y+25	; 0x19
    1904:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1906:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1908:	9c 8d       	ldd	r25, Y+28	; 0x1c
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e2       	ldi	r20, 0x20	; 32
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9c 8b       	std	Y+20, r25	; 0x14
    1928:	8b 8b       	std	Y+19, r24	; 0x13
    192a:	0f c0       	rjmp	.+30     	; 0x194a <SevSegment_Display_Counter+0xec>
    192c:	88 ec       	ldi	r24, 0xC8	; 200
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9a 8b       	std	Y+18, r25	; 0x12
    1932:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1934:	89 89       	ldd	r24, Y+17	; 0x11
    1936:	9a 89       	ldd	r25, Y+18	; 0x12
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <SevSegment_Display_Counter+0xda>
    193c:	9a 8b       	std	Y+18, r25	; 0x12
    193e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1940:	8b 89       	ldd	r24, Y+19	; 0x13
    1942:	9c 89       	ldd	r25, Y+20	; 0x14
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	9c 89       	ldd	r25, Y+20	; 0x14
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	69 f7       	brne	.-38     	; 0x192c <SevSegment_Display_Counter+0xce>
    1952:	14 c0       	rjmp	.+40     	; 0x197c <SevSegment_Display_Counter+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	6d 89       	ldd	r22, Y+21	; 0x15
    1956:	7e 89       	ldd	r23, Y+22	; 0x16
    1958:	8f 89       	ldd	r24, Y+23	; 0x17
    195a:	98 8d       	ldd	r25, Y+24	; 0x18
    195c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9c 8b       	std	Y+20, r25	; 0x14
    1966:	8b 8b       	std	Y+19, r24	; 0x13
    1968:	8b 89       	ldd	r24, Y+19	; 0x13
    196a:	9c 89       	ldd	r25, Y+20	; 0x14
    196c:	98 8b       	std	Y+16, r25	; 0x10
    196e:	8f 87       	std	Y+15, r24	; 0x0f
    1970:	8f 85       	ldd	r24, Y+15	; 0x0f
    1972:	98 89       	ldd	r25, Y+16	; 0x10
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <SevSegment_Display_Counter+0x116>
    1978:	98 8b       	std	Y+16, r25	; 0x10
    197a:	8f 87       	std	Y+15, r24	; 0x0f

void SevSegment_Display_Counter(uint8 counterUP_DOWN,uint16 delay)
{
	if(COUNTER_UP == counterUP_DOWN)
	{
		for(uint8 counter =0;counter<10;counter++)
    197c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    197e:	8f 5f       	subi	r24, 0xFF	; 255
    1980:	8e 8f       	std	Y+30, r24	; 0x1e
    1982:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1984:	8a 30       	cpi	r24, 0x0A	; 10
    1986:	08 f4       	brcc	.+2      	; 0x198a <SevSegment_Display_Counter+0x12c>
    1988:	7d cf       	rjmp	.-262    	; 0x1884 <SevSegment_Display_Counter+0x26>
    198a:	86 c0       	rjmp	.+268    	; 0x1a98 <SevSegment_Display_Counter+0x23a>
		{
			SevSegment_Display_Number(counter);
			_delay_ms(delay);
		}
	}
	else if(COUNTER_DOWN == counterUP_DOWN)
    198c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    198e:	88 23       	and	r24, r24
    1990:	09 f0       	breq	.+2      	; 0x1994 <SevSegment_Display_Counter+0x136>
    1992:	82 c0       	rjmp	.+260    	; 0x1a98 <SevSegment_Display_Counter+0x23a>
	{
		for(uint8 counter =9;counter>=0;counter--)
    1994:	89 e0       	ldi	r24, 0x09	; 9
    1996:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			SevSegment_Display_Number(counter);
    1998:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199a:	0e 94 03 0c 	call	0x1806	; 0x1806 <SevSegment_Display_Number>
			_delay_ms(delay);
    199e:	88 a1       	ldd	r24, Y+32	; 0x20
    19a0:	99 a1       	ldd	r25, Y+33	; 0x21
    19a2:	cc 01       	movw	r24, r24
    19a4:	a0 e0       	ldi	r26, 0x00	; 0
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	bc 01       	movw	r22, r24
    19aa:	cd 01       	movw	r24, r26
    19ac:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	8b 87       	std	Y+11, r24	; 0x0b
    19b6:	9c 87       	std	Y+12, r25	; 0x0c
    19b8:	ad 87       	std	Y+13, r26	; 0x0d
    19ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    19be:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	4a ef       	ldi	r20, 0xFA	; 250
    19ca:	54 e4       	ldi	r21, 0x44	; 68
    19cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	8f 83       	std	Y+7, r24	; 0x07
    19d6:	98 87       	std	Y+8, r25	; 0x08
    19d8:	a9 87       	std	Y+9, r26	; 0x09
    19da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19dc:	6f 81       	ldd	r22, Y+7	; 0x07
    19de:	78 85       	ldd	r23, Y+8	; 0x08
    19e0:	89 85       	ldd	r24, Y+9	; 0x09
    19e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	40 e8       	ldi	r20, 0x80	; 128
    19ea:	5f e3       	ldi	r21, 0x3F	; 63
    19ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f0:	88 23       	and	r24, r24
    19f2:	2c f4       	brge	.+10     	; 0x19fe <SevSegment_Display_Counter+0x1a0>
		__ticks = 1;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
    19fc:	3f c0       	rjmp	.+126    	; 0x1a7c <SevSegment_Display_Counter+0x21e>
	else if (__tmp > 65535)
    19fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1a00:	78 85       	ldd	r23, Y+8	; 0x08
    1a02:	89 85       	ldd	r24, Y+9	; 0x09
    1a04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	3f ef       	ldi	r19, 0xFF	; 255
    1a0a:	4f e7       	ldi	r20, 0x7F	; 127
    1a0c:	57 e4       	ldi	r21, 0x47	; 71
    1a0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a12:	18 16       	cp	r1, r24
    1a14:	4c f5       	brge	.+82     	; 0x1a68 <SevSegment_Display_Counter+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e2       	ldi	r20, 0x20	; 32
    1a24:	51 e4       	ldi	r21, 0x41	; 65
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	9e 83       	std	Y+6, r25	; 0x06
    1a3c:	8d 83       	std	Y+5, r24	; 0x05
    1a3e:	0f c0       	rjmp	.+30     	; 0x1a5e <SevSegment_Display_Counter+0x200>
    1a40:	88 ec       	ldi	r24, 0xC8	; 200
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9c 83       	std	Y+4, r25	; 0x04
    1a46:	8b 83       	std	Y+3, r24	; 0x03
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	01 97       	sbiw	r24, 0x01	; 1
    1a4e:	f1 f7       	brne	.-4      	; 0x1a4c <SevSegment_Display_Counter+0x1ee>
    1a50:	9c 83       	std	Y+4, r25	; 0x04
    1a52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	9e 83       	std	Y+6, r25	; 0x06
    1a5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a60:	9e 81       	ldd	r25, Y+6	; 0x06
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	69 f7       	brne	.-38     	; 0x1a40 <SevSegment_Display_Counter+0x1e2>
    1a66:	14 c0       	rjmp	.+40     	; 0x1a90 <SevSegment_Display_Counter+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a68:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6a:	78 85       	ldd	r23, Y+8	; 0x08
    1a6c:	89 85       	ldd	r24, Y+9	; 0x09
    1a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	9e 83       	std	Y+6, r25	; 0x06
    1a7a:	8d 83       	std	Y+5, r24	; 0x05
    1a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a80:	9a 83       	std	Y+2, r25	; 0x02
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	9a 81       	ldd	r25, Y+2	; 0x02
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	f1 f7       	brne	.-4      	; 0x1a88 <SevSegment_Display_Counter+0x22a>
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(delay);
		}
	}
	else if(COUNTER_DOWN == counterUP_DOWN)
	{
		for(uint8 counter =9;counter>=0;counter--)
    1a90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a92:	81 50       	subi	r24, 0x01	; 1
    1a94:	8d 8f       	std	Y+29, r24	; 0x1d
    1a96:	80 cf       	rjmp	.-256    	; 0x1998 <SevSegment_Display_Counter+0x13a>
		{
			SevSegment_Display_Number(counter);
			_delay_ms(delay);
		}
	}
}
    1a98:	a1 96       	adiw	r28, 0x21	; 33
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <LCD_Init>:
#include "lcd.h"

static void Trigger_Enable();
static void Set_Cursor_Pos(uint8 row,uint8 column);
void LCD_Init(void)
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	cd b7       	in	r28, 0x3d	; 61
    1ab0:	de b7       	in	r29, 0x3e	; 62
    1ab2:	2e 97       	sbiw	r28, 0x0e	; 14
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	a0 ea       	ldi	r26, 0xA0	; 160
    1ac4:	b1 e4       	ldi	r27, 0x41	; 65
    1ac6:	8b 87       	std	Y+11, r24	; 0x0b
    1ac8:	9c 87       	std	Y+12, r25	; 0x0c
    1aca:	ad 87       	std	Y+13, r26	; 0x0d
    1acc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ace:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	4a ef       	ldi	r20, 0xFA	; 250
    1adc:	54 e4       	ldi	r21, 0x44	; 68
    1ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	cb 01       	movw	r24, r22
    1ae6:	8f 83       	std	Y+7, r24	; 0x07
    1ae8:	98 87       	std	Y+8, r25	; 0x08
    1aea:	a9 87       	std	Y+9, r26	; 0x09
    1aec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aee:	6f 81       	ldd	r22, Y+7	; 0x07
    1af0:	78 85       	ldd	r23, Y+8	; 0x08
    1af2:	89 85       	ldd	r24, Y+9	; 0x09
    1af4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e8       	ldi	r20, 0x80	; 128
    1afc:	5f e3       	ldi	r21, 0x3F	; 63
    1afe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b02:	88 23       	and	r24, r24
    1b04:	2c f4       	brge	.+10     	; 0x1b10 <LCD_Init+0x66>
		__ticks = 1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9e 83       	std	Y+6, r25	; 0x06
    1b0c:	8d 83       	std	Y+5, r24	; 0x05
    1b0e:	3f c0       	rjmp	.+126    	; 0x1b8e <LCD_Init+0xe4>
	else if (__tmp > 65535)
    1b10:	6f 81       	ldd	r22, Y+7	; 0x07
    1b12:	78 85       	ldd	r23, Y+8	; 0x08
    1b14:	89 85       	ldd	r24, Y+9	; 0x09
    1b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	3f ef       	ldi	r19, 0xFF	; 255
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	57 e4       	ldi	r21, 0x47	; 71
    1b20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	4c f5       	brge	.+82     	; 0x1b7a <LCD_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	40 e2       	ldi	r20, 0x20	; 32
    1b36:	51 e4       	ldi	r21, 0x41	; 65
    1b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
    1b50:	0f c0       	rjmp	.+30     	; 0x1b70 <LCD_Init+0xc6>
    1b52:	88 ec       	ldi	r24, 0xC8	; 200
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	9c 83       	std	Y+4, r25	; 0x04
    1b58:	8b 83       	std	Y+3, r24	; 0x03
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	01 97       	sbiw	r24, 0x01	; 1
    1b60:	f1 f7       	brne	.-4      	; 0x1b5e <LCD_Init+0xb4>
    1b62:	9c 83       	std	Y+4, r25	; 0x04
    1b64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	00 97       	sbiw	r24, 0x00	; 0
    1b76:	69 f7       	brne	.-38     	; 0x1b52 <LCD_Init+0xa8>
    1b78:	14 c0       	rjmp	.+40     	; 0x1ba2 <LCD_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b7c:	78 85       	ldd	r23, Y+8	; 0x08
    1b7e:	89 85       	ldd	r24, Y+9	; 0x09
    1b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	9e 83       	std	Y+6, r25	; 0x06
    1b8c:	8d 83       	std	Y+5, r24	; 0x05
    1b8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b90:	9e 81       	ldd	r25, Y+6	; 0x06
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	f1 f7       	brne	.-4      	; 0x1b9a <LCD_Init+0xf0>
    1b9e:	9a 83       	std	Y+2, r25	; 0x02
    1ba0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_Send_Command(0x33);
    1ba2:	83 e3       	ldi	r24, 0x33	; 51
    1ba4:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
	LCD_Send_Command(0x32);
    1ba8:	82 e3       	ldi	r24, 0x32	; 50
    1baa:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
	LCD_Send_Command(_LCD_4BIT_MODE_2_LINE);
    1bae:	88 e2       	ldi	r24, 0x28	; 40
    1bb0:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
	LCD_Send_Command(_LCD_DISPLAY_ON_UNDERLINE_ON_CURSOR_OFF);
    1bb4:	8e e0       	ldi	r24, 0x0E	; 14
    1bb6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
	LCD_Send_Command(_LCD_ENTRY_MODE_INC_SHIFT_OFF);
    1bba:	86 e0       	ldi	r24, 0x06	; 6
    1bbc:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
	LCD_Send_Command(_LCD_DDRAM_START);
    1bc0:	80 e8       	ldi	r24, 0x80	; 128
    1bc2:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
	LCD_Send_Command(_LCD_CLEAR);
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
}
    1bcc:	2e 96       	adiw	r28, 0x0e	; 14
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <LCD_Send_Command>:
void LCD_Send_Command(uint8 command)
{
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	0f 92       	push	r0
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	89 83       	std	Y+1, r24	; 0x01
	Dio_Write(RS, LOW);
    1bea:	88 e0       	ldi	r24, 0x08	; 8
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	Dio_Write(RW, LOW);
    1bf2:	89 e0       	ldi	r24, 0x09	; 9
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>

	(READ_BIT(command,7)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	88 23       	and	r24, r24
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <LCD_Send_Command+0x2c>
    1c00:	87 e0       	ldi	r24, 0x07	; 7
    1c02:	61 e0       	ldi	r22, 0x01	; 1
    1c04:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1c08:	04 c0       	rjmp	.+8      	; 0x1c12 <LCD_Send_Command+0x34>
    1c0a:	87 e0       	ldi	r24, 0x07	; 7
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(command,6)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	82 95       	swap	r24
    1c16:	86 95       	lsr	r24
    1c18:	86 95       	lsr	r24
    1c1a:	83 70       	andi	r24, 0x03	; 3
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	81 70       	andi	r24, 0x01	; 1
    1c22:	90 70       	andi	r25, 0x00	; 0
    1c24:	88 23       	and	r24, r24
    1c26:	29 f0       	breq	.+10     	; 0x1c32 <LCD_Send_Command+0x54>
    1c28:	86 e0       	ldi	r24, 0x06	; 6
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1c30:	04 c0       	rjmp	.+8      	; 0x1c3a <LCD_Send_Command+0x5c>
    1c32:	86 e0       	ldi	r24, 0x06	; 6
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(command,5)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	82 95       	swap	r24
    1c3e:	86 95       	lsr	r24
    1c40:	87 70       	andi	r24, 0x07	; 7
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	81 70       	andi	r24, 0x01	; 1
    1c48:	90 70       	andi	r25, 0x00	; 0
    1c4a:	88 23       	and	r24, r24
    1c4c:	29 f0       	breq	.+10     	; 0x1c58 <LCD_Send_Command+0x7a>
    1c4e:	85 e0       	ldi	r24, 0x05	; 5
    1c50:	61 e0       	ldi	r22, 0x01	; 1
    1c52:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1c56:	04 c0       	rjmp	.+8      	; 0x1c60 <LCD_Send_Command+0x82>
    1c58:	85 e0       	ldi	r24, 0x05	; 5
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(command,4)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    1c60:	89 81       	ldd	r24, Y+1	; 0x01
    1c62:	82 95       	swap	r24
    1c64:	8f 70       	andi	r24, 0x0F	; 15
    1c66:	88 2f       	mov	r24, r24
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	81 70       	andi	r24, 0x01	; 1
    1c6c:	90 70       	andi	r25, 0x00	; 0
    1c6e:	88 23       	and	r24, r24
    1c70:	29 f0       	breq	.+10     	; 0x1c7c <LCD_Send_Command+0x9e>
    1c72:	84 e0       	ldi	r24, 0x04	; 4
    1c74:	61 e0       	ldi	r22, 0x01	; 1
    1c76:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1c7a:	04 c0       	rjmp	.+8      	; 0x1c84 <LCD_Send_Command+0xa6>
    1c7c:	84 e0       	ldi	r24, 0x04	; 4
    1c7e:	60 e0       	ldi	r22, 0x00	; 0
    1c80:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    1c84:	0e 94 15 10 	call	0x202a	; 0x202a <Trigger_Enable>
	(READ_BIT(command,3)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	86 95       	lsr	r24
    1c8c:	86 95       	lsr	r24
    1c8e:	86 95       	lsr	r24
    1c90:	88 2f       	mov	r24, r24
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	81 70       	andi	r24, 0x01	; 1
    1c96:	90 70       	andi	r25, 0x00	; 0
    1c98:	88 23       	and	r24, r24
    1c9a:	29 f0       	breq	.+10     	; 0x1ca6 <LCD_Send_Command+0xc8>
    1c9c:	87 e0       	ldi	r24, 0x07	; 7
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1ca4:	04 c0       	rjmp	.+8      	; 0x1cae <LCD_Send_Command+0xd0>
    1ca6:	87 e0       	ldi	r24, 0x07	; 7
    1ca8:	60 e0       	ldi	r22, 0x00	; 0
    1caa:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(command,2)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    1cae:	89 81       	ldd	r24, Y+1	; 0x01
    1cb0:	86 95       	lsr	r24
    1cb2:	86 95       	lsr	r24
    1cb4:	88 2f       	mov	r24, r24
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	81 70       	andi	r24, 0x01	; 1
    1cba:	90 70       	andi	r25, 0x00	; 0
    1cbc:	88 23       	and	r24, r24
    1cbe:	29 f0       	breq	.+10     	; 0x1cca <LCD_Send_Command+0xec>
    1cc0:	86 e0       	ldi	r24, 0x06	; 6
    1cc2:	61 e0       	ldi	r22, 0x01	; 1
    1cc4:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1cc8:	04 c0       	rjmp	.+8      	; 0x1cd2 <LCD_Send_Command+0xf4>
    1cca:	86 e0       	ldi	r24, 0x06	; 6
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(command,1)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	86 95       	lsr	r24
    1cd6:	88 2f       	mov	r24, r24
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	81 70       	andi	r24, 0x01	; 1
    1cdc:	90 70       	andi	r25, 0x00	; 0
    1cde:	88 23       	and	r24, r24
    1ce0:	29 f0       	breq	.+10     	; 0x1cec <LCD_Send_Command+0x10e>
    1ce2:	85 e0       	ldi	r24, 0x05	; 5
    1ce4:	61 e0       	ldi	r22, 0x01	; 1
    1ce6:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <LCD_Send_Command+0x116>
    1cec:	85 e0       	ldi	r24, 0x05	; 5
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(command,0)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	88 2f       	mov	r24, r24
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	81 70       	andi	r24, 0x01	; 1
    1cfc:	90 70       	andi	r25, 0x00	; 0
    1cfe:	88 23       	and	r24, r24
    1d00:	29 f0       	breq	.+10     	; 0x1d0c <LCD_Send_Command+0x12e>
    1d02:	84 e0       	ldi	r24, 0x04	; 4
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <LCD_Send_Command+0x136>
    1d0c:	84 e0       	ldi	r24, 0x04	; 4
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    1d14:	0e 94 15 10 	call	0x202a	; 0x202a <Trigger_Enable>
}
    1d18:	0f 90       	pop	r0
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <LCD_Send_Char>:
void LCD_Send_Char(uint8 _char)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	0f 92       	push	r0
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	89 83       	std	Y+1, r24	; 0x01
	Dio_Write(RS, HIGH);
    1d2c:	88 e0       	ldi	r24, 0x08	; 8
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	Dio_Write(RW, LOW);
    1d34:	89 e0       	ldi	r24, 0x09	; 9
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>

	(READ_BIT(_char,7)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	88 23       	and	r24, r24
    1d40:	2c f4       	brge	.+10     	; 0x1d4c <LCD_Send_Char+0x2c>
    1d42:	87 e0       	ldi	r24, 0x07	; 7
    1d44:	61 e0       	ldi	r22, 0x01	; 1
    1d46:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1d4a:	04 c0       	rjmp	.+8      	; 0x1d54 <LCD_Send_Char+0x34>
    1d4c:	87 e0       	ldi	r24, 0x07	; 7
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(_char,6)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    1d54:	89 81       	ldd	r24, Y+1	; 0x01
    1d56:	82 95       	swap	r24
    1d58:	86 95       	lsr	r24
    1d5a:	86 95       	lsr	r24
    1d5c:	83 70       	andi	r24, 0x03	; 3
    1d5e:	88 2f       	mov	r24, r24
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	81 70       	andi	r24, 0x01	; 1
    1d64:	90 70       	andi	r25, 0x00	; 0
    1d66:	88 23       	and	r24, r24
    1d68:	29 f0       	breq	.+10     	; 0x1d74 <LCD_Send_Char+0x54>
    1d6a:	86 e0       	ldi	r24, 0x06	; 6
    1d6c:	61 e0       	ldi	r22, 0x01	; 1
    1d6e:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1d72:	04 c0       	rjmp	.+8      	; 0x1d7c <LCD_Send_Char+0x5c>
    1d74:	86 e0       	ldi	r24, 0x06	; 6
    1d76:	60 e0       	ldi	r22, 0x00	; 0
    1d78:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(_char,5)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	82 95       	swap	r24
    1d80:	86 95       	lsr	r24
    1d82:	87 70       	andi	r24, 0x07	; 7
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	81 70       	andi	r24, 0x01	; 1
    1d8a:	90 70       	andi	r25, 0x00	; 0
    1d8c:	88 23       	and	r24, r24
    1d8e:	29 f0       	breq	.+10     	; 0x1d9a <LCD_Send_Char+0x7a>
    1d90:	85 e0       	ldi	r24, 0x05	; 5
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1d98:	04 c0       	rjmp	.+8      	; 0x1da2 <LCD_Send_Char+0x82>
    1d9a:	85 e0       	ldi	r24, 0x05	; 5
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(_char,4)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	82 95       	swap	r24
    1da6:	8f 70       	andi	r24, 0x0F	; 15
    1da8:	88 2f       	mov	r24, r24
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	81 70       	andi	r24, 0x01	; 1
    1dae:	90 70       	andi	r25, 0x00	; 0
    1db0:	88 23       	and	r24, r24
    1db2:	29 f0       	breq	.+10     	; 0x1dbe <LCD_Send_Char+0x9e>
    1db4:	84 e0       	ldi	r24, 0x04	; 4
    1db6:	61 e0       	ldi	r22, 0x01	; 1
    1db8:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1dbc:	04 c0       	rjmp	.+8      	; 0x1dc6 <LCD_Send_Char+0xa6>
    1dbe:	84 e0       	ldi	r24, 0x04	; 4
    1dc0:	60 e0       	ldi	r22, 0x00	; 0
    1dc2:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    1dc6:	0e 94 15 10 	call	0x202a	; 0x202a <Trigger_Enable>
	(READ_BIT(_char,3)) ? Dio_Write(D7,HIGH) : Dio_Write(D7,LOW);
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	86 95       	lsr	r24
    1dce:	86 95       	lsr	r24
    1dd0:	86 95       	lsr	r24
    1dd2:	88 2f       	mov	r24, r24
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	81 70       	andi	r24, 0x01	; 1
    1dd8:	90 70       	andi	r25, 0x00	; 0
    1dda:	88 23       	and	r24, r24
    1ddc:	29 f0       	breq	.+10     	; 0x1de8 <LCD_Send_Char+0xc8>
    1dde:	87 e0       	ldi	r24, 0x07	; 7
    1de0:	61 e0       	ldi	r22, 0x01	; 1
    1de2:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1de6:	04 c0       	rjmp	.+8      	; 0x1df0 <LCD_Send_Char+0xd0>
    1de8:	87 e0       	ldi	r24, 0x07	; 7
    1dea:	60 e0       	ldi	r22, 0x00	; 0
    1dec:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(_char,2)) ? Dio_Write(D6,HIGH) : Dio_Write(D6,LOW);
    1df0:	89 81       	ldd	r24, Y+1	; 0x01
    1df2:	86 95       	lsr	r24
    1df4:	86 95       	lsr	r24
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	81 70       	andi	r24, 0x01	; 1
    1dfc:	90 70       	andi	r25, 0x00	; 0
    1dfe:	88 23       	and	r24, r24
    1e00:	29 f0       	breq	.+10     	; 0x1e0c <LCD_Send_Char+0xec>
    1e02:	86 e0       	ldi	r24, 0x06	; 6
    1e04:	61 e0       	ldi	r22, 0x01	; 1
    1e06:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1e0a:	04 c0       	rjmp	.+8      	; 0x1e14 <LCD_Send_Char+0xf4>
    1e0c:	86 e0       	ldi	r24, 0x06	; 6
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(_char,1)) ? Dio_Write(D5,HIGH) : Dio_Write(D5,LOW);
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	86 95       	lsr	r24
    1e18:	88 2f       	mov	r24, r24
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	81 70       	andi	r24, 0x01	; 1
    1e1e:	90 70       	andi	r25, 0x00	; 0
    1e20:	88 23       	and	r24, r24
    1e22:	29 f0       	breq	.+10     	; 0x1e2e <LCD_Send_Char+0x10e>
    1e24:	85 e0       	ldi	r24, 0x05	; 5
    1e26:	61 e0       	ldi	r22, 0x01	; 1
    1e28:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1e2c:	04 c0       	rjmp	.+8      	; 0x1e36 <LCD_Send_Char+0x116>
    1e2e:	85 e0       	ldi	r24, 0x05	; 5
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	(READ_BIT(_char,0)) ? Dio_Write(D4,HIGH) : Dio_Write(D4,LOW);
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	88 2f       	mov	r24, r24
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	81 70       	andi	r24, 0x01	; 1
    1e3e:	90 70       	andi	r25, 0x00	; 0
    1e40:	88 23       	and	r24, r24
    1e42:	29 f0       	breq	.+10     	; 0x1e4e <LCD_Send_Char+0x12e>
    1e44:	84 e0       	ldi	r24, 0x04	; 4
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <LCD_Send_Char+0x136>
    1e4e:	84 e0       	ldi	r24, 0x04	; 4
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	//Trigger Enable
	Trigger_Enable();
    1e56:	0e 94 15 10 	call	0x202a	; 0x202a <Trigger_Enable>
}
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <LCD_Send_Char_Pos>:
void LCD_Send_Char_Pos(uint8 _char,uint8 row,uint8 column)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <LCD_Send_Char_Pos+0x6>
    1e68:	0f 92       	push	r0
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	89 83       	std	Y+1, r24	; 0x01
    1e70:	6a 83       	std	Y+2, r22	; 0x02
    1e72:	4b 83       	std	Y+3, r20	; 0x03
	Set_Cursor_Pos(row,column);
    1e74:	8a 81       	ldd	r24, Y+2	; 0x02
    1e76:	6b 81       	ldd	r22, Y+3	; 0x03
    1e78:	0e 94 ac 11 	call	0x2358	; 0x2358 <Set_Cursor_Pos>
	LCD_Send_Char(_char);
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <LCD_Send_Char>
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	cf 91       	pop	r28
    1e8a:	df 91       	pop	r29
    1e8c:	08 95       	ret

00001e8e <LCD_Send_String>:
void LCD_Send_String(uint8 *string)
{
    1e8e:	df 93       	push	r29
    1e90:	cf 93       	push	r28
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <LCD_Send_String+0x6>
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	0b c0       	rjmp	.+22     	; 0x1eb4 <LCD_Send_String+0x26>
	while(*string !='\0')
	{
		LCD_Send_Char(*string++);
    1e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea2:	20 81       	ld	r18, Z
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	9a 83       	std	Y+2, r25	; 0x02
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	82 2f       	mov	r24, r18
    1eb0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <LCD_Send_Char>
	Set_Cursor_Pos(row,column);
	LCD_Send_Char(_char);
}
void LCD_Send_String(uint8 *string)
{
	while(*string !='\0')
    1eb4:	e9 81       	ldd	r30, Y+1	; 0x01
    1eb6:	fa 81       	ldd	r31, Y+2	; 0x02
    1eb8:	80 81       	ld	r24, Z
    1eba:	88 23       	and	r24, r24
    1ebc:	81 f7       	brne	.-32     	; 0x1e9e <LCD_Send_String+0x10>
	{
		LCD_Send_Char(*string++);
	}
}
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <LCD_Send_String_Pos>:
void LCD_Send_String_Pos(uint8 *string,uint8 row,uint8 column)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <LCD_Send_String_Pos+0x6>
    1ece:	00 d0       	rcall	.+0      	; 0x1ed0 <LCD_Send_String_Pos+0x8>
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	9a 83       	std	Y+2, r25	; 0x02
    1ed6:	89 83       	std	Y+1, r24	; 0x01
    1ed8:	6b 83       	std	Y+3, r22	; 0x03
    1eda:	4c 83       	std	Y+4, r20	; 0x04
	Set_Cursor_Pos(row,column);
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	6c 81       	ldd	r22, Y+4	; 0x04
    1ee0:	0e 94 ac 11 	call	0x2358	; 0x2358 <Set_Cursor_Pos>
	LCD_Send_String(string);
    1ee4:	89 81       	ldd	r24, Y+1	; 0x01
    1ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee8:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <LCD_Send_String>
}
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	cf 91       	pop	r28
    1ef6:	df 91       	pop	r29
    1ef8:	08 95       	ret

00001efa <LCD_Send_Number>:

void LCD_Send_Number(uint32 num)
{
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	df 93       	push	r29
    1f00:	cf 93       	push	r28
    1f02:	cd b7       	in	r28, 0x3d	; 61
    1f04:	de b7       	in	r29, 0x3e	; 62
    1f06:	60 97       	sbiw	r28, 0x10	; 16
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	6d 87       	std	Y+13, r22	; 0x0d
    1f14:	7e 87       	std	Y+14, r23	; 0x0e
    1f16:	8f 87       	std	Y+15, r24	; 0x0f
    1f18:	98 8b       	std	Y+16, r25	; 0x10
	 uint8 arr[10],i=0,j=0;
    1f1a:	1a 82       	std	Y+2, r1	; 0x02
    1f1c:	19 82       	std	Y+1, r1	; 0x01
		   if(num == 0)
    1f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f22:	af 85       	ldd	r26, Y+15	; 0x0f
    1f24:	b8 89       	ldd	r27, Y+16	; 0x10
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	a1 05       	cpc	r26, r1
    1f2a:	b1 05       	cpc	r27, r1
    1f2c:	91 f5       	brne	.+100    	; 0x1f92 <LCD_Send_Number+0x98>
		   {
			   LCD_Send_Char('0');
    1f2e:	80 e3       	ldi	r24, 0x30	; 48
    1f30:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <LCD_Send_Char>
    1f34:	4d c0       	rjmp	.+154    	; 0x1fd0 <LCD_Send_Number+0xd6>
		   }
		   else
		   {
			   while(num)
			   {
					arr[i]=num%10+'0';
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	08 2f       	mov	r16, r24
    1f3a:	10 e0       	ldi	r17, 0x00	; 0
    1f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f40:	af 85       	ldd	r26, Y+15	; 0x0f
    1f42:	b8 89       	ldd	r27, Y+16	; 0x10
    1f44:	2a e0       	ldi	r18, 0x0A	; 10
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	bc 01       	movw	r22, r24
    1f4e:	cd 01       	movw	r24, r26
    1f50:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__udivmodsi4>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	28 2f       	mov	r18, r24
    1f5a:	20 5d       	subi	r18, 0xD0	; 208
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	03 96       	adiw	r24, 0x03	; 3
    1f60:	fc 01       	movw	r30, r24
    1f62:	e0 0f       	add	r30, r16
    1f64:	f1 1f       	adc	r31, r17
    1f66:	20 83       	st	Z, r18
					num/=10;
    1f68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f6c:	af 85       	ldd	r26, Y+15	; 0x0f
    1f6e:	b8 89       	ldd	r27, Y+16	; 0x10
    1f70:	2a e0       	ldi	r18, 0x0A	; 10
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	50 e0       	ldi	r21, 0x00	; 0
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 f2 1c 	call	0x39e4	; 0x39e4 <__udivmodsi4>
    1f80:	da 01       	movw	r26, r20
    1f82:	c9 01       	movw	r24, r18
    1f84:	8d 87       	std	Y+13, r24	; 0x0d
    1f86:	9e 87       	std	Y+14, r25	; 0x0e
    1f88:	af 87       	std	Y+15, r26	; 0x0f
    1f8a:	b8 8b       	std	Y+16, r27	; 0x10
					i++;
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	8f 5f       	subi	r24, 0xFF	; 255
    1f90:	8a 83       	std	Y+2, r24	; 0x02
		   {
			   LCD_Send_Char('0');
		   }
		   else
		   {
			   while(num)
    1f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f96:	af 85       	ldd	r26, Y+15	; 0x0f
    1f98:	b8 89       	ldd	r27, Y+16	; 0x10
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	a1 05       	cpc	r26, r1
    1f9e:	b1 05       	cpc	r27, r1
    1fa0:	51 f6       	brne	.-108    	; 0x1f36 <LCD_Send_Number+0x3c>
			   {
					arr[i]=num%10+'0';
					num/=10;
					i++;
			   }
			   for(j=i;j>0;j--)
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	11 c0       	rjmp	.+34     	; 0x1fca <LCD_Send_Number+0xd0>
			   {
				   LCD_Send_Char(arr[j-1]);
    1fa8:	89 81       	ldd	r24, Y+1	; 0x01
    1faa:	88 2f       	mov	r24, r24
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	9c 01       	movw	r18, r24
    1fb0:	21 50       	subi	r18, 0x01	; 1
    1fb2:	30 40       	sbci	r19, 0x00	; 0
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	03 96       	adiw	r24, 0x03	; 3
    1fb8:	fc 01       	movw	r30, r24
    1fba:	e2 0f       	add	r30, r18
    1fbc:	f3 1f       	adc	r31, r19
    1fbe:	80 81       	ld	r24, Z
    1fc0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <LCD_Send_Char>
			   {
					arr[i]=num%10+'0';
					num/=10;
					i++;
			   }
			   for(j=i;j>0;j--)
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	81 50       	subi	r24, 0x01	; 1
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	88 23       	and	r24, r24
    1fce:	61 f7       	brne	.-40     	; 0x1fa8 <LCD_Send_Number+0xae>
			   {
				   LCD_Send_Char(arr[j-1]);
			   }
		   }
}
    1fd0:	60 96       	adiw	r28, 0x10	; 16
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	08 95       	ret

00001fe6 <LCD_Send_Number_Pos>:
void LCD_Send_Number_Pos(uint32 num,uint8 row,uint8 column)
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <LCD_Send_Number_Pos+0x6>
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <LCD_Send_Number_Pos+0x8>
    1fee:	00 d0       	rcall	.+0      	; 0x1ff0 <LCD_Send_Number_Pos+0xa>
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	69 83       	std	Y+1, r22	; 0x01
    1ff6:	7a 83       	std	Y+2, r23	; 0x02
    1ff8:	8b 83       	std	Y+3, r24	; 0x03
    1ffa:	9c 83       	std	Y+4, r25	; 0x04
    1ffc:	4d 83       	std	Y+5, r20	; 0x05
    1ffe:	2e 83       	std	Y+6, r18	; 0x06
	Set_Cursor_Pos(row,column);
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	6e 81       	ldd	r22, Y+6	; 0x06
    2004:	0e 94 ac 11 	call	0x2358	; 0x2358 <Set_Cursor_Pos>
	LCD_Send_Number(num);
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	9a 81       	ldd	r25, Y+2	; 0x02
    200c:	ab 81       	ldd	r26, Y+3	; 0x03
    200e:	bc 81       	ldd	r27, Y+4	; 0x04
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <LCD_Send_Number>
}
    2018:	26 96       	adiw	r28, 0x06	; 6
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	cf 91       	pop	r28
    2026:	df 91       	pop	r29
    2028:	08 95       	ret

0000202a <Trigger_Enable>:

static void Trigger_Enable()
{
    202a:	df 93       	push	r29
    202c:	cf 93       	push	r28
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	e0 97       	sbiw	r28, 0x30	; 48
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
	Dio_Write(EN,HIGH);
    203e:	8a e0       	ldi	r24, 0x0A	; 10
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	a0 e2       	ldi	r26, 0x20	; 32
    204c:	b1 e4       	ldi	r27, 0x41	; 65
    204e:	8d a7       	std	Y+45, r24	; 0x2d
    2050:	9e a7       	std	Y+46, r25	; 0x2e
    2052:	af a7       	std	Y+47, r26	; 0x2f
    2054:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2056:	6d a5       	ldd	r22, Y+45	; 0x2d
    2058:	7e a5       	ldd	r23, Y+46	; 0x2e
    205a:	8f a5       	ldd	r24, Y+47	; 0x2f
    205c:	98 a9       	ldd	r25, Y+48	; 0x30
    205e:	2b ea       	ldi	r18, 0xAB	; 171
    2060:	3a ea       	ldi	r19, 0xAA	; 170
    2062:	4a e2       	ldi	r20, 0x2A	; 42
    2064:	50 e4       	ldi	r21, 0x40	; 64
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	89 a7       	std	Y+41, r24	; 0x29
    2070:	9a a7       	std	Y+42, r25	; 0x2a
    2072:	ab a7       	std	Y+43, r26	; 0x2b
    2074:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2076:	69 a5       	ldd	r22, Y+41	; 0x29
    2078:	7a a5       	ldd	r23, Y+42	; 0x2a
    207a:	8b a5       	ldd	r24, Y+43	; 0x2b
    207c:	9c a5       	ldd	r25, Y+44	; 0x2c
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	1c f4       	brge	.+6      	; 0x2094 <Trigger_Enable+0x6a>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	88 a7       	std	Y+40, r24	; 0x28
    2092:	91 c0       	rjmp	.+290    	; 0x21b6 <Trigger_Enable+0x18c>
	else if (__tmp > 255)
    2094:	69 a5       	ldd	r22, Y+41	; 0x29
    2096:	7a a5       	ldd	r23, Y+42	; 0x2a
    2098:	8b a5       	ldd	r24, Y+43	; 0x2b
    209a:	9c a5       	ldd	r25, Y+44	; 0x2c
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4f e7       	ldi	r20, 0x7F	; 127
    20a2:	53 e4       	ldi	r21, 0x43	; 67
    20a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a8:	18 16       	cp	r1, r24
    20aa:	0c f0       	brlt	.+2      	; 0x20ae <Trigger_Enable+0x84>
    20ac:	7b c0       	rjmp	.+246    	; 0x21a4 <Trigger_Enable+0x17a>
	{
		_delay_ms(__us / 1000.0);
    20ae:	6d a5       	ldd	r22, Y+45	; 0x2d
    20b0:	7e a5       	ldd	r23, Y+46	; 0x2e
    20b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b4:	98 a9       	ldd	r25, Y+48	; 0x30
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	4a e7       	ldi	r20, 0x7A	; 122
    20bc:	54 e4       	ldi	r21, 0x44	; 68
    20be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	8c a3       	std	Y+36, r24	; 0x24
    20c8:	9d a3       	std	Y+37, r25	; 0x25
    20ca:	ae a3       	std	Y+38, r26	; 0x26
    20cc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6c a1       	ldd	r22, Y+36	; 0x24
    20d0:	7d a1       	ldd	r23, Y+37	; 0x25
    20d2:	8e a1       	ldd	r24, Y+38	; 0x26
    20d4:	9f a1       	ldd	r25, Y+39	; 0x27
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a ef       	ldi	r20, 0xFA	; 250
    20dc:	54 e4       	ldi	r21, 0x44	; 68
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	88 a3       	std	Y+32, r24	; 0x20
    20e8:	99 a3       	std	Y+33, r25	; 0x21
    20ea:	aa a3       	std	Y+34, r26	; 0x22
    20ec:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    20ee:	68 a1       	ldd	r22, Y+32	; 0x20
    20f0:	79 a1       	ldd	r23, Y+33	; 0x21
    20f2:	8a a1       	ldd	r24, Y+34	; 0x22
    20f4:	9b a1       	ldd	r25, Y+35	; 0x23
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <Trigger_Enable+0xe6>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9f 8f       	std	Y+31, r25	; 0x1f
    210c:	8e 8f       	std	Y+30, r24	; 0x1e
    210e:	3f c0       	rjmp	.+126    	; 0x218e <Trigger_Enable+0x164>
	else if (__tmp > 65535)
    2110:	68 a1       	ldd	r22, Y+32	; 0x20
    2112:	79 a1       	ldd	r23, Y+33	; 0x21
    2114:	8a a1       	ldd	r24, Y+34	; 0x22
    2116:	9b a1       	ldd	r25, Y+35	; 0x23
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <Trigger_Enable+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6c a1       	ldd	r22, Y+36	; 0x24
    212a:	7d a1       	ldd	r23, Y+37	; 0x25
    212c:	8e a1       	ldd	r24, Y+38	; 0x26
    212e:	9f a1       	ldd	r25, Y+39	; 0x27
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9f 8f       	std	Y+31, r25	; 0x1f
    214e:	8e 8f       	std	Y+30, r24	; 0x1e
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <Trigger_Enable+0x146>
    2152:	88 ec       	ldi	r24, 0xC8	; 200
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	9d 8f       	std	Y+29, r25	; 0x1d
    2158:	8c 8f       	std	Y+28, r24	; 0x1c
    215a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    215c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <Trigger_Enable+0x134>
    2162:	9d 8f       	std	Y+29, r25	; 0x1d
    2164:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2168:	9f 8d       	ldd	r25, Y+31	; 0x1f
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9f 8f       	std	Y+31, r25	; 0x1f
    216e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2172:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <Trigger_Enable+0x128>
    2178:	24 c0       	rjmp	.+72     	; 0x21c2 <Trigger_Enable+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	68 a1       	ldd	r22, Y+32	; 0x20
    217c:	79 a1       	ldd	r23, Y+33	; 0x21
    217e:	8a a1       	ldd	r24, Y+34	; 0x22
    2180:	9b a1       	ldd	r25, Y+35	; 0x23
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9f 8f       	std	Y+31, r25	; 0x1f
    218c:	8e 8f       	std	Y+30, r24	; 0x1e
    218e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2190:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2192:	9b 8f       	std	Y+27, r25	; 0x1b
    2194:	8a 8f       	std	Y+26, r24	; 0x1a
    2196:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2198:	9b 8d       	ldd	r25, Y+27	; 0x1b
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <Trigger_Enable+0x170>
    219e:	9b 8f       	std	Y+27, r25	; 0x1b
    21a0:	8a 8f       	std	Y+26, r24	; 0x1a
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <Trigger_Enable+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21a4:	69 a5       	ldd	r22, Y+41	; 0x29
    21a6:	7a a5       	ldd	r23, Y+42	; 0x2a
    21a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21aa:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	88 a7       	std	Y+40, r24	; 0x28
    21b6:	88 a5       	ldd	r24, Y+40	; 0x28
    21b8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21ba:	89 8d       	ldd	r24, Y+25	; 0x19
    21bc:	8a 95       	dec	r24
    21be:	f1 f7       	brne	.-4      	; 0x21bc <Trigger_Enable+0x192>
    21c0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_Write(EN,LOW);
    21c2:	8a e0       	ldi	r24, 0x0A	; 10
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	aa ef       	ldi	r26, 0xFA	; 250
    21d0:	b4 e4       	ldi	r27, 0x44	; 68
    21d2:	8d 8b       	std	Y+21, r24	; 0x15
    21d4:	9e 8b       	std	Y+22, r25	; 0x16
    21d6:	af 8b       	std	Y+23, r26	; 0x17
    21d8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21da:	6d 89       	ldd	r22, Y+21	; 0x15
    21dc:	7e 89       	ldd	r23, Y+22	; 0x16
    21de:	8f 89       	ldd	r24, Y+23	; 0x17
    21e0:	98 8d       	ldd	r25, Y+24	; 0x18
    21e2:	2b ea       	ldi	r18, 0xAB	; 171
    21e4:	3a ea       	ldi	r19, 0xAA	; 170
    21e6:	4a e2       	ldi	r20, 0x2A	; 42
    21e8:	50 e4       	ldi	r21, 0x40	; 64
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	89 8b       	std	Y+17, r24	; 0x11
    21f4:	9a 8b       	std	Y+18, r25	; 0x12
    21f6:	ab 8b       	std	Y+19, r26	; 0x13
    21f8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    21fa:	69 89       	ldd	r22, Y+17	; 0x11
    21fc:	7a 89       	ldd	r23, Y+18	; 0x12
    21fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2200:	9c 89       	ldd	r25, Y+20	; 0x14
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e8       	ldi	r20, 0x80	; 128
    2208:	5f e3       	ldi	r21, 0x3F	; 63
    220a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    220e:	88 23       	and	r24, r24
    2210:	1c f4       	brge	.+6      	; 0x2218 <Trigger_Enable+0x1ee>
		__ticks = 1;
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	88 8b       	std	Y+16, r24	; 0x10
    2216:	91 c0       	rjmp	.+290    	; 0x233a <Trigger_Enable+0x310>
	else if (__tmp > 255)
    2218:	69 89       	ldd	r22, Y+17	; 0x11
    221a:	7a 89       	ldd	r23, Y+18	; 0x12
    221c:	8b 89       	ldd	r24, Y+19	; 0x13
    221e:	9c 89       	ldd	r25, Y+20	; 0x14
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4f e7       	ldi	r20, 0x7F	; 127
    2226:	53 e4       	ldi	r21, 0x43	; 67
    2228:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    222c:	18 16       	cp	r1, r24
    222e:	0c f0       	brlt	.+2      	; 0x2232 <Trigger_Enable+0x208>
    2230:	7b c0       	rjmp	.+246    	; 0x2328 <Trigger_Enable+0x2fe>
	{
		_delay_ms(__us / 1000.0);
    2232:	6d 89       	ldd	r22, Y+21	; 0x15
    2234:	7e 89       	ldd	r23, Y+22	; 0x16
    2236:	8f 89       	ldd	r24, Y+23	; 0x17
    2238:	98 8d       	ldd	r25, Y+24	; 0x18
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	4a e7       	ldi	r20, 0x7A	; 122
    2240:	54 e4       	ldi	r21, 0x44	; 68
    2242:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8c 87       	std	Y+12, r24	; 0x0c
    224c:	9d 87       	std	Y+13, r25	; 0x0d
    224e:	ae 87       	std	Y+14, r26	; 0x0e
    2250:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2252:	6c 85       	ldd	r22, Y+12	; 0x0c
    2254:	7d 85       	ldd	r23, Y+13	; 0x0d
    2256:	8e 85       	ldd	r24, Y+14	; 0x0e
    2258:	9f 85       	ldd	r25, Y+15	; 0x0f
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4a ef       	ldi	r20, 0xFA	; 250
    2260:	54 e4       	ldi	r21, 0x44	; 68
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	88 87       	std	Y+8, r24	; 0x08
    226c:	99 87       	std	Y+9, r25	; 0x09
    226e:	aa 87       	std	Y+10, r26	; 0x0a
    2270:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2272:	68 85       	ldd	r22, Y+8	; 0x08
    2274:	79 85       	ldd	r23, Y+9	; 0x09
    2276:	8a 85       	ldd	r24, Y+10	; 0x0a
    2278:	9b 85       	ldd	r25, Y+11	; 0x0b
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e8       	ldi	r20, 0x80	; 128
    2280:	5f e3       	ldi	r21, 0x3F	; 63
    2282:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2286:	88 23       	and	r24, r24
    2288:	2c f4       	brge	.+10     	; 0x2294 <Trigger_Enable+0x26a>
		__ticks = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9f 83       	std	Y+7, r25	; 0x07
    2290:	8e 83       	std	Y+6, r24	; 0x06
    2292:	3f c0       	rjmp	.+126    	; 0x2312 <Trigger_Enable+0x2e8>
	else if (__tmp > 65535)
    2294:	68 85       	ldd	r22, Y+8	; 0x08
    2296:	79 85       	ldd	r23, Y+9	; 0x09
    2298:	8a 85       	ldd	r24, Y+10	; 0x0a
    229a:	9b 85       	ldd	r25, Y+11	; 0x0b
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	3f ef       	ldi	r19, 0xFF	; 255
    22a0:	4f e7       	ldi	r20, 0x7F	; 127
    22a2:	57 e4       	ldi	r21, 0x47	; 71
    22a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a8:	18 16       	cp	r1, r24
    22aa:	4c f5       	brge	.+82     	; 0x22fe <Trigger_Enable+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    22ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    22b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    22b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e2       	ldi	r20, 0x20	; 32
    22ba:	51 e4       	ldi	r21, 0x41	; 65
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9f 83       	std	Y+7, r25	; 0x07
    22d2:	8e 83       	std	Y+6, r24	; 0x06
    22d4:	0f c0       	rjmp	.+30     	; 0x22f4 <Trigger_Enable+0x2ca>
    22d6:	88 ec       	ldi	r24, 0xC8	; 200
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9d 83       	std	Y+5, r25	; 0x05
    22dc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22de:	8c 81       	ldd	r24, Y+4	; 0x04
    22e0:	9d 81       	ldd	r25, Y+5	; 0x05
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <Trigger_Enable+0x2b8>
    22e6:	9d 83       	std	Y+5, r25	; 0x05
    22e8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ea:	8e 81       	ldd	r24, Y+6	; 0x06
    22ec:	9f 81       	ldd	r25, Y+7	; 0x07
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	9f 83       	std	Y+7, r25	; 0x07
    22f2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f4:	8e 81       	ldd	r24, Y+6	; 0x06
    22f6:	9f 81       	ldd	r25, Y+7	; 0x07
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	69 f7       	brne	.-38     	; 0x22d6 <Trigger_Enable+0x2ac>
    22fc:	24 c0       	rjmp	.+72     	; 0x2346 <Trigger_Enable+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fe:	68 85       	ldd	r22, Y+8	; 0x08
    2300:	79 85       	ldd	r23, Y+9	; 0x09
    2302:	8a 85       	ldd	r24, Y+10	; 0x0a
    2304:	9b 85       	ldd	r25, Y+11	; 0x0b
    2306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9f 83       	std	Y+7, r25	; 0x07
    2310:	8e 83       	std	Y+6, r24	; 0x06
    2312:	8e 81       	ldd	r24, Y+6	; 0x06
    2314:	9f 81       	ldd	r25, Y+7	; 0x07
    2316:	9b 83       	std	Y+3, r25	; 0x03
    2318:	8a 83       	std	Y+2, r24	; 0x02
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	9b 81       	ldd	r25, Y+3	; 0x03
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <Trigger_Enable+0x2f4>
    2322:	9b 83       	std	Y+3, r25	; 0x03
    2324:	8a 83       	std	Y+2, r24	; 0x02
    2326:	0f c0       	rjmp	.+30     	; 0x2346 <Trigger_Enable+0x31c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2328:	69 89       	ldd	r22, Y+17	; 0x11
    232a:	7a 89       	ldd	r23, Y+18	; 0x12
    232c:	8b 89       	ldd	r24, Y+19	; 0x13
    232e:	9c 89       	ldd	r25, Y+20	; 0x14
    2330:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	88 8b       	std	Y+16, r24	; 0x10
    233a:	88 89       	ldd	r24, Y+16	; 0x10
    233c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	8a 95       	dec	r24
    2342:	f1 f7       	brne	.-4      	; 0x2340 <Trigger_Enable+0x316>
    2344:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
}
    2346:	e0 96       	adiw	r28, 0x30	; 48
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <Set_Cursor_Pos>:
static void Set_Cursor_Pos(uint8 row,uint8 column)
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	00 d0       	rcall	.+0      	; 0x235e <Set_Cursor_Pos+0x6>
    235e:	00 d0       	rcall	.+0      	; 0x2360 <Set_Cursor_Pos+0x8>
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	81 50       	subi	r24, 0x01	; 1
    236c:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	3c 83       	std	Y+4, r19	; 0x04
    2376:	2b 83       	std	Y+3, r18	; 0x03
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	81 30       	cpi	r24, 0x01	; 1
    237e:	91 05       	cpc	r25, r1
    2380:	31 f0       	breq	.+12     	; 0x238e <Set_Cursor_Pos+0x36>
    2382:	2b 81       	ldd	r18, Y+3	; 0x03
    2384:	3c 81       	ldd	r19, Y+4	; 0x04
    2386:	22 30       	cpi	r18, 0x02	; 2
    2388:	31 05       	cpc	r19, r1
    238a:	31 f0       	breq	.+12     	; 0x2398 <Set_Cursor_Pos+0x40>
    238c:	09 c0       	rjmp	.+18     	; 0x23a0 <Set_Cursor_Pos+0x48>
	            case ROW1: LCD_Send_Command((0x80 + column)); break;
    238e:	8a 81       	ldd	r24, Y+2	; 0x02
    2390:	80 58       	subi	r24, 0x80	; 128
    2392:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
    2396:	04 c0       	rjmp	.+8      	; 0x23a0 <Set_Cursor_Pos+0x48>
	            case ROW2: LCD_Send_Command((0xc0 + column)); break;
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	80 54       	subi	r24, 0x40	; 64
    239c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
	            default:;
	        }
}
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <KP_GetPressed>:
                                                                        {4, 5, 6, '*'},
                                                                        {1, 2, 3, '-'},
                                                                        {'&', '0', '=', '+'}
                                                                     };

uint8 KP_GetPressed(){
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
    23b6:	63 97       	sbiw	r28, 0x13	; 19
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	f8 94       	cli
    23bc:	de bf       	out	0x3e, r29	; 62
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	cd bf       	out	0x3d, r28	; 61
	uint8 LRowConter=0;
    23c2:	1b 8a       	std	Y+19, r1	; 0x13
	uint8 RowConter=0;
    23c4:	1a 8a       	std	Y+18, r1	; 0x12
	uint8 LColumnConter=0;
    23c6:	19 8a       	std	Y+17, r1	; 0x11
	Dio_state_t state=LOW;
    23c8:	18 8a       	std	Y+16, r1	; 0x10
	uint8 Btn=0;
    23ca:	1f 86       	std	Y+15, r1	; 0x0f
	for(LRowConter=0;LRowConter<KEYPAD_ROWS ;LRowConter++)
    23cc:	1b 8a       	std	Y+19, r1	; 0x13
    23ce:	ac c0       	rjmp	.+344    	; 0x2528 <KP_GetPressed+0x17a>
	{
		for(RowConter = KEYPAD_ROW_1 ;RowConter < KEYPAD_ROW_1 + KEYPAD_ROWS ;RowConter++){
    23d0:	80 e1       	ldi	r24, 0x10	; 16
    23d2:	8a 8b       	std	Y+18, r24	; 0x12
    23d4:	07 c0       	rjmp	.+14     	; 0x23e4 <KP_GetPressed+0x36>
			Dio_Write(RowConter, LOW);
    23d6:	8a 89       	ldd	r24, Y+18	; 0x12
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
	uint8 LColumnConter=0;
	Dio_state_t state=LOW;
	uint8 Btn=0;
	for(LRowConter=0;LRowConter<KEYPAD_ROWS ;LRowConter++)
	{
		for(RowConter = KEYPAD_ROW_1 ;RowConter < KEYPAD_ROW_1 + KEYPAD_ROWS ;RowConter++){
    23de:	8a 89       	ldd	r24, Y+18	; 0x12
    23e0:	8f 5f       	subi	r24, 0xFF	; 255
    23e2:	8a 8b       	std	Y+18, r24	; 0x12
    23e4:	8a 89       	ldd	r24, Y+18	; 0x12
    23e6:	84 31       	cpi	r24, 0x14	; 20
    23e8:	b0 f3       	brcs	.-20     	; 0x23d6 <KP_GetPressed+0x28>
			Dio_Write(RowConter, LOW);
		}
		Dio_Write(LRowConter + KEYPAD_ROW_1, HIGH);
    23ea:	8b 89       	ldd	r24, Y+19	; 0x13
    23ec:	80 5f       	subi	r24, 0xF0	; 240
    23ee:	61 e0       	ldi	r22, 0x01	; 1
    23f0:	0e 94 b7 0a 	call	0x156e	; 0x156e <Dio_Write>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	a0 e2       	ldi	r26, 0x20	; 32
    23fa:	b1 e4       	ldi	r27, 0x41	; 65
    23fc:	8b 87       	std	Y+11, r24	; 0x0b
    23fe:	9c 87       	std	Y+12, r25	; 0x0c
    2400:	ad 87       	std	Y+13, r26	; 0x0d
    2402:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	6b 85       	ldd	r22, Y+11	; 0x0b
    2406:	7c 85       	ldd	r23, Y+12	; 0x0c
    2408:	8d 85       	ldd	r24, Y+13	; 0x0d
    240a:	9e 85       	ldd	r25, Y+14	; 0x0e
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	4a ef       	ldi	r20, 0xFA	; 250
    2412:	54 e4       	ldi	r21, 0x44	; 68
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	8f 83       	std	Y+7, r24	; 0x07
    241e:	98 87       	std	Y+8, r25	; 0x08
    2420:	a9 87       	std	Y+9, r26	; 0x09
    2422:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2424:	6f 81       	ldd	r22, Y+7	; 0x07
    2426:	78 85       	ldd	r23, Y+8	; 0x08
    2428:	89 85       	ldd	r24, Y+9	; 0x09
    242a:	9a 85       	ldd	r25, Y+10	; 0x0a
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e8       	ldi	r20, 0x80	; 128
    2432:	5f e3       	ldi	r21, 0x3F	; 63
    2434:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2438:	88 23       	and	r24, r24
    243a:	2c f4       	brge	.+10     	; 0x2446 <KP_GetPressed+0x98>
		__ticks = 1;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	3f c0       	rjmp	.+126    	; 0x24c4 <KP_GetPressed+0x116>
	else if (__tmp > 65535)
    2446:	6f 81       	ldd	r22, Y+7	; 0x07
    2448:	78 85       	ldd	r23, Y+8	; 0x08
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	3f ef       	ldi	r19, 0xFF	; 255
    2452:	4f e7       	ldi	r20, 0x7F	; 127
    2454:	57 e4       	ldi	r21, 0x47	; 71
    2456:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    245a:	18 16       	cp	r1, r24
    245c:	4c f5       	brge	.+82     	; 0x24b0 <KP_GetPressed+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2460:	7c 85       	ldd	r23, Y+12	; 0x0c
    2462:	8d 85       	ldd	r24, Y+13	; 0x0d
    2464:	9e 85       	ldd	r25, Y+14	; 0x0e
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e2       	ldi	r20, 0x20	; 32
    246c:	51 e4       	ldi	r21, 0x41	; 65
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <KP_GetPressed+0xf8>
    2488:	88 ec       	ldi	r24, 0xC8	; 200
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <KP_GetPressed+0xe6>
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	69 f7       	brne	.-38     	; 0x2488 <KP_GetPressed+0xda>
    24ae:	14 c0       	rjmp	.+40     	; 0x24d8 <KP_GetPressed+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	9a 81       	ldd	r25, Y+2	; 0x02
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <KP_GetPressed+0x122>
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		for(LColumnConter = KEYPAD_COLUMNS_1;LColumnConter < KEYPAD_COLUMNS_1 + KEYPAD_COLUMNS;LColumnConter++)
    24d8:	84 e1       	ldi	r24, 0x14	; 20
    24da:	89 8b       	std	Y+17, r24	; 0x11
    24dc:	1f c0       	rjmp	.+62     	; 0x251c <KP_GetPressed+0x16e>
		{
			state = Dio_Read(LColumnConter);
    24de:	89 89       	ldd	r24, Y+17	; 0x11
    24e0:	0e 94 98 0b 	call	0x1730	; 0x1730 <Dio_Read>
    24e4:	88 8b       	std	Y+16, r24	; 0x10
			if(state == HIGH)
    24e6:	88 89       	ldd	r24, Y+16	; 0x10
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	a9 f4       	brne	.+42     	; 0x2516 <KP_GetPressed+0x168>
			{
				Btn = KP_Maparr[LRowConter][LColumnConter - KEYPAD_COLUMNS_1];
    24ec:	8b 89       	ldd	r24, Y+19	; 0x13
    24ee:	48 2f       	mov	r20, r24
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	89 89       	ldd	r24, Y+17	; 0x11
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	9c 01       	movw	r18, r24
    24fa:	24 51       	subi	r18, 0x14	; 20
    24fc:	30 40       	sbci	r19, 0x00	; 0
    24fe:	ca 01       	movw	r24, r20
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	82 0f       	add	r24, r18
    250a:	93 1f       	adc	r25, r19
    250c:	fc 01       	movw	r30, r24
    250e:	e3 51       	subi	r30, 0x13	; 19
    2510:	fe 4f       	sbci	r31, 0xFE	; 254
    2512:	80 81       	ld	r24, Z
    2514:	8f 87       	std	Y+15, r24	; 0x0f
		for(RowConter = KEYPAD_ROW_1 ;RowConter < KEYPAD_ROW_1 + KEYPAD_ROWS ;RowConter++){
			Dio_Write(RowConter, LOW);
		}
		Dio_Write(LRowConter + KEYPAD_ROW_1, HIGH);
		_delay_ms(10);
		for(LColumnConter = KEYPAD_COLUMNS_1;LColumnConter < KEYPAD_COLUMNS_1 + KEYPAD_COLUMNS;LColumnConter++)
    2516:	89 89       	ldd	r24, Y+17	; 0x11
    2518:	8f 5f       	subi	r24, 0xFF	; 255
    251a:	89 8b       	std	Y+17, r24	; 0x11
    251c:	89 89       	ldd	r24, Y+17	; 0x11
    251e:	88 31       	cpi	r24, 0x18	; 24
    2520:	f0 f2       	brcs	.-68     	; 0x24de <KP_GetPressed+0x130>
	uint8 LRowConter=0;
	uint8 RowConter=0;
	uint8 LColumnConter=0;
	Dio_state_t state=LOW;
	uint8 Btn=0;
	for(LRowConter=0;LRowConter<KEYPAD_ROWS ;LRowConter++)
    2522:	8b 89       	ldd	r24, Y+19	; 0x13
    2524:	8f 5f       	subi	r24, 0xFF	; 255
    2526:	8b 8b       	std	Y+19, r24	; 0x13
    2528:	8b 89       	ldd	r24, Y+19	; 0x13
    252a:	84 30       	cpi	r24, 0x04	; 4
    252c:	08 f4       	brcc	.+2      	; 0x2530 <KP_GetPressed+0x182>
    252e:	50 cf       	rjmp	.-352    	; 0x23d0 <KP_GetPressed+0x22>
				Btn = KP_Maparr[LRowConter][LColumnConter - KEYPAD_COLUMNS_1];
			}
		}
	}

	return Btn;
    2530:	8f 85       	ldd	r24, Y+15	; 0x0f

}
    2532:	63 96       	adiw	r28, 0x13	; 19
    2534:	0f b6       	in	r0, 0x3f	; 63
    2536:	f8 94       	cli
    2538:	de bf       	out	0x3e, r29	; 62
    253a:	0f be       	out	0x3f, r0	; 63
    253c:	cd bf       	out	0x3d, r28	; 61
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <main>:
uint8 Reset=1;

uint8 FristNum[4];                       //Array to store the first number (Assuming the number of digits 4)
uint8 SecondNum[4];						 //Array to store the Second number (Assuming the number of digits 4)
int main()
{
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	c2 59       	subi	r28, 0x92	; 146
    2552:	d0 40       	sbci	r29, 0x00	; 0
    2554:	0f b6       	in	r0, 0x3f	; 63
    2556:	f8 94       	cli
    2558:	de bf       	out	0x3e, r29	; 62
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	cd bf       	out	0x3d, r28	; 61
	Dio_init();                          //Initialise pins
    255e:	0e 94 35 09 	call	0x126a	; 0x126a <Dio_init>
	LCD_Init();							 //Initialise LCD
    2562:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <LCD_Init>




	/*   Set Password for First time   */
	LCD_Send_String_Pos("Set password",1,1);
    2566:	80 e6       	ldi	r24, 0x60	; 96
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_Send_String_Pos>
	while(1){
		do{
			KpValue = KP_GetPressed();
    2572:	0e 94 d7 11 	call	0x23ae	; 0x23ae <KP_GetPressed>
    2576:	80 93 eb 01 	sts	0x01EB, r24
		}while(KpValue == '\0');
    257a:	80 91 eb 01 	lds	r24, 0x01EB
    257e:	88 23       	and	r24, r24
    2580:	c1 f3       	breq	.-16     	; 0x2572 <main+0x2e>
		NumberOfDigit++;
    2582:	80 91 05 02 	lds	r24, 0x0205
    2586:	8f 5f       	subi	r24, 0xFF	; 255
    2588:	80 93 05 02 	sts	0x0205, r24
		if(KpValue == '&') break;
    258c:	80 91 eb 01 	lds	r24, 0x01EB
    2590:	86 32       	cpi	r24, 0x26	; 38
    2592:	09 f4       	brne	.+2      	; 0x2596 <main+0x52>
    2594:	d2 c0       	rjmp	.+420    	; 0x273a <main+0x1f6>
		LCD_Send_Number_Pos(KpValue,2,NumberOfDigit);
    2596:	80 91 eb 01 	lds	r24, 0x01EB
    259a:	88 2f       	mov	r24, r24
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	a0 e0       	ldi	r26, 0x00	; 0
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	20 91 05 02 	lds	r18, 0x0205
    25a6:	bc 01       	movw	r22, r24
    25a8:	cd 01       	movw	r24, r26
    25aa:	42 e0       	ldi	r20, 0x02	; 2
    25ac:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_Send_Number_Pos>
    25b0:	fe 01       	movw	r30, r28
    25b2:	e7 57       	subi	r30, 0x77	; 119
    25b4:	ff 4f       	sbci	r31, 0xFF	; 255
    25b6:	80 e0       	ldi	r24, 0x00	; 0
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	a8 e4       	ldi	r26, 0x48	; 72
    25bc:	b3 e4       	ldi	r27, 0x43	; 67
    25be:	80 83       	st	Z, r24
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	a2 83       	std	Z+2, r26	; 0x02
    25c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c6:	8e 01       	movw	r16, r28
    25c8:	0b 57       	subi	r16, 0x7B	; 123
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	fe 01       	movw	r30, r28
    25ce:	e7 57       	subi	r30, 0x77	; 119
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	60 81       	ld	r22, Z
    25d4:	71 81       	ldd	r23, Z+1	; 0x01
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	4a ef       	ldi	r20, 0xFA	; 250
    25e0:	54 e4       	ldi	r21, 0x44	; 68
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	f8 01       	movw	r30, r16
    25ec:	80 83       	st	Z, r24
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	a2 83       	std	Z+2, r26	; 0x02
    25f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25f4:	fe 01       	movw	r30, r28
    25f6:	eb 57       	subi	r30, 0x7B	; 123
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	60 81       	ld	r22, Z
    25fc:	71 81       	ldd	r23, Z+1	; 0x01
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	93 81       	ldd	r25, Z+3	; 0x03
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e8       	ldi	r20, 0x80	; 128
    2608:	5f e3       	ldi	r21, 0x3F	; 63
    260a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260e:	88 23       	and	r24, r24
    2610:	44 f4       	brge	.+16     	; 0x2622 <main+0xde>
		__ticks = 1;
    2612:	fe 01       	movw	r30, r28
    2614:	ed 57       	subi	r30, 0x7D	; 125
    2616:	ff 4f       	sbci	r31, 0xFF	; 255
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	91 83       	std	Z+1, r25	; 0x01
    261e:	80 83       	st	Z, r24
    2620:	64 c0       	rjmp	.+200    	; 0x26ea <main+0x1a6>
	else if (__tmp > 65535)
    2622:	fe 01       	movw	r30, r28
    2624:	eb 57       	subi	r30, 0x7B	; 123
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	0c f0       	brlt	.+2      	; 0x2642 <main+0xfe>
    2640:	43 c0       	rjmp	.+134    	; 0x26c8 <main+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2642:	fe 01       	movw	r30, r28
    2644:	e7 57       	subi	r30, 0x77	; 119
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	60 81       	ld	r22, Z
    264a:	71 81       	ldd	r23, Z+1	; 0x01
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	8e 01       	movw	r16, r28
    2662:	0d 57       	subi	r16, 0x7D	; 125
    2664:	1f 4f       	sbci	r17, 0xFF	; 255
    2666:	bc 01       	movw	r22, r24
    2668:	cd 01       	movw	r24, r26
    266a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	f8 01       	movw	r30, r16
    2674:	91 83       	std	Z+1, r25	; 0x01
    2676:	80 83       	st	Z, r24
    2678:	1f c0       	rjmp	.+62     	; 0x26b8 <main+0x174>
    267a:	fe 01       	movw	r30, r28
    267c:	ef 57       	subi	r30, 0x7F	; 127
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	88 ec       	ldi	r24, 0xC8	; 200
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
    2688:	fe 01       	movw	r30, r28
    268a:	ef 57       	subi	r30, 0x7F	; 127
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	80 81       	ld	r24, Z
    2690:	91 81       	ldd	r25, Z+1	; 0x01
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <main+0x14e>
    2696:	fe 01       	movw	r30, r28
    2698:	ef 57       	subi	r30, 0x7F	; 127
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	91 83       	std	Z+1, r25	; 0x01
    269e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	de 01       	movw	r26, r28
    26a2:	ad 57       	subi	r26, 0x7D	; 125
    26a4:	bf 4f       	sbci	r27, 0xFF	; 255
    26a6:	fe 01       	movw	r30, r28
    26a8:	ed 57       	subi	r30, 0x7D	; 125
    26aa:	ff 4f       	sbci	r31, 0xFF	; 255
    26ac:	80 81       	ld	r24, Z
    26ae:	91 81       	ldd	r25, Z+1	; 0x01
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	11 96       	adiw	r26, 0x01	; 1
    26b4:	9c 93       	st	X, r25
    26b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	fe 01       	movw	r30, r28
    26ba:	ed 57       	subi	r30, 0x7D	; 125
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	d1 f6       	brne	.-76     	; 0x267a <main+0x136>
    26c6:	27 c0       	rjmp	.+78     	; 0x2716 <main+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c8:	8e 01       	movw	r16, r28
    26ca:	0d 57       	subi	r16, 0x7D	; 125
    26cc:	1f 4f       	sbci	r17, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	eb 57       	subi	r30, 0x7B	; 123
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	f8 01       	movw	r30, r16
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
    26ea:	de 01       	movw	r26, r28
    26ec:	a1 58       	subi	r26, 0x81	; 129
    26ee:	bf 4f       	sbci	r27, 0xFF	; 255
    26f0:	fe 01       	movw	r30, r28
    26f2:	ed 57       	subi	r30, 0x7D	; 125
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	8d 93       	st	X+, r24
    26fc:	9c 93       	st	X, r25
    26fe:	fe 01       	movw	r30, r28
    2700:	e1 58       	subi	r30, 0x81	; 129
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <main+0x1c4>
    270c:	fe 01       	movw	r30, r28
    270e:	e1 58       	subi	r30, 0x81	; 129
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
		_delay_ms(200);
		LCD_Send_Char_Pos('*',2,NumberOfDigit);
    2716:	90 91 05 02 	lds	r25, 0x0205
    271a:	8a e2       	ldi	r24, 0x2A	; 42
    271c:	62 e0       	ldi	r22, 0x02	; 2
    271e:	49 2f       	mov	r20, r25
    2720:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_Send_Char_Pos>
		Pasword[NumberOfDigit] =KpValue;
    2724:	80 91 05 02 	lds	r24, 0x0205
    2728:	88 2f       	mov	r24, r24
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	20 91 eb 01 	lds	r18, 0x01EB
    2730:	fc 01       	movw	r30, r24
    2732:	ea 5e       	subi	r30, 0xEA	; 234
    2734:	fd 4f       	sbci	r31, 0xFD	; 253
    2736:	20 83       	st	Z, r18
    2738:	1c cf       	rjmp	.-456    	; 0x2572 <main+0x2e>

	while(1)
	{

		/*    Get Password To Check It    */
		LCD_Send_Command(_LCD_CLEAR);
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
    2740:	fe 01       	movw	r30, r28
    2742:	e5 58       	subi	r30, 0x85	; 133
    2744:	ff 4f       	sbci	r31, 0xFF	; 255
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	a8 ec       	ldi	r26, 0xC8	; 200
    274c:	b2 e4       	ldi	r27, 0x42	; 66
    274e:	80 83       	st	Z, r24
    2750:	91 83       	std	Z+1, r25	; 0x01
    2752:	a2 83       	std	Z+2, r26	; 0x02
    2754:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2756:	8e 01       	movw	r16, r28
    2758:	09 58       	subi	r16, 0x89	; 137
    275a:	1f 4f       	sbci	r17, 0xFF	; 255
    275c:	fe 01       	movw	r30, r28
    275e:	e5 58       	subi	r30, 0x85	; 133
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	4a ef       	ldi	r20, 0xFA	; 250
    2770:	54 e4       	ldi	r21, 0x44	; 68
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	f8 01       	movw	r30, r16
    277c:	80 83       	st	Z, r24
    277e:	91 83       	std	Z+1, r25	; 0x01
    2780:	a2 83       	std	Z+2, r26	; 0x02
    2782:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2784:	fe 01       	movw	r30, r28
    2786:	e9 58       	subi	r30, 0x89	; 137
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	60 81       	ld	r22, Z
    278c:	71 81       	ldd	r23, Z+1	; 0x01
    278e:	82 81       	ldd	r24, Z+2	; 0x02
    2790:	93 81       	ldd	r25, Z+3	; 0x03
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e8       	ldi	r20, 0x80	; 128
    2798:	5f e3       	ldi	r21, 0x3F	; 63
    279a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    279e:	88 23       	and	r24, r24
    27a0:	44 f4       	brge	.+16     	; 0x27b2 <main+0x26e>
		__ticks = 1;
    27a2:	fe 01       	movw	r30, r28
    27a4:	eb 58       	subi	r30, 0x8B	; 139
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	91 83       	std	Z+1, r25	; 0x01
    27ae:	80 83       	st	Z, r24
    27b0:	64 c0       	rjmp	.+200    	; 0x287a <main+0x336>
	else if (__tmp > 65535)
    27b2:	fe 01       	movw	r30, r28
    27b4:	e9 58       	subi	r30, 0x89	; 137
    27b6:	ff 4f       	sbci	r31, 0xFF	; 255
    27b8:	60 81       	ld	r22, Z
    27ba:	71 81       	ldd	r23, Z+1	; 0x01
    27bc:	82 81       	ldd	r24, Z+2	; 0x02
    27be:	93 81       	ldd	r25, Z+3	; 0x03
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	3f ef       	ldi	r19, 0xFF	; 255
    27c4:	4f e7       	ldi	r20, 0x7F	; 127
    27c6:	57 e4       	ldi	r21, 0x47	; 71
    27c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27cc:	18 16       	cp	r1, r24
    27ce:	0c f0       	brlt	.+2      	; 0x27d2 <main+0x28e>
    27d0:	43 c0       	rjmp	.+134    	; 0x2858 <main+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d2:	fe 01       	movw	r30, r28
    27d4:	e5 58       	subi	r30, 0x85	; 133
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	60 81       	ld	r22, Z
    27da:	71 81       	ldd	r23, Z+1	; 0x01
    27dc:	82 81       	ldd	r24, Z+2	; 0x02
    27de:	93 81       	ldd	r25, Z+3	; 0x03
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e2       	ldi	r20, 0x20	; 32
    27e6:	51 e4       	ldi	r21, 0x41	; 65
    27e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	8e 01       	movw	r16, r28
    27f2:	0b 58       	subi	r16, 0x8B	; 139
    27f4:	1f 4f       	sbci	r17, 0xFF	; 255
    27f6:	bc 01       	movw	r22, r24
    27f8:	cd 01       	movw	r24, r26
    27fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	f8 01       	movw	r30, r16
    2804:	91 83       	std	Z+1, r25	; 0x01
    2806:	80 83       	st	Z, r24
    2808:	1f c0       	rjmp	.+62     	; 0x2848 <main+0x304>
    280a:	fe 01       	movw	r30, r28
    280c:	ed 58       	subi	r30, 0x8D	; 141
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	88 ec       	ldi	r24, 0xC8	; 200
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	80 83       	st	Z, r24
    2818:	fe 01       	movw	r30, r28
    281a:	ed 58       	subi	r30, 0x8D	; 141
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 81       	ld	r24, Z
    2820:	91 81       	ldd	r25, Z+1	; 0x01
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <main+0x2de>
    2826:	fe 01       	movw	r30, r28
    2828:	ed 58       	subi	r30, 0x8D	; 141
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2830:	de 01       	movw	r26, r28
    2832:	ab 58       	subi	r26, 0x8B	; 139
    2834:	bf 4f       	sbci	r27, 0xFF	; 255
    2836:	fe 01       	movw	r30, r28
    2838:	eb 58       	subi	r30, 0x8B	; 139
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	80 81       	ld	r24, Z
    283e:	91 81       	ldd	r25, Z+1	; 0x01
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	11 96       	adiw	r26, 0x01	; 1
    2844:	9c 93       	st	X, r25
    2846:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2848:	fe 01       	movw	r30, r28
    284a:	eb 58       	subi	r30, 0x8B	; 139
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	00 97       	sbiw	r24, 0x00	; 0
    2854:	d1 f6       	brne	.-76     	; 0x280a <main+0x2c6>
    2856:	27 c0       	rjmp	.+78     	; 0x28a6 <main+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2858:	8e 01       	movw	r16, r28
    285a:	0b 58       	subi	r16, 0x8B	; 139
    285c:	1f 4f       	sbci	r17, 0xFF	; 255
    285e:	fe 01       	movw	r30, r28
    2860:	e9 58       	subi	r30, 0x89	; 137
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	60 81       	ld	r22, Z
    2866:	71 81       	ldd	r23, Z+1	; 0x01
    2868:	82 81       	ldd	r24, Z+2	; 0x02
    286a:	93 81       	ldd	r25, Z+3	; 0x03
    286c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	f8 01       	movw	r30, r16
    2876:	91 83       	std	Z+1, r25	; 0x01
    2878:	80 83       	st	Z, r24
    287a:	de 01       	movw	r26, r28
    287c:	af 58       	subi	r26, 0x8F	; 143
    287e:	bf 4f       	sbci	r27, 0xFF	; 255
    2880:	fe 01       	movw	r30, r28
    2882:	eb 58       	subi	r30, 0x8B	; 139
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	80 81       	ld	r24, Z
    2888:	91 81       	ldd	r25, Z+1	; 0x01
    288a:	8d 93       	st	X+, r24
    288c:	9c 93       	st	X, r25
    288e:	fe 01       	movw	r30, r28
    2890:	ef 58       	subi	r30, 0x8F	; 143
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	80 81       	ld	r24, Z
    2896:	91 81       	ldd	r25, Z+1	; 0x01
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <main+0x354>
    289c:	fe 01       	movw	r30, r28
    289e:	ef 58       	subi	r30, 0x8F	; 143
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	91 83       	std	Z+1, r25	; 0x01
    28a4:	80 83       	st	Z, r24
		_delay_ms(100);
		LCD_Send_String_Pos("check password",1,1);
    28a6:	8d e6       	ldi	r24, 0x6D	; 109
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	61 e0       	ldi	r22, 0x01	; 1
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_Send_String_Pos>
		KpValue='\0';
    28b2:	10 92 eb 01 	sts	0x01EB, r1
		counter=0;
    28b6:	10 92 04 02 	sts	0x0204, r1
    28ba:	e3 c0       	rjmp	.+454    	; 0x2a82 <main+0x53e>
		while(KpValue != '&'){

			do{
				KpValue = KP_GetPressed();
    28bc:	0e 94 d7 11 	call	0x23ae	; 0x23ae <KP_GetPressed>
    28c0:	80 93 eb 01 	sts	0x01EB, r24
			}while(KpValue == '\0');
    28c4:	80 91 eb 01 	lds	r24, 0x01EB
    28c8:	88 23       	and	r24, r24
    28ca:	c1 f3       	breq	.-16     	; 0x28bc <main+0x378>
			counter++;
    28cc:	80 91 04 02 	lds	r24, 0x0204
    28d0:	8f 5f       	subi	r24, 0xFF	; 255
    28d2:	80 93 04 02 	sts	0x0204, r24
			if(KpValue == '&') break;
    28d6:	80 91 eb 01 	lds	r24, 0x01EB
    28da:	86 32       	cpi	r24, 0x26	; 38
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <main+0x39c>
    28de:	d6 c0       	rjmp	.+428    	; 0x2a8c <main+0x548>
			LCD_Send_Number_Pos(KpValue,2,counter);
    28e0:	80 91 eb 01 	lds	r24, 0x01EB
    28e4:	88 2f       	mov	r24, r24
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	a0 e0       	ldi	r26, 0x00	; 0
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	20 91 04 02 	lds	r18, 0x0204
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	42 e0       	ldi	r20, 0x02	; 2
    28f6:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_Send_Number_Pos>
    28fa:	fe 01       	movw	r30, r28
    28fc:	e3 59       	subi	r30, 0x93	; 147
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	a8 e4       	ldi	r26, 0x48	; 72
    2906:	b3 e4       	ldi	r27, 0x43	; 67
    2908:	80 83       	st	Z, r24
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	a2 83       	std	Z+2, r26	; 0x02
    290e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2910:	8e 01       	movw	r16, r28
    2912:	07 59       	subi	r16, 0x97	; 151
    2914:	1f 4f       	sbci	r17, 0xFF	; 255
    2916:	fe 01       	movw	r30, r28
    2918:	e3 59       	subi	r30, 0x93	; 147
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	60 81       	ld	r22, Z
    291e:	71 81       	ldd	r23, Z+1	; 0x01
    2920:	82 81       	ldd	r24, Z+2	; 0x02
    2922:	93 81       	ldd	r25, Z+3	; 0x03
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4a ef       	ldi	r20, 0xFA	; 250
    292a:	54 e4       	ldi	r21, 0x44	; 68
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	f8 01       	movw	r30, r16
    2936:	80 83       	st	Z, r24
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	a2 83       	std	Z+2, r26	; 0x02
    293c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    293e:	fe 01       	movw	r30, r28
    2940:	e7 59       	subi	r30, 0x97	; 151
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	60 81       	ld	r22, Z
    2946:	71 81       	ldd	r23, Z+1	; 0x01
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	93 81       	ldd	r25, Z+3	; 0x03
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e8       	ldi	r20, 0x80	; 128
    2952:	5f e3       	ldi	r21, 0x3F	; 63
    2954:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2958:	88 23       	and	r24, r24
    295a:	44 f4       	brge	.+16     	; 0x296c <main+0x428>
		__ticks = 1;
    295c:	fe 01       	movw	r30, r28
    295e:	e9 59       	subi	r30, 0x99	; 153
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	80 83       	st	Z, r24
    296a:	64 c0       	rjmp	.+200    	; 0x2a34 <main+0x4f0>
	else if (__tmp > 65535)
    296c:	fe 01       	movw	r30, r28
    296e:	e7 59       	subi	r30, 0x97	; 151
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	60 81       	ld	r22, Z
    2974:	71 81       	ldd	r23, Z+1	; 0x01
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	93 81       	ldd	r25, Z+3	; 0x03
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	3f ef       	ldi	r19, 0xFF	; 255
    297e:	4f e7       	ldi	r20, 0x7F	; 127
    2980:	57 e4       	ldi	r21, 0x47	; 71
    2982:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2986:	18 16       	cp	r1, r24
    2988:	0c f0       	brlt	.+2      	; 0x298c <main+0x448>
    298a:	43 c0       	rjmp	.+134    	; 0x2a12 <main+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298c:	fe 01       	movw	r30, r28
    298e:	e3 59       	subi	r30, 0x93	; 147
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	82 81       	ldd	r24, Z+2	; 0x02
    2998:	93 81       	ldd	r25, Z+3	; 0x03
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e2       	ldi	r20, 0x20	; 32
    29a0:	51 e4       	ldi	r21, 0x41	; 65
    29a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	8e 01       	movw	r16, r28
    29ac:	09 59       	subi	r16, 0x99	; 153
    29ae:	1f 4f       	sbci	r17, 0xFF	; 255
    29b0:	bc 01       	movw	r22, r24
    29b2:	cd 01       	movw	r24, r26
    29b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b8:	dc 01       	movw	r26, r24
    29ba:	cb 01       	movw	r24, r22
    29bc:	f8 01       	movw	r30, r16
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
    29c2:	1f c0       	rjmp	.+62     	; 0x2a02 <main+0x4be>
    29c4:	fe 01       	movw	r30, r28
    29c6:	eb 59       	subi	r30, 0x9B	; 155
    29c8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ca:	88 ec       	ldi	r24, 0xC8	; 200
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	91 83       	std	Z+1, r25	; 0x01
    29d0:	80 83       	st	Z, r24
    29d2:	fe 01       	movw	r30, r28
    29d4:	eb 59       	subi	r30, 0x9B	; 155
    29d6:	ff 4f       	sbci	r31, 0xFF	; 255
    29d8:	80 81       	ld	r24, Z
    29da:	91 81       	ldd	r25, Z+1	; 0x01
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <main+0x498>
    29e0:	fe 01       	movw	r30, r28
    29e2:	eb 59       	subi	r30, 0x9B	; 155
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	91 83       	std	Z+1, r25	; 0x01
    29e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ea:	de 01       	movw	r26, r28
    29ec:	a9 59       	subi	r26, 0x99	; 153
    29ee:	bf 4f       	sbci	r27, 0xFF	; 255
    29f0:	fe 01       	movw	r30, r28
    29f2:	e9 59       	subi	r30, 0x99	; 153
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	80 81       	ld	r24, Z
    29f8:	91 81       	ldd	r25, Z+1	; 0x01
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	11 96       	adiw	r26, 0x01	; 1
    29fe:	9c 93       	st	X, r25
    2a00:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a02:	fe 01       	movw	r30, r28
    2a04:	e9 59       	subi	r30, 0x99	; 153
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	00 97       	sbiw	r24, 0x00	; 0
    2a0e:	d1 f6       	brne	.-76     	; 0x29c4 <main+0x480>
    2a10:	27 c0       	rjmp	.+78     	; 0x2a60 <main+0x51c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a12:	8e 01       	movw	r16, r28
    2a14:	09 59       	subi	r16, 0x99	; 153
    2a16:	1f 4f       	sbci	r17, 0xFF	; 255
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e7 59       	subi	r30, 0x97	; 151
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	60 81       	ld	r22, Z
    2a20:	71 81       	ldd	r23, Z+1	; 0x01
    2a22:	82 81       	ldd	r24, Z+2	; 0x02
    2a24:	93 81       	ldd	r25, Z+3	; 0x03
    2a26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	f8 01       	movw	r30, r16
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	80 83       	st	Z, r24
    2a34:	de 01       	movw	r26, r28
    2a36:	ad 59       	subi	r26, 0x9D	; 157
    2a38:	bf 4f       	sbci	r27, 0xFF	; 255
    2a3a:	fe 01       	movw	r30, r28
    2a3c:	e9 59       	subi	r30, 0x99	; 153
    2a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a40:	80 81       	ld	r24, Z
    2a42:	91 81       	ldd	r25, Z+1	; 0x01
    2a44:	8d 93       	st	X+, r24
    2a46:	9c 93       	st	X, r25
    2a48:	fe 01       	movw	r30, r28
    2a4a:	ed 59       	subi	r30, 0x9D	; 157
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	80 81       	ld	r24, Z
    2a50:	91 81       	ldd	r25, Z+1	; 0x01
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <main+0x50e>
    2a56:	fe 01       	movw	r30, r28
    2a58:	ed 59       	subi	r30, 0x9D	; 157
    2a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5c:	91 83       	std	Z+1, r25	; 0x01
    2a5e:	80 83       	st	Z, r24
			_delay_ms(200);
			LCD_Send_Char_Pos('*',2,counter);
    2a60:	90 91 04 02 	lds	r25, 0x0204
    2a64:	8a e2       	ldi	r24, 0x2A	; 42
    2a66:	62 e0       	ldi	r22, 0x02	; 2
    2a68:	49 2f       	mov	r20, r25
    2a6a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_Send_Char_Pos>
			CheckPasword[counter] =KpValue;
    2a6e:	80 91 04 02 	lds	r24, 0x0204
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	20 91 eb 01 	lds	r18, 0x01EB
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	ea 5f       	subi	r30, 0xFA	; 250
    2a7e:	fd 4f       	sbci	r31, 0xFD	; 253
    2a80:	20 83       	st	Z, r18
		LCD_Send_Command(_LCD_CLEAR);
		_delay_ms(100);
		LCD_Send_String_Pos("check password",1,1);
		KpValue='\0';
		counter=0;
		while(KpValue != '&'){
    2a82:	80 91 eb 01 	lds	r24, 0x01EB
    2a86:	86 32       	cpi	r24, 0x26	; 38
    2a88:	09 f0       	breq	.+2      	; 0x2a8c <main+0x548>
    2a8a:	18 cf       	rjmp	.-464    	; 0x28bc <main+0x378>
		}



		/*   Check if Password is correct or not  */
		if(Cheack_Password(CheckPasword,Pasword,NumberOfDigit))
    2a8c:	40 91 05 02 	lds	r20, 0x0205
    2a90:	86 e0       	ldi	r24, 0x06	; 6
    2a92:	92 e0       	ldi	r25, 0x02	; 2
    2a94:	26 e1       	ldi	r18, 0x16	; 22
    2a96:	32 e0       	ldi	r19, 0x02	; 2
    2a98:	b9 01       	movw	r22, r18
    2a9a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <Cheack_Password>
    2a9e:	88 23       	and	r24, r24
    2aa0:	09 f4       	brne	.+2      	; 0x2aa4 <main+0x560>
    2aa2:	cb c4       	rjmp	.+2454   	; 0x343a <main+0xef6>
		{

			/*   Loading to Start Calculator    */
			LCD_Send_Command(_LCD_CLEAR);
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
			LCD_Send_String_Pos("Loading",1,1);
    2aaa:	8c e7       	ldi	r24, 0x7C	; 124
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	61 e0       	ldi	r22, 0x01	; 1
    2ab0:	41 e0       	ldi	r20, 0x01	; 1
    2ab2:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_Send_String_Pos>
			for(uint8 counter=0;counter<4;counter++)
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e0 57       	subi	r30, 0x70	; 112
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	10 82       	st	Z, r1
    2abe:	c7 c0       	rjmp	.+398    	; 0x2c4e <main+0x70a>
			{
				LCD_Send_Char_Pos('.',1,counter+8);
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e0 57       	subi	r30, 0x70	; 112
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	98 2f       	mov	r25, r24
    2aca:	98 5f       	subi	r25, 0xF8	; 248
    2acc:	8e e2       	ldi	r24, 0x2E	; 46
    2ace:	61 e0       	ldi	r22, 0x01	; 1
    2ad0:	49 2f       	mov	r20, r25
    2ad2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_Send_Char_Pos>
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e1 5a       	subi	r30, 0xA1	; 161
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	aa ef       	ldi	r26, 0xFA	; 250
    2ae2:	b3 e4       	ldi	r27, 0x43	; 67
    2ae4:	80 83       	st	Z, r24
    2ae6:	91 83       	std	Z+1, r25	; 0x01
    2ae8:	a2 83       	std	Z+2, r26	; 0x02
    2aea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aec:	8e 01       	movw	r16, r28
    2aee:	05 5a       	subi	r16, 0xA5	; 165
    2af0:	1f 4f       	sbci	r17, 0xFF	; 255
    2af2:	fe 01       	movw	r30, r28
    2af4:	e1 5a       	subi	r30, 0xA1	; 161
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	60 81       	ld	r22, Z
    2afa:	71 81       	ldd	r23, Z+1	; 0x01
    2afc:	82 81       	ldd	r24, Z+2	; 0x02
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	20 e0       	ldi	r18, 0x00	; 0
    2b02:	30 e0       	ldi	r19, 0x00	; 0
    2b04:	4a ef       	ldi	r20, 0xFA	; 250
    2b06:	54 e4       	ldi	r21, 0x44	; 68
    2b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	f8 01       	movw	r30, r16
    2b12:	80 83       	st	Z, r24
    2b14:	91 83       	std	Z+1, r25	; 0x01
    2b16:	a2 83       	std	Z+2, r26	; 0x02
    2b18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e5 5a       	subi	r30, 0xA5	; 165
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	60 81       	ld	r22, Z
    2b22:	71 81       	ldd	r23, Z+1	; 0x01
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	93 81       	ldd	r25, Z+3	; 0x03
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e8       	ldi	r20, 0x80	; 128
    2b2e:	5f e3       	ldi	r21, 0x3F	; 63
    2b30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b34:	88 23       	and	r24, r24
    2b36:	44 f4       	brge	.+16     	; 0x2b48 <main+0x604>
		__ticks = 1;
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e7 5a       	subi	r30, 0xA7	; 167
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	91 83       	std	Z+1, r25	; 0x01
    2b44:	80 83       	st	Z, r24
    2b46:	64 c0       	rjmp	.+200    	; 0x2c10 <main+0x6cc>
	else if (__tmp > 65535)
    2b48:	fe 01       	movw	r30, r28
    2b4a:	e5 5a       	subi	r30, 0xA5	; 165
    2b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4e:	60 81       	ld	r22, Z
    2b50:	71 81       	ldd	r23, Z+1	; 0x01
    2b52:	82 81       	ldd	r24, Z+2	; 0x02
    2b54:	93 81       	ldd	r25, Z+3	; 0x03
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	3f ef       	ldi	r19, 0xFF	; 255
    2b5a:	4f e7       	ldi	r20, 0x7F	; 127
    2b5c:	57 e4       	ldi	r21, 0x47	; 71
    2b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b62:	18 16       	cp	r1, r24
    2b64:	0c f0       	brlt	.+2      	; 0x2b68 <main+0x624>
    2b66:	43 c0       	rjmp	.+134    	; 0x2bee <main+0x6aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e1 5a       	subi	r30, 0xA1	; 161
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	60 81       	ld	r22, Z
    2b70:	71 81       	ldd	r23, Z+1	; 0x01
    2b72:	82 81       	ldd	r24, Z+2	; 0x02
    2b74:	93 81       	ldd	r25, Z+3	; 0x03
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e2       	ldi	r20, 0x20	; 32
    2b7c:	51 e4       	ldi	r21, 0x41	; 65
    2b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	8e 01       	movw	r16, r28
    2b88:	07 5a       	subi	r16, 0xA7	; 167
    2b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8c:	bc 01       	movw	r22, r24
    2b8e:	cd 01       	movw	r24, r26
    2b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	f8 01       	movw	r30, r16
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	80 83       	st	Z, r24
    2b9e:	1f c0       	rjmp	.+62     	; 0x2bde <main+0x69a>
    2ba0:	fe 01       	movw	r30, r28
    2ba2:	e9 5a       	subi	r30, 0xA9	; 169
    2ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba6:	88 ec       	ldi	r24, 0xC8	; 200
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	80 83       	st	Z, r24
    2bae:	fe 01       	movw	r30, r28
    2bb0:	e9 5a       	subi	r30, 0xA9	; 169
    2bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb4:	80 81       	ld	r24, Z
    2bb6:	91 81       	ldd	r25, Z+1	; 0x01
    2bb8:	01 97       	sbiw	r24, 0x01	; 1
    2bba:	f1 f7       	brne	.-4      	; 0x2bb8 <main+0x674>
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e9 5a       	subi	r30, 0xA9	; 169
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc6:	de 01       	movw	r26, r28
    2bc8:	a7 5a       	subi	r26, 0xA7	; 167
    2bca:	bf 4f       	sbci	r27, 0xFF	; 255
    2bcc:	fe 01       	movw	r30, r28
    2bce:	e7 5a       	subi	r30, 0xA7	; 167
    2bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd2:	80 81       	ld	r24, Z
    2bd4:	91 81       	ldd	r25, Z+1	; 0x01
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	11 96       	adiw	r26, 0x01	; 1
    2bda:	9c 93       	st	X, r25
    2bdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bde:	fe 01       	movw	r30, r28
    2be0:	e7 5a       	subi	r30, 0xA7	; 167
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	80 81       	ld	r24, Z
    2be6:	91 81       	ldd	r25, Z+1	; 0x01
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	d1 f6       	brne	.-76     	; 0x2ba0 <main+0x65c>
    2bec:	27 c0       	rjmp	.+78     	; 0x2c3c <main+0x6f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bee:	8e 01       	movw	r16, r28
    2bf0:	07 5a       	subi	r16, 0xA7	; 167
    2bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e5 5a       	subi	r30, 0xA5	; 165
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	60 81       	ld	r22, Z
    2bfc:	71 81       	ldd	r23, Z+1	; 0x01
    2bfe:	82 81       	ldd	r24, Z+2	; 0x02
    2c00:	93 81       	ldd	r25, Z+3	; 0x03
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	80 83       	st	Z, r24
    2c10:	de 01       	movw	r26, r28
    2c12:	ab 5a       	subi	r26, 0xAB	; 171
    2c14:	bf 4f       	sbci	r27, 0xFF	; 255
    2c16:	fe 01       	movw	r30, r28
    2c18:	e7 5a       	subi	r30, 0xA7	; 167
    2c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1c:	80 81       	ld	r24, Z
    2c1e:	91 81       	ldd	r25, Z+1	; 0x01
    2c20:	8d 93       	st	X+, r24
    2c22:	9c 93       	st	X, r25
    2c24:	fe 01       	movw	r30, r28
    2c26:	eb 5a       	subi	r30, 0xAB	; 171
    2c28:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2a:	80 81       	ld	r24, Z
    2c2c:	91 81       	ldd	r25, Z+1	; 0x01
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <main+0x6ea>
    2c32:	fe 01       	movw	r30, r28
    2c34:	eb 5a       	subi	r30, 0xAB	; 171
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	91 83       	std	Z+1, r25	; 0x01
    2c3a:	80 83       	st	Z, r24
		{

			/*   Loading to Start Calculator    */
			LCD_Send_Command(_LCD_CLEAR);
			LCD_Send_String_Pos("Loading",1,1);
			for(uint8 counter=0;counter<4;counter++)
    2c3c:	de 01       	movw	r26, r28
    2c3e:	a0 57       	subi	r26, 0x70	; 112
    2c40:	bf 4f       	sbci	r27, 0xFF	; 255
    2c42:	fe 01       	movw	r30, r28
    2c44:	e0 57       	subi	r30, 0x70	; 112
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 81       	ld	r24, Z
    2c4a:	8f 5f       	subi	r24, 0xFF	; 255
    2c4c:	8c 93       	st	X, r24
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e0 57       	subi	r30, 0x70	; 112
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	80 81       	ld	r24, Z
    2c56:	84 30       	cpi	r24, 0x04	; 4
    2c58:	08 f4       	brcc	.+2      	; 0x2c5c <main+0x718>
    2c5a:	32 cf       	rjmp	.-412    	; 0x2ac0 <main+0x57c>
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	ef 5a       	subi	r30, 0xAF	; 175
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	a8 e4       	ldi	r26, 0x48	; 72
    2c68:	b3 e4       	ldi	r27, 0x43	; 67
    2c6a:	80 83       	st	Z, r24
    2c6c:	91 83       	std	Z+1, r25	; 0x01
    2c6e:	a2 83       	std	Z+2, r26	; 0x02
    2c70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c72:	8e 01       	movw	r16, r28
    2c74:	03 5b       	subi	r16, 0xB3	; 179
    2c76:	1f 4f       	sbci	r17, 0xFF	; 255
    2c78:	fe 01       	movw	r30, r28
    2c7a:	ef 5a       	subi	r30, 0xAF	; 175
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	4a ef       	ldi	r20, 0xFA	; 250
    2c8c:	54 e4       	ldi	r21, 0x44	; 68
    2c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	f8 01       	movw	r30, r16
    2c98:	80 83       	st	Z, r24
    2c9a:	91 83       	std	Z+1, r25	; 0x01
    2c9c:	a2 83       	std	Z+2, r26	; 0x02
    2c9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	e3 5b       	subi	r30, 0xB3	; 179
    2ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca6:	60 81       	ld	r22, Z
    2ca8:	71 81       	ldd	r23, Z+1	; 0x01
    2caa:	82 81       	ldd	r24, Z+2	; 0x02
    2cac:	93 81       	ldd	r25, Z+3	; 0x03
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e8       	ldi	r20, 0x80	; 128
    2cb4:	5f e3       	ldi	r21, 0x3F	; 63
    2cb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cba:	88 23       	and	r24, r24
    2cbc:	44 f4       	brge	.+16     	; 0x2cce <main+0x78a>
		__ticks = 1;
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e5 5b       	subi	r30, 0xB5	; 181
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	80 83       	st	Z, r24
    2ccc:	64 c0       	rjmp	.+200    	; 0x2d96 <main+0x852>
	else if (__tmp > 65535)
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e3 5b       	subi	r30, 0xB3	; 179
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	60 81       	ld	r22, Z
    2cd6:	71 81       	ldd	r23, Z+1	; 0x01
    2cd8:	82 81       	ldd	r24, Z+2	; 0x02
    2cda:	93 81       	ldd	r25, Z+3	; 0x03
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	3f ef       	ldi	r19, 0xFF	; 255
    2ce0:	4f e7       	ldi	r20, 0x7F	; 127
    2ce2:	57 e4       	ldi	r21, 0x47	; 71
    2ce4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce8:	18 16       	cp	r1, r24
    2cea:	0c f0       	brlt	.+2      	; 0x2cee <main+0x7aa>
    2cec:	43 c0       	rjmp	.+134    	; 0x2d74 <main+0x830>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cee:	fe 01       	movw	r30, r28
    2cf0:	ef 5a       	subi	r30, 0xAF	; 175
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	60 81       	ld	r22, Z
    2cf6:	71 81       	ldd	r23, Z+1	; 0x01
    2cf8:	82 81       	ldd	r24, Z+2	; 0x02
    2cfa:	93 81       	ldd	r25, Z+3	; 0x03
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e2       	ldi	r20, 0x20	; 32
    2d02:	51 e4       	ldi	r21, 0x41	; 65
    2d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	8e 01       	movw	r16, r28
    2d0e:	05 5b       	subi	r16, 0xB5	; 181
    2d10:	1f 4f       	sbci	r17, 0xFF	; 255
    2d12:	bc 01       	movw	r22, r24
    2d14:	cd 01       	movw	r24, r26
    2d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	f8 01       	movw	r30, r16
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	80 83       	st	Z, r24
    2d24:	1f c0       	rjmp	.+62     	; 0x2d64 <main+0x820>
    2d26:	fe 01       	movw	r30, r28
    2d28:	e7 5b       	subi	r30, 0xB7	; 183
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	88 ec       	ldi	r24, 0xC8	; 200
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	80 83       	st	Z, r24
    2d34:	fe 01       	movw	r30, r28
    2d36:	e7 5b       	subi	r30, 0xB7	; 183
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <main+0x7fa>
    2d42:	fe 01       	movw	r30, r28
    2d44:	e7 5b       	subi	r30, 0xB7	; 183
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	91 83       	std	Z+1, r25	; 0x01
    2d4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4c:	de 01       	movw	r26, r28
    2d4e:	a5 5b       	subi	r26, 0xB5	; 181
    2d50:	bf 4f       	sbci	r27, 0xFF	; 255
    2d52:	fe 01       	movw	r30, r28
    2d54:	e5 5b       	subi	r30, 0xB5	; 181
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	11 96       	adiw	r26, 0x01	; 1
    2d60:	9c 93       	st	X, r25
    2d62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d64:	fe 01       	movw	r30, r28
    2d66:	e5 5b       	subi	r30, 0xB5	; 181
    2d68:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6a:	80 81       	ld	r24, Z
    2d6c:	91 81       	ldd	r25, Z+1	; 0x01
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	d1 f6       	brne	.-76     	; 0x2d26 <main+0x7e2>
    2d72:	27 c0       	rjmp	.+78     	; 0x2dc2 <main+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d74:	8e 01       	movw	r16, r28
    2d76:	05 5b       	subi	r16, 0xB5	; 181
    2d78:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e3 5b       	subi	r30, 0xB3	; 179
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	60 81       	ld	r22, Z
    2d82:	71 81       	ldd	r23, Z+1	; 0x01
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	f8 01       	movw	r30, r16
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	80 83       	st	Z, r24
    2d96:	de 01       	movw	r26, r28
    2d98:	a9 5b       	subi	r26, 0xB9	; 185
    2d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e5 5b       	subi	r30, 0xB5	; 181
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	8d 93       	st	X+, r24
    2da8:	9c 93       	st	X, r25
    2daa:	fe 01       	movw	r30, r28
    2dac:	e9 5b       	subi	r30, 0xB9	; 185
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	80 81       	ld	r24, Z
    2db2:	91 81       	ldd	r25, Z+1	; 0x01
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	f1 f7       	brne	.-4      	; 0x2db4 <main+0x870>
    2db8:	fe 01       	movw	r30, r28
    2dba:	e9 5b       	subi	r30, 0xB9	; 185
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	80 83       	st	Z, r24
			{
				LCD_Send_Char_Pos('.',1,counter+8);
				_delay_ms(500);
			}
			_delay_ms(200);
			LCD_Send_Command(_LCD_CLEAR);
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
			LCD_Send_String_Pos("Welecome",1,1);
    2dc8:	84 e8       	ldi	r24, 0x84	; 132
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	61 e0       	ldi	r22, 0x01	; 1
    2dce:	41 e0       	ldi	r20, 0x01	; 1
    2dd0:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_Send_String_Pos>


			Reset=1;
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	80 93 ec 01 	sts	0x01EC, r24
			/*    loop for repeating the calculation    */
			while(1){
				LCD_Send_String_Pos("calc is ready",2,1);
    2dda:	8d e8       	ldi	r24, 0x8D	; 141
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	62 e0       	ldi	r22, 0x02	; 2
    2de0:	41 e0       	ldi	r20, 0x01	; 1
    2de2:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_Send_String_Pos>
    2de6:	fe 01       	movw	r30, r28
    2de8:	ed 5b       	subi	r30, 0xBD	; 189
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 e0       	ldi	r24, 0x00	; 0
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	aa e7       	ldi	r26, 0x7A	; 122
    2df2:	b4 e4       	ldi	r27, 0x44	; 68
    2df4:	80 83       	st	Z, r24
    2df6:	91 83       	std	Z+1, r25	; 0x01
    2df8:	a2 83       	std	Z+2, r26	; 0x02
    2dfa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dfc:	8e 01       	movw	r16, r28
    2dfe:	01 5c       	subi	r16, 0xC1	; 193
    2e00:	1f 4f       	sbci	r17, 0xFF	; 255
    2e02:	fe 01       	movw	r30, r28
    2e04:	ed 5b       	subi	r30, 0xBD	; 189
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	60 81       	ld	r22, Z
    2e0a:	71 81       	ldd	r23, Z+1	; 0x01
    2e0c:	82 81       	ldd	r24, Z+2	; 0x02
    2e0e:	93 81       	ldd	r25, Z+3	; 0x03
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	4a ef       	ldi	r20, 0xFA	; 250
    2e16:	54 e4       	ldi	r21, 0x44	; 68
    2e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	f8 01       	movw	r30, r16
    2e22:	80 83       	st	Z, r24
    2e24:	91 83       	std	Z+1, r25	; 0x01
    2e26:	a2 83       	std	Z+2, r26	; 0x02
    2e28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	ff 96       	adiw	r30, 0x3f	; 63
    2e2e:	60 81       	ld	r22, Z
    2e30:	71 81       	ldd	r23, Z+1	; 0x01
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	93 81       	ldd	r25, Z+3	; 0x03
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	40 e8       	ldi	r20, 0x80	; 128
    2e3c:	5f e3       	ldi	r21, 0x3F	; 63
    2e3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e42:	88 23       	and	r24, r24
    2e44:	2c f4       	brge	.+10     	; 0x2e50 <main+0x90c>
		__ticks = 1;
    2e46:	81 e0       	ldi	r24, 0x01	; 1
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	9e af       	std	Y+62, r25	; 0x3e
    2e4c:	8d af       	std	Y+61, r24	; 0x3d
    2e4e:	46 c0       	rjmp	.+140    	; 0x2edc <main+0x998>
	else if (__tmp > 65535)
    2e50:	fe 01       	movw	r30, r28
    2e52:	ff 96       	adiw	r30, 0x3f	; 63
    2e54:	60 81       	ld	r22, Z
    2e56:	71 81       	ldd	r23, Z+1	; 0x01
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	3f ef       	ldi	r19, 0xFF	; 255
    2e60:	4f e7       	ldi	r20, 0x7F	; 127
    2e62:	57 e4       	ldi	r21, 0x47	; 71
    2e64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e68:	18 16       	cp	r1, r24
    2e6a:	64 f5       	brge	.+88     	; 0x2ec4 <main+0x980>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e6c:	fe 01       	movw	r30, r28
    2e6e:	ed 5b       	subi	r30, 0xBD	; 189
    2e70:	ff 4f       	sbci	r31, 0xFF	; 255
    2e72:	60 81       	ld	r22, Z
    2e74:	71 81       	ldd	r23, Z+1	; 0x01
    2e76:	82 81       	ldd	r24, Z+2	; 0x02
    2e78:	93 81       	ldd	r25, Z+3	; 0x03
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e2       	ldi	r20, 0x20	; 32
    2e80:	51 e4       	ldi	r21, 0x41	; 65
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	bc 01       	movw	r22, r24
    2e8c:	cd 01       	movw	r24, r26
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9e af       	std	Y+62, r25	; 0x3e
    2e98:	8d af       	std	Y+61, r24	; 0x3d
    2e9a:	0f c0       	rjmp	.+30     	; 0x2eba <main+0x976>
    2e9c:	88 ec       	ldi	r24, 0xC8	; 200
    2e9e:	90 e0       	ldi	r25, 0x00	; 0
    2ea0:	9c af       	std	Y+60, r25	; 0x3c
    2ea2:	8b af       	std	Y+59, r24	; 0x3b
    2ea4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ea6:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ea8:	01 97       	sbiw	r24, 0x01	; 1
    2eaa:	f1 f7       	brne	.-4      	; 0x2ea8 <main+0x964>
    2eac:	9c af       	std	Y+60, r25	; 0x3c
    2eae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eb0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eb2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	9e af       	std	Y+62, r25	; 0x3e
    2eb8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eba:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ebc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	69 f7       	brne	.-38     	; 0x2e9c <main+0x958>
    2ec2:	16 c0       	rjmp	.+44     	; 0x2ef0 <main+0x9ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ff 96       	adiw	r30, 0x3f	; 63
    2ec8:	60 81       	ld	r22, Z
    2eca:	71 81       	ldd	r23, Z+1	; 0x01
    2ecc:	82 81       	ldd	r24, Z+2	; 0x02
    2ece:	93 81       	ldd	r25, Z+3	; 0x03
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9e af       	std	Y+62, r25	; 0x3e
    2eda:	8d af       	std	Y+61, r24	; 0x3d
    2edc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ede:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ee0:	9a af       	std	Y+58, r25	; 0x3a
    2ee2:	89 af       	std	Y+57, r24	; 0x39
    2ee4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ee6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <main+0x9a4>
    2eec:	9a af       	std	Y+58, r25	; 0x3a
    2eee:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1000);
				LCD_Send_Command(_LCD_CLEAR);
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
				//KpValue == '\0';
				counter=0;
    2ef6:	10 92 04 02 	sts	0x0204, r1
				uint8 opration=0;
    2efa:	fe 01       	movw	r30, r28
    2efc:	e1 57       	subi	r30, 0x71	; 113
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	10 82       	st	Z, r1

				/*    Getting The First Number    */
				while(1)
				{
					do{
						KpValue = KP_GetPressed();
    2f02:	0e 94 d7 11 	call	0x23ae	; 0x23ae <KP_GetPressed>
    2f06:	80 93 eb 01 	sts	0x01EB, r24
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a8 e4       	ldi	r26, 0x48	; 72
    2f10:	b3 e4       	ldi	r27, 0x43	; 67
    2f12:	8d ab       	std	Y+53, r24	; 0x35
    2f14:	9e ab       	std	Y+54, r25	; 0x36
    2f16:	af ab       	std	Y+55, r26	; 0x37
    2f18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f1c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f1e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f20:	98 ad       	ldd	r25, Y+56	; 0x38
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a ef       	ldi	r20, 0xFA	; 250
    2f28:	54 e4       	ldi	r21, 0x44	; 68
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	89 ab       	std	Y+49, r24	; 0x31
    2f34:	9a ab       	std	Y+50, r25	; 0x32
    2f36:	ab ab       	std	Y+51, r26	; 0x33
    2f38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f3a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f3c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f3e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f40:	9c a9       	ldd	r25, Y+52	; 0x34
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e8       	ldi	r20, 0x80	; 128
    2f48:	5f e3       	ldi	r21, 0x3F	; 63
    2f4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f4e:	88 23       	and	r24, r24
    2f50:	2c f4       	brge	.+10     	; 0x2f5c <main+0xa18>
		__ticks = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	98 ab       	std	Y+48, r25	; 0x30
    2f58:	8f a7       	std	Y+47, r24	; 0x2f
    2f5a:	3f c0       	rjmp	.+126    	; 0x2fda <main+0xa96>
	else if (__tmp > 65535)
    2f5c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f5e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f60:	8b a9       	ldd	r24, Y+51	; 0x33
    2f62:	9c a9       	ldd	r25, Y+52	; 0x34
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	3f ef       	ldi	r19, 0xFF	; 255
    2f68:	4f e7       	ldi	r20, 0x7F	; 127
    2f6a:	57 e4       	ldi	r21, 0x47	; 71
    2f6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f70:	18 16       	cp	r1, r24
    2f72:	4c f5       	brge	.+82     	; 0x2fc6 <main+0xa82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f74:	6d a9       	ldd	r22, Y+53	; 0x35
    2f76:	7e a9       	ldd	r23, Y+54	; 0x36
    2f78:	8f a9       	ldd	r24, Y+55	; 0x37
    2f7a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e2       	ldi	r20, 0x20	; 32
    2f82:	51 e4       	ldi	r21, 0x41	; 65
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	98 ab       	std	Y+48, r25	; 0x30
    2f9a:	8f a7       	std	Y+47, r24	; 0x2f
    2f9c:	0f c0       	rjmp	.+30     	; 0x2fbc <main+0xa78>
    2f9e:	88 ec       	ldi	r24, 0xC8	; 200
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	9e a7       	std	Y+46, r25	; 0x2e
    2fa4:	8d a7       	std	Y+45, r24	; 0x2d
    2fa6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fa8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <main+0xa66>
    2fae:	9e a7       	std	Y+46, r25	; 0x2e
    2fb0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	98 ab       	std	Y+48, r25	; 0x30
    2fba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fbe:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	69 f7       	brne	.-38     	; 0x2f9e <main+0xa5a>
    2fc4:	14 c0       	rjmp	.+40     	; 0x2fee <main+0xaaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc6:	69 a9       	ldd	r22, Y+49	; 0x31
    2fc8:	7a a9       	ldd	r23, Y+50	; 0x32
    2fca:	8b a9       	ldd	r24, Y+51	; 0x33
    2fcc:	9c a9       	ldd	r25, Y+52	; 0x34
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	98 ab       	std	Y+48, r25	; 0x30
    2fd8:	8f a7       	std	Y+47, r24	; 0x2f
    2fda:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fdc:	98 a9       	ldd	r25, Y+48	; 0x30
    2fde:	9c a7       	std	Y+44, r25	; 0x2c
    2fe0:	8b a7       	std	Y+43, r24	; 0x2b
    2fe2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fe4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <main+0xaa2>
    2fea:	9c a7       	std	Y+44, r25	; 0x2c
    2fec:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(200);
					}while(KpValue == '\0');
    2fee:	80 91 eb 01 	lds	r24, 0x01EB
    2ff2:	88 23       	and	r24, r24
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <main+0xab4>
    2ff6:	85 cf       	rjmp	.-246    	; 0x2f02 <main+0x9be>
					if(KpValue == '+' || KpValue == '-' || KpValue == '/' || KpValue == '*'){
    2ff8:	80 91 eb 01 	lds	r24, 0x01EB
    2ffc:	8b 32       	cpi	r24, 0x2B	; 43
    2ffe:	61 f0       	breq	.+24     	; 0x3018 <main+0xad4>
    3000:	80 91 eb 01 	lds	r24, 0x01EB
    3004:	8d 32       	cpi	r24, 0x2D	; 45
    3006:	41 f0       	breq	.+16     	; 0x3018 <main+0xad4>
    3008:	80 91 eb 01 	lds	r24, 0x01EB
    300c:	8f 32       	cpi	r24, 0x2F	; 47
    300e:	21 f0       	breq	.+8      	; 0x3018 <main+0xad4>
    3010:	80 91 eb 01 	lds	r24, 0x01EB
    3014:	8a 32       	cpi	r24, 0x2A	; 42
    3016:	e9 f4       	brne	.+58     	; 0x3052 <main+0xb0e>
						opration = KpValue;
    3018:	fe 01       	movw	r30, r28
    301a:	e1 57       	subi	r30, 0x71	; 113
    301c:	ff 4f       	sbci	r31, 0xFF	; 255
    301e:	80 91 eb 01 	lds	r24, 0x01EB
    3022:	80 83       	st	Z, r24
						LCD_Send_Char_Pos(KpValue,1,counter+1);
    3024:	90 91 eb 01 	lds	r25, 0x01EB
    3028:	80 91 04 02 	lds	r24, 0x0204
    302c:	28 2f       	mov	r18, r24
    302e:	2f 5f       	subi	r18, 0xFF	; 255
    3030:	89 2f       	mov	r24, r25
    3032:	61 e0       	ldi	r22, 0x01	; 1
    3034:	42 2f       	mov	r20, r18
    3036:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_Send_Char_Pos>
					FristNum[counter]=KpValue;
					counter++;
					LCD_Send_Number_Pos(KpValue,1,counter);

				}
				uint8 counter2=counter+1;
    303a:	80 91 04 02 	lds	r24, 0x0204
    303e:	fe 01       	movw	r30, r28
    3040:	e2 57       	subi	r30, 0x72	; 114
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	8f 5f       	subi	r24, 0xFF	; 255
    3046:	80 83       	st	Z, r24
				uint8 counter3=0;
    3048:	fe 01       	movw	r30, r28
    304a:	e3 57       	subi	r30, 0x73	; 115
    304c:	ff 4f       	sbci	r31, 0xFF	; 255
    304e:	10 82       	st	Z, r1
    3050:	1d c0       	rjmp	.+58     	; 0x308c <main+0xb48>
					if(KpValue == '+' || KpValue == '-' || KpValue == '/' || KpValue == '*'){
						opration = KpValue;
						LCD_Send_Char_Pos(KpValue,1,counter+1);
						break;
					}
					FristNum[counter]=KpValue;
    3052:	80 91 04 02 	lds	r24, 0x0204
    3056:	88 2f       	mov	r24, r24
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	20 91 eb 01 	lds	r18, 0x01EB
    305e:	fc 01       	movw	r30, r24
    3060:	e6 5d       	subi	r30, 0xD6	; 214
    3062:	fd 4f       	sbci	r31, 0xFD	; 253
    3064:	20 83       	st	Z, r18
					counter++;
    3066:	80 91 04 02 	lds	r24, 0x0204
    306a:	8f 5f       	subi	r24, 0xFF	; 255
    306c:	80 93 04 02 	sts	0x0204, r24
					LCD_Send_Number_Pos(KpValue,1,counter);
    3070:	80 91 eb 01 	lds	r24, 0x01EB
    3074:	88 2f       	mov	r24, r24
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	a0 e0       	ldi	r26, 0x00	; 0
    307a:	b0 e0       	ldi	r27, 0x00	; 0
    307c:	20 91 04 02 	lds	r18, 0x0204
    3080:	bc 01       	movw	r22, r24
    3082:	cd 01       	movw	r24, r26
    3084:	41 e0       	ldi	r20, 0x01	; 1
    3086:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_Send_Number_Pos>
    308a:	3b cf       	rjmp	.-394    	; 0x2f02 <main+0x9be>

				/*    Getting The Second Number    */
				while(1)
				{
					do{
						KpValue = KP_GetPressed();
    308c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <KP_GetPressed>
    3090:	80 93 eb 01 	sts	0x01EB, r24
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	a8 e4       	ldi	r26, 0x48	; 72
    309a:	b3 e4       	ldi	r27, 0x43	; 67
    309c:	8f a3       	std	Y+39, r24	; 0x27
    309e:	98 a7       	std	Y+40, r25	; 0x28
    30a0:	a9 a7       	std	Y+41, r26	; 0x29
    30a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a4:	6f a1       	ldd	r22, Y+39	; 0x27
    30a6:	78 a5       	ldd	r23, Y+40	; 0x28
    30a8:	89 a5       	ldd	r24, Y+41	; 0x29
    30aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	4a ef       	ldi	r20, 0xFA	; 250
    30b2:	54 e4       	ldi	r21, 0x44	; 68
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	8b a3       	std	Y+35, r24	; 0x23
    30be:	9c a3       	std	Y+36, r25	; 0x24
    30c0:	ad a3       	std	Y+37, r26	; 0x25
    30c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30c4:	6b a1       	ldd	r22, Y+35	; 0x23
    30c6:	7c a1       	ldd	r23, Y+36	; 0x24
    30c8:	8d a1       	ldd	r24, Y+37	; 0x25
    30ca:	9e a1       	ldd	r25, Y+38	; 0x26
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e8       	ldi	r20, 0x80	; 128
    30d2:	5f e3       	ldi	r21, 0x3F	; 63
    30d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30d8:	88 23       	and	r24, r24
    30da:	2c f4       	brge	.+10     	; 0x30e6 <main+0xba2>
		__ticks = 1;
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	9a a3       	std	Y+34, r25	; 0x22
    30e2:	89 a3       	std	Y+33, r24	; 0x21
    30e4:	3f c0       	rjmp	.+126    	; 0x3164 <main+0xc20>
	else if (__tmp > 65535)
    30e6:	6b a1       	ldd	r22, Y+35	; 0x23
    30e8:	7c a1       	ldd	r23, Y+36	; 0x24
    30ea:	8d a1       	ldd	r24, Y+37	; 0x25
    30ec:	9e a1       	ldd	r25, Y+38	; 0x26
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	3f ef       	ldi	r19, 0xFF	; 255
    30f2:	4f e7       	ldi	r20, 0x7F	; 127
    30f4:	57 e4       	ldi	r21, 0x47	; 71
    30f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30fa:	18 16       	cp	r1, r24
    30fc:	4c f5       	brge	.+82     	; 0x3150 <main+0xc0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30fe:	6f a1       	ldd	r22, Y+39	; 0x27
    3100:	78 a5       	ldd	r23, Y+40	; 0x28
    3102:	89 a5       	ldd	r24, Y+41	; 0x29
    3104:	9a a5       	ldd	r25, Y+42	; 0x2a
    3106:	20 e0       	ldi	r18, 0x00	; 0
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	40 e2       	ldi	r20, 0x20	; 32
    310c:	51 e4       	ldi	r21, 0x41	; 65
    310e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	bc 01       	movw	r22, r24
    3118:	cd 01       	movw	r24, r26
    311a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	9a a3       	std	Y+34, r25	; 0x22
    3124:	89 a3       	std	Y+33, r24	; 0x21
    3126:	0f c0       	rjmp	.+30     	; 0x3146 <main+0xc02>
    3128:	88 ec       	ldi	r24, 0xC8	; 200
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	98 a3       	std	Y+32, r25	; 0x20
    312e:	8f 8f       	std	Y+31, r24	; 0x1f
    3130:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3132:	98 a1       	ldd	r25, Y+32	; 0x20
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	f1 f7       	brne	.-4      	; 0x3134 <main+0xbf0>
    3138:	98 a3       	std	Y+32, r25	; 0x20
    313a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313c:	89 a1       	ldd	r24, Y+33	; 0x21
    313e:	9a a1       	ldd	r25, Y+34	; 0x22
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	9a a3       	std	Y+34, r25	; 0x22
    3144:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3146:	89 a1       	ldd	r24, Y+33	; 0x21
    3148:	9a a1       	ldd	r25, Y+34	; 0x22
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	69 f7       	brne	.-38     	; 0x3128 <main+0xbe4>
    314e:	14 c0       	rjmp	.+40     	; 0x3178 <main+0xc34>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3150:	6b a1       	ldd	r22, Y+35	; 0x23
    3152:	7c a1       	ldd	r23, Y+36	; 0x24
    3154:	8d a1       	ldd	r24, Y+37	; 0x25
    3156:	9e a1       	ldd	r25, Y+38	; 0x26
    3158:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	9a a3       	std	Y+34, r25	; 0x22
    3162:	89 a3       	std	Y+33, r24	; 0x21
    3164:	89 a1       	ldd	r24, Y+33	; 0x21
    3166:	9a a1       	ldd	r25, Y+34	; 0x22
    3168:	9e 8f       	std	Y+30, r25	; 0x1e
    316a:	8d 8f       	std	Y+29, r24	; 0x1d
    316c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    316e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <main+0xc2c>
    3174:	9e 8f       	std	Y+30, r25	; 0x1e
    3176:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(200);
					}while(KpValue == '\0');
    3178:	80 91 eb 01 	lds	r24, 0x01EB
    317c:	88 23       	and	r24, r24
    317e:	09 f4       	brne	.+2      	; 0x3182 <main+0xc3e>
    3180:	85 cf       	rjmp	.-246    	; 0x308c <main+0xb48>
					if(KpValue == '=' ){
    3182:	80 91 eb 01 	lds	r24, 0x01EB
    3186:	8d 33       	cpi	r24, 0x3D	; 61
    3188:	09 f0       	breq	.+2      	; 0x318c <main+0xc48>
    318a:	4c c0       	rjmp	.+152    	; 0x3224 <main+0xce0>
						LCD_Send_Char_Pos(KpValue,1,counter2+1);
    318c:	20 91 eb 01 	lds	r18, 0x01EB
    3190:	fe 01       	movw	r30, r28
    3192:	e2 57       	subi	r30, 0x72	; 114
    3194:	ff 4f       	sbci	r31, 0xFF	; 255
    3196:	80 81       	ld	r24, Z
    3198:	98 2f       	mov	r25, r24
    319a:	9f 5f       	subi	r25, 0xFF	; 255
    319c:	82 2f       	mov	r24, r18
    319e:	61 e0       	ldi	r22, 0x01	; 1
    31a0:	49 2f       	mov	r20, r25
    31a2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <LCD_Send_Char_Pos>
					LCD_Send_Number_Pos(KpValue,1,counter2);
				}


				/*     switch which operation was Selected */
				switch(opration)
    31a6:	fe 01       	movw	r30, r28
    31a8:	e1 57       	subi	r30, 0x71	; 113
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	80 81       	ld	r24, Z
    31ae:	28 2f       	mov	r18, r24
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	cf 56       	subi	r28, 0x6F	; 111
    31b4:	df 4f       	sbci	r29, 0xFF	; 255
    31b6:	39 83       	std	Y+1, r19	; 0x01
    31b8:	28 83       	st	Y, r18
    31ba:	c1 59       	subi	r28, 0x91	; 145
    31bc:	d0 40       	sbci	r29, 0x00	; 0
    31be:	cf 56       	subi	r28, 0x6F	; 111
    31c0:	df 4f       	sbci	r29, 0xFF	; 255
    31c2:	88 81       	ld	r24, Y
    31c4:	99 81       	ldd	r25, Y+1	; 0x01
    31c6:	c1 59       	subi	r28, 0x91	; 145
    31c8:	d0 40       	sbci	r29, 0x00	; 0
    31ca:	8b 32       	cpi	r24, 0x2B	; 43
    31cc:	91 05       	cpc	r25, r1
    31ce:	09 f4       	brne	.+2      	; 0x31d2 <main+0xc8e>
    31d0:	57 c0       	rjmp	.+174    	; 0x3280 <main+0xd3c>
    31d2:	cf 56       	subi	r28, 0x6F	; 111
    31d4:	df 4f       	sbci	r29, 0xFF	; 255
    31d6:	e8 81       	ld	r30, Y
    31d8:	f9 81       	ldd	r31, Y+1	; 0x01
    31da:	c1 59       	subi	r28, 0x91	; 145
    31dc:	d0 40       	sbci	r29, 0x00	; 0
    31de:	ec 32       	cpi	r30, 0x2C	; 44
    31e0:	f1 05       	cpc	r31, r1
    31e2:	5c f4       	brge	.+22     	; 0x31fa <main+0xcb6>
    31e4:	cf 56       	subi	r28, 0x6F	; 111
    31e6:	df 4f       	sbci	r29, 0xFF	; 255
    31e8:	28 81       	ld	r18, Y
    31ea:	39 81       	ldd	r19, Y+1	; 0x01
    31ec:	c1 59       	subi	r28, 0x91	; 145
    31ee:	d0 40       	sbci	r29, 0x00	; 0
    31f0:	2a 32       	cpi	r18, 0x2A	; 42
    31f2:	31 05       	cpc	r19, r1
    31f4:	09 f4       	brne	.+2      	; 0x31f8 <main+0xcb4>
    31f6:	7a c0       	rjmp	.+244    	; 0x32ec <main+0xda8>
    31f8:	aa c0       	rjmp	.+340    	; 0x334e <main+0xe0a>
    31fa:	cf 56       	subi	r28, 0x6F	; 111
    31fc:	df 4f       	sbci	r29, 0xFF	; 255
    31fe:	88 81       	ld	r24, Y
    3200:	99 81       	ldd	r25, Y+1	; 0x01
    3202:	c1 59       	subi	r28, 0x91	; 145
    3204:	d0 40       	sbci	r29, 0x00	; 0
    3206:	8d 32       	cpi	r24, 0x2D	; 45
    3208:	91 05       	cpc	r25, r1
    320a:	09 f4       	brne	.+2      	; 0x320e <main+0xcca>
    320c:	54 c0       	rjmp	.+168    	; 0x32b6 <main+0xd72>
    320e:	cf 56       	subi	r28, 0x6F	; 111
    3210:	df 4f       	sbci	r29, 0xFF	; 255
    3212:	e8 81       	ld	r30, Y
    3214:	f9 81       	ldd	r31, Y+1	; 0x01
    3216:	c1 59       	subi	r28, 0x91	; 145
    3218:	d0 40       	sbci	r29, 0x00	; 0
    321a:	ef 32       	cpi	r30, 0x2F	; 47
    321c:	f1 05       	cpc	r31, r1
    321e:	09 f4       	brne	.+2      	; 0x3222 <main+0xcde>
    3220:	7c c0       	rjmp	.+248    	; 0x331a <main+0xdd6>
    3222:	95 c0       	rjmp	.+298    	; 0x334e <main+0xe0a>
						_delay_ms(200);
					}while(KpValue == '\0');
					if(KpValue == '=' ){
						LCD_Send_Char_Pos(KpValue,1,counter2+1);
						break;}
					SecondNum[counter3]=KpValue;
    3224:	fe 01       	movw	r30, r28
    3226:	e3 57       	subi	r30, 0x73	; 115
    3228:	ff 4f       	sbci	r31, 0xFF	; 255
    322a:	80 81       	ld	r24, Z
    322c:	88 2f       	mov	r24, r24
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	20 91 eb 01 	lds	r18, 0x01EB
    3234:	fc 01       	movw	r30, r24
    3236:	ea 5d       	subi	r30, 0xDA	; 218
    3238:	fd 4f       	sbci	r31, 0xFD	; 253
    323a:	20 83       	st	Z, r18
					counter2++;
    323c:	de 01       	movw	r26, r28
    323e:	a2 57       	subi	r26, 0x72	; 114
    3240:	bf 4f       	sbci	r27, 0xFF	; 255
    3242:	fe 01       	movw	r30, r28
    3244:	e2 57       	subi	r30, 0x72	; 114
    3246:	ff 4f       	sbci	r31, 0xFF	; 255
    3248:	80 81       	ld	r24, Z
    324a:	8f 5f       	subi	r24, 0xFF	; 255
    324c:	8c 93       	st	X, r24
					counter3++;
    324e:	de 01       	movw	r26, r28
    3250:	a3 57       	subi	r26, 0x73	; 115
    3252:	bf 4f       	sbci	r27, 0xFF	; 255
    3254:	fe 01       	movw	r30, r28
    3256:	e3 57       	subi	r30, 0x73	; 115
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 81       	ld	r24, Z
    325c:	8f 5f       	subi	r24, 0xFF	; 255
    325e:	8c 93       	st	X, r24
					LCD_Send_Number_Pos(KpValue,1,counter2);
    3260:	80 91 eb 01 	lds	r24, 0x01EB
    3264:	88 2f       	mov	r24, r24
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	a0 e0       	ldi	r26, 0x00	; 0
    326a:	b0 e0       	ldi	r27, 0x00	; 0
    326c:	fe 01       	movw	r30, r28
    326e:	e2 57       	subi	r30, 0x72	; 114
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	bc 01       	movw	r22, r24
    3274:	cd 01       	movw	r24, r26
    3276:	41 e0       	ldi	r20, 0x01	; 1
    3278:	20 81       	ld	r18, Z
    327a:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_Send_Number_Pos>
    327e:	06 cf       	rjmp	.-500    	; 0x308c <main+0xb48>


				/*     switch which operation was Selected */
				switch(opration)
				{
					case '+': LCD_Send_Number_Pos(calc_sum(FristNum,SecondNum,counter,counter3),1,counter2+3);break;
    3280:	40 91 04 02 	lds	r20, 0x0204
    3284:	8a e2       	ldi	r24, 0x2A	; 42
    3286:	92 e0       	ldi	r25, 0x02	; 2
    3288:	26 e2       	ldi	r18, 0x26	; 38
    328a:	32 e0       	ldi	r19, 0x02	; 2
    328c:	fe 01       	movw	r30, r28
    328e:	e3 57       	subi	r30, 0x73	; 115
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	b9 01       	movw	r22, r18
    3294:	20 81       	ld	r18, Z
    3296:	0e 94 f0 1a 	call	0x35e0	; 0x35e0 <calc_sum>
    329a:	cc 01       	movw	r24, r24
    329c:	a0 e0       	ldi	r26, 0x00	; 0
    329e:	b0 e0       	ldi	r27, 0x00	; 0
    32a0:	fe 01       	movw	r30, r28
    32a2:	e2 57       	subi	r30, 0x72	; 114
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	20 81       	ld	r18, Z
    32a8:	2d 5f       	subi	r18, 0xFD	; 253
    32aa:	bc 01       	movw	r22, r24
    32ac:	cd 01       	movw	r24, r26
    32ae:	41 e0       	ldi	r20, 0x01	; 1
    32b0:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_Send_Number_Pos>
    32b4:	4c c0       	rjmp	.+152    	; 0x334e <main+0xe0a>
					case '-': LCD_Send_Number_Pos(calc_sub(FristNum,SecondNum,counter,counter3),1,counter2+3);break;
    32b6:	40 91 04 02 	lds	r20, 0x0204
    32ba:	8a e2       	ldi	r24, 0x2A	; 42
    32bc:	92 e0       	ldi	r25, 0x02	; 2
    32be:	26 e2       	ldi	r18, 0x26	; 38
    32c0:	32 e0       	ldi	r19, 0x02	; 2
    32c2:	fe 01       	movw	r30, r28
    32c4:	e3 57       	subi	r30, 0x73	; 115
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	b9 01       	movw	r22, r18
    32ca:	20 81       	ld	r18, Z
    32cc:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <calc_sub>
    32d0:	cc 01       	movw	r24, r24
    32d2:	a0 e0       	ldi	r26, 0x00	; 0
    32d4:	b0 e0       	ldi	r27, 0x00	; 0
    32d6:	fe 01       	movw	r30, r28
    32d8:	e2 57       	subi	r30, 0x72	; 114
    32da:	ff 4f       	sbci	r31, 0xFF	; 255
    32dc:	20 81       	ld	r18, Z
    32de:	2d 5f       	subi	r18, 0xFD	; 253
    32e0:	bc 01       	movw	r22, r24
    32e2:	cd 01       	movw	r24, r26
    32e4:	41 e0       	ldi	r20, 0x01	; 1
    32e6:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_Send_Number_Pos>
    32ea:	31 c0       	rjmp	.+98     	; 0x334e <main+0xe0a>
					case '*': LCD_Send_Number_Pos(calc_multi(FristNum,SecondNum,counter,counter3),1,+3);break;
    32ec:	40 91 04 02 	lds	r20, 0x0204
    32f0:	8a e2       	ldi	r24, 0x2A	; 42
    32f2:	92 e0       	ldi	r25, 0x02	; 2
    32f4:	26 e2       	ldi	r18, 0x26	; 38
    32f6:	32 e0       	ldi	r19, 0x02	; 2
    32f8:	fe 01       	movw	r30, r28
    32fa:	e3 57       	subi	r30, 0x73	; 115
    32fc:	ff 4f       	sbci	r31, 0xFF	; 255
    32fe:	b9 01       	movw	r22, r18
    3300:	20 81       	ld	r18, Z
    3302:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <calc_multi>
    3306:	cc 01       	movw	r24, r24
    3308:	a0 e0       	ldi	r26, 0x00	; 0
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	bc 01       	movw	r22, r24
    330e:	cd 01       	movw	r24, r26
    3310:	41 e0       	ldi	r20, 0x01	; 1
    3312:	23 e0       	ldi	r18, 0x03	; 3
    3314:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_Send_Number_Pos>
    3318:	1a c0       	rjmp	.+52     	; 0x334e <main+0xe0a>
					case '/': LCD_Send_Number_Pos(calc_div(FristNum,SecondNum,counter,counter3),1,counter2+3);break;
    331a:	40 91 04 02 	lds	r20, 0x0204
    331e:	8a e2       	ldi	r24, 0x2A	; 42
    3320:	92 e0       	ldi	r25, 0x02	; 2
    3322:	26 e2       	ldi	r18, 0x26	; 38
    3324:	32 e0       	ldi	r19, 0x02	; 2
    3326:	fe 01       	movw	r30, r28
    3328:	e3 57       	subi	r30, 0x73	; 115
    332a:	ff 4f       	sbci	r31, 0xFF	; 255
    332c:	b9 01       	movw	r22, r18
    332e:	20 81       	ld	r18, Z
    3330:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <calc_div>
    3334:	cc 01       	movw	r24, r24
    3336:	a0 e0       	ldi	r26, 0x00	; 0
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	fe 01       	movw	r30, r28
    333c:	e2 57       	subi	r30, 0x72	; 114
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	20 81       	ld	r18, Z
    3342:	2d 5f       	subi	r18, 0xFD	; 253
    3344:	bc 01       	movw	r22, r24
    3346:	cd 01       	movw	r24, r26
    3348:	41 e0       	ldi	r20, 0x01	; 1
    334a:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_Send_Number_Pos>
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	90 e8       	ldi	r25, 0x80	; 128
    3352:	ab e3       	ldi	r26, 0x3B	; 59
    3354:	b5 e4       	ldi	r27, 0x45	; 69
    3356:	89 8f       	std	Y+25, r24	; 0x19
    3358:	9a 8f       	std	Y+26, r25	; 0x1a
    335a:	ab 8f       	std	Y+27, r26	; 0x1b
    335c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335e:	69 8d       	ldd	r22, Y+25	; 0x19
    3360:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3362:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3364:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3366:	20 e0       	ldi	r18, 0x00	; 0
    3368:	30 e0       	ldi	r19, 0x00	; 0
    336a:	4a ef       	ldi	r20, 0xFA	; 250
    336c:	54 e4       	ldi	r21, 0x44	; 68
    336e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	8d 8b       	std	Y+21, r24	; 0x15
    3378:	9e 8b       	std	Y+22, r25	; 0x16
    337a:	af 8b       	std	Y+23, r26	; 0x17
    337c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    337e:	6d 89       	ldd	r22, Y+21	; 0x15
    3380:	7e 89       	ldd	r23, Y+22	; 0x16
    3382:	8f 89       	ldd	r24, Y+23	; 0x17
    3384:	98 8d       	ldd	r25, Y+24	; 0x18
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	40 e8       	ldi	r20, 0x80	; 128
    338c:	5f e3       	ldi	r21, 0x3F	; 63
    338e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3392:	88 23       	and	r24, r24
    3394:	2c f4       	brge	.+10     	; 0x33a0 <main+0xe5c>
		__ticks = 1;
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	9c 8b       	std	Y+20, r25	; 0x14
    339c:	8b 8b       	std	Y+19, r24	; 0x13
    339e:	3f c0       	rjmp	.+126    	; 0x341e <main+0xeda>
	else if (__tmp > 65535)
    33a0:	6d 89       	ldd	r22, Y+21	; 0x15
    33a2:	7e 89       	ldd	r23, Y+22	; 0x16
    33a4:	8f 89       	ldd	r24, Y+23	; 0x17
    33a6:	98 8d       	ldd	r25, Y+24	; 0x18
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	3f ef       	ldi	r19, 0xFF	; 255
    33ac:	4f e7       	ldi	r20, 0x7F	; 127
    33ae:	57 e4       	ldi	r21, 0x47	; 71
    33b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33b4:	18 16       	cp	r1, r24
    33b6:	4c f5       	brge	.+82     	; 0x340a <main+0xec6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b8:	69 8d       	ldd	r22, Y+25	; 0x19
    33ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    33bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    33be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	40 e2       	ldi	r20, 0x20	; 32
    33c6:	51 e4       	ldi	r21, 0x41	; 65
    33c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	bc 01       	movw	r22, r24
    33d2:	cd 01       	movw	r24, r26
    33d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d8:	dc 01       	movw	r26, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	9c 8b       	std	Y+20, r25	; 0x14
    33de:	8b 8b       	std	Y+19, r24	; 0x13
    33e0:	0f c0       	rjmp	.+30     	; 0x3400 <main+0xebc>
    33e2:	88 ec       	ldi	r24, 0xC8	; 200
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	9a 8b       	std	Y+18, r25	; 0x12
    33e8:	89 8b       	std	Y+17, r24	; 0x11
    33ea:	89 89       	ldd	r24, Y+17	; 0x11
    33ec:	9a 89       	ldd	r25, Y+18	; 0x12
    33ee:	01 97       	sbiw	r24, 0x01	; 1
    33f0:	f1 f7       	brne	.-4      	; 0x33ee <main+0xeaa>
    33f2:	9a 8b       	std	Y+18, r25	; 0x12
    33f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f6:	8b 89       	ldd	r24, Y+19	; 0x13
    33f8:	9c 89       	ldd	r25, Y+20	; 0x14
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	9c 8b       	std	Y+20, r25	; 0x14
    33fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3400:	8b 89       	ldd	r24, Y+19	; 0x13
    3402:	9c 89       	ldd	r25, Y+20	; 0x14
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	69 f7       	brne	.-38     	; 0x33e2 <main+0xe9e>
    3408:	14 c0       	rjmp	.+40     	; 0x3432 <main+0xeee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    340a:	6d 89       	ldd	r22, Y+21	; 0x15
    340c:	7e 89       	ldd	r23, Y+22	; 0x16
    340e:	8f 89       	ldd	r24, Y+23	; 0x17
    3410:	98 8d       	ldd	r25, Y+24	; 0x18
    3412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	9c 8b       	std	Y+20, r25	; 0x14
    341c:	8b 8b       	std	Y+19, r24	; 0x13
    341e:	8b 89       	ldd	r24, Y+19	; 0x13
    3420:	9c 89       	ldd	r25, Y+20	; 0x14
    3422:	98 8b       	std	Y+16, r25	; 0x10
    3424:	8f 87       	std	Y+15, r24	; 0x0f
    3426:	8f 85       	ldd	r24, Y+15	; 0x0f
    3428:	98 89       	ldd	r25, Y+16	; 0x10
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	f1 f7       	brne	.-4      	; 0x342a <main+0xee6>
    342e:	98 8b       	std	Y+16, r25	; 0x10
    3430:	8f 87       	std	Y+15, r24	; 0x0f
				}
				_delay_ms(3000);
				LCD_Send_Command(_LCD_CLEAR);
    3432:	81 e0       	ldi	r24, 0x01	; 1
    3434:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
    3438:	d0 cc       	rjmp	.-1632   	; 0x2dda <main+0x896>
				}

		}
		/*   This Segment if The Password is Wrong    */
		else{
			LCD_Send_Command(_LCD_CLEAR);
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <LCD_Send_Command>
			LCD_Send_String_Pos("Wrong password",1,1);
    3440:	8b e9       	ldi	r24, 0x9B	; 155
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	61 e0       	ldi	r22, 0x01	; 1
    3446:	41 e0       	ldi	r20, 0x01	; 1
    3448:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LCD_Send_String_Pos>
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	aa ef       	ldi	r26, 0xFA	; 250
    3452:	b4 e4       	ldi	r27, 0x44	; 68
    3454:	8b 87       	std	Y+11, r24	; 0x0b
    3456:	9c 87       	std	Y+12, r25	; 0x0c
    3458:	ad 87       	std	Y+13, r26	; 0x0d
    345a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    345c:	6b 85       	ldd	r22, Y+11	; 0x0b
    345e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3460:	8d 85       	ldd	r24, Y+13	; 0x0d
    3462:	9e 85       	ldd	r25, Y+14	; 0x0e
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	4a ef       	ldi	r20, 0xFA	; 250
    346a:	54 e4       	ldi	r21, 0x44	; 68
    346c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	8f 83       	std	Y+7, r24	; 0x07
    3476:	98 87       	std	Y+8, r25	; 0x08
    3478:	a9 87       	std	Y+9, r26	; 0x09
    347a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    347c:	6f 81       	ldd	r22, Y+7	; 0x07
    347e:	78 85       	ldd	r23, Y+8	; 0x08
    3480:	89 85       	ldd	r24, Y+9	; 0x09
    3482:	9a 85       	ldd	r25, Y+10	; 0x0a
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	40 e8       	ldi	r20, 0x80	; 128
    348a:	5f e3       	ldi	r21, 0x3F	; 63
    348c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3490:	88 23       	and	r24, r24
    3492:	2c f4       	brge	.+10     	; 0x349e <main+0xf5a>
		__ticks = 1;
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	9e 83       	std	Y+6, r25	; 0x06
    349a:	8d 83       	std	Y+5, r24	; 0x05
    349c:	3f c0       	rjmp	.+126    	; 0x351c <main+0xfd8>
	else if (__tmp > 65535)
    349e:	6f 81       	ldd	r22, Y+7	; 0x07
    34a0:	78 85       	ldd	r23, Y+8	; 0x08
    34a2:	89 85       	ldd	r24, Y+9	; 0x09
    34a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	3f ef       	ldi	r19, 0xFF	; 255
    34aa:	4f e7       	ldi	r20, 0x7F	; 127
    34ac:	57 e4       	ldi	r21, 0x47	; 71
    34ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34b2:	18 16       	cp	r1, r24
    34b4:	4c f5       	brge	.+82     	; 0x3508 <main+0xfc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    34b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    34ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    34bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	40 e2       	ldi	r20, 0x20	; 32
    34c4:	51 e4       	ldi	r21, 0x41	; 65
    34c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ca:	dc 01       	movw	r26, r24
    34cc:	cb 01       	movw	r24, r22
    34ce:	bc 01       	movw	r22, r24
    34d0:	cd 01       	movw	r24, r26
    34d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	9e 83       	std	Y+6, r25	; 0x06
    34dc:	8d 83       	std	Y+5, r24	; 0x05
    34de:	0f c0       	rjmp	.+30     	; 0x34fe <main+0xfba>
    34e0:	88 ec       	ldi	r24, 0xC8	; 200
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	9c 83       	std	Y+4, r25	; 0x04
    34e6:	8b 83       	std	Y+3, r24	; 0x03
    34e8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ea:	9c 81       	ldd	r25, Y+4	; 0x04
    34ec:	01 97       	sbiw	r24, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <main+0xfa8>
    34f0:	9c 83       	std	Y+4, r25	; 0x04
    34f2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34f4:	8d 81       	ldd	r24, Y+5	; 0x05
    34f6:	9e 81       	ldd	r25, Y+6	; 0x06
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	9e 83       	std	Y+6, r25	; 0x06
    34fc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3500:	9e 81       	ldd	r25, Y+6	; 0x06
    3502:	00 97       	sbiw	r24, 0x00	; 0
    3504:	69 f7       	brne	.-38     	; 0x34e0 <main+0xf9c>
    3506:	19 c9       	rjmp	.-3534   	; 0x273a <main+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3508:	6f 81       	ldd	r22, Y+7	; 0x07
    350a:	78 85       	ldd	r23, Y+8	; 0x08
    350c:	89 85       	ldd	r24, Y+9	; 0x09
    350e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3514:	dc 01       	movw	r26, r24
    3516:	cb 01       	movw	r24, r22
    3518:	9e 83       	std	Y+6, r25	; 0x06
    351a:	8d 83       	std	Y+5, r24	; 0x05
    351c:	8d 81       	ldd	r24, Y+5	; 0x05
    351e:	9e 81       	ldd	r25, Y+6	; 0x06
    3520:	9a 83       	std	Y+2, r25	; 0x02
    3522:	89 83       	std	Y+1, r24	; 0x01
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	f1 f7       	brne	.-4      	; 0x3528 <main+0xfe4>
    352c:	9a 83       	std	Y+2, r25	; 0x02
    352e:	89 83       	std	Y+1, r24	; 0x01
    3530:	04 c9       	rjmp	.-3576   	; 0x273a <main+0x1f6>

00003532 <INT0_Interrupt>:
	}
}


void INT0_Interrupt()
{
    3532:	df 93       	push	r29
    3534:	cf 93       	push	r28
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
	Reset=0;
    353a:	10 92 ec 01 	sts	0x01EC, r1
}
    353e:	cf 91       	pop	r28
    3540:	df 91       	pop	r29
    3542:	08 95       	ret

00003544 <Cheack_Password>:

uint8 Cheack_Password(uint8 a[],uint8 b[],uint8 n)
{
    3544:	df 93       	push	r29
    3546:	cf 93       	push	r28
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	28 97       	sbiw	r28, 0x08	; 8
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	9c 83       	std	Y+4, r25	; 0x04
    355a:	8b 83       	std	Y+3, r24	; 0x03
    355c:	7e 83       	std	Y+6, r23	; 0x06
    355e:	6d 83       	std	Y+5, r22	; 0x05
    3560:	4f 83       	std	Y+7, r20	; 0x07
	uint8 ret=0;
    3562:	1a 82       	std	Y+2, r1	; 0x02
	for(uint8 counter =0; counter<n-1;counter++)
    3564:	19 82       	std	Y+1, r1	; 0x01
    3566:	1a c0       	rjmp	.+52     	; 0x359c <Cheack_Password+0x58>
	{
		if(a[counter] == b[counter])
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	28 2f       	mov	r18, r24
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	8b 81       	ldd	r24, Y+3	; 0x03
    3570:	9c 81       	ldd	r25, Y+4	; 0x04
    3572:	fc 01       	movw	r30, r24
    3574:	e2 0f       	add	r30, r18
    3576:	f3 1f       	adc	r31, r19
    3578:	40 81       	ld	r20, Z
    357a:	89 81       	ldd	r24, Y+1	; 0x01
    357c:	28 2f       	mov	r18, r24
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	8d 81       	ldd	r24, Y+5	; 0x05
    3582:	9e 81       	ldd	r25, Y+6	; 0x06
    3584:	fc 01       	movw	r30, r24
    3586:	e2 0f       	add	r30, r18
    3588:	f3 1f       	adc	r31, r19
    358a:	80 81       	ld	r24, Z
    358c:	48 17       	cp	r20, r24
    358e:	19 f4       	brne	.+6      	; 0x3596 <Cheack_Password+0x52>
		{
			ret++;
    3590:	8a 81       	ldd	r24, Y+2	; 0x02
    3592:	8f 5f       	subi	r24, 0xFF	; 255
    3594:	8a 83       	std	Y+2, r24	; 0x02
}

uint8 Cheack_Password(uint8 a[],uint8 b[],uint8 n)
{
	uint8 ret=0;
	for(uint8 counter =0; counter<n-1;counter++)
    3596:	89 81       	ldd	r24, Y+1	; 0x01
    3598:	8f 5f       	subi	r24, 0xFF	; 255
    359a:	89 83       	std	Y+1, r24	; 0x01
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	28 2f       	mov	r18, r24
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	8f 81       	ldd	r24, Y+7	; 0x07
    35a4:	88 2f       	mov	r24, r24
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	28 17       	cp	r18, r24
    35ac:	39 07       	cpc	r19, r25
    35ae:	e4 f2       	brlt	.-72     	; 0x3568 <Cheack_Password+0x24>
		if(a[counter] == b[counter])
		{
			ret++;
		}
	}
	if(ret == n-1)
    35b0:	8a 81       	ldd	r24, Y+2	; 0x02
    35b2:	28 2f       	mov	r18, r24
    35b4:	30 e0       	ldi	r19, 0x00	; 0
    35b6:	8f 81       	ldd	r24, Y+7	; 0x07
    35b8:	88 2f       	mov	r24, r24
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	28 17       	cp	r18, r24
    35c0:	39 07       	cpc	r19, r25
    35c2:	19 f4       	brne	.+6      	; 0x35ca <Cheack_Password+0x86>
		return 1;
    35c4:	81 e0       	ldi	r24, 0x01	; 1
    35c6:	88 87       	std	Y+8, r24	; 0x08
    35c8:	01 c0       	rjmp	.+2      	; 0x35cc <Cheack_Password+0x88>
	else
		return 0;
    35ca:	18 86       	std	Y+8, r1	; 0x08
    35cc:	88 85       	ldd	r24, Y+8	; 0x08
}
    35ce:	28 96       	adiw	r28, 0x08	; 8
    35d0:	0f b6       	in	r0, 0x3f	; 63
    35d2:	f8 94       	cli
    35d4:	de bf       	out	0x3e, r29	; 62
    35d6:	0f be       	out	0x3f, r0	; 63
    35d8:	cd bf       	out	0x3d, r28	; 61
    35da:	cf 91       	pop	r28
    35dc:	df 91       	pop	r29
    35de:	08 95       	ret

000035e0 <calc_sum>:

uint16 calc_sum(uint8 a[],uint8 b[],uint8 n,uint8 m){
    35e0:	df 93       	push	r29
    35e2:	cf 93       	push	r28
    35e4:	cd b7       	in	r28, 0x3d	; 61
    35e6:	de b7       	in	r29, 0x3e	; 62
    35e8:	2c 97       	sbiw	r28, 0x0c	; 12
    35ea:	0f b6       	in	r0, 0x3f	; 63
    35ec:	f8 94       	cli
    35ee:	de bf       	out	0x3e, r29	; 62
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	cd bf       	out	0x3d, r28	; 61
    35f4:	98 87       	std	Y+8, r25	; 0x08
    35f6:	8f 83       	std	Y+7, r24	; 0x07
    35f8:	7a 87       	std	Y+10, r23	; 0x0a
    35fa:	69 87       	std	Y+9, r22	; 0x09
    35fc:	4b 87       	std	Y+11, r20	; 0x0b
    35fe:	2c 87       	std	Y+12, r18	; 0x0c
	uint16 num1=a[0];
    3600:	ef 81       	ldd	r30, Y+7	; 0x07
    3602:	f8 85       	ldd	r31, Y+8	; 0x08
    3604:	80 81       	ld	r24, Z
    3606:	88 2f       	mov	r24, r24
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	9e 83       	std	Y+6, r25	; 0x06
    360c:	8d 83       	std	Y+5, r24	; 0x05
	uint16 num2=b[0];
    360e:	e9 85       	ldd	r30, Y+9	; 0x09
    3610:	fa 85       	ldd	r31, Y+10	; 0x0a
    3612:	80 81       	ld	r24, Z
    3614:	88 2f       	mov	r24, r24
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	9c 83       	std	Y+4, r25	; 0x04
    361a:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8 counter=1;counter<n;counter++)
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	8a 83       	std	Y+2, r24	; 0x02
    3620:	1f c0       	rjmp	.+62     	; 0x3660 <calc_sum+0x80>
	{

		num1 = num1*10 +a[counter];
    3622:	8d 81       	ldd	r24, Y+5	; 0x05
    3624:	9e 81       	ldd	r25, Y+6	; 0x06
    3626:	9c 01       	movw	r18, r24
    3628:	22 0f       	add	r18, r18
    362a:	33 1f       	adc	r19, r19
    362c:	c9 01       	movw	r24, r18
    362e:	88 0f       	add	r24, r24
    3630:	99 1f       	adc	r25, r25
    3632:	88 0f       	add	r24, r24
    3634:	99 1f       	adc	r25, r25
    3636:	a9 01       	movw	r20, r18
    3638:	48 0f       	add	r20, r24
    363a:	59 1f       	adc	r21, r25
    363c:	8a 81       	ldd	r24, Y+2	; 0x02
    363e:	28 2f       	mov	r18, r24
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	8f 81       	ldd	r24, Y+7	; 0x07
    3644:	98 85       	ldd	r25, Y+8	; 0x08
    3646:	fc 01       	movw	r30, r24
    3648:	e2 0f       	add	r30, r18
    364a:	f3 1f       	adc	r31, r19
    364c:	80 81       	ld	r24, Z
    364e:	88 2f       	mov	r24, r24
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	84 0f       	add	r24, r20
    3654:	95 1f       	adc	r25, r21
    3656:	9e 83       	std	Y+6, r25	; 0x06
    3658:	8d 83       	std	Y+5, r24	; 0x05
}

uint16 calc_sum(uint8 a[],uint8 b[],uint8 n,uint8 m){
	uint16 num1=a[0];
	uint16 num2=b[0];
	for(uint8 counter=1;counter<n;counter++)
    365a:	8a 81       	ldd	r24, Y+2	; 0x02
    365c:	8f 5f       	subi	r24, 0xFF	; 255
    365e:	8a 83       	std	Y+2, r24	; 0x02
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	8b 85       	ldd	r24, Y+11	; 0x0b
    3664:	98 17       	cp	r25, r24
    3666:	e8 f2       	brcs	.-70     	; 0x3622 <calc_sum+0x42>
	{

		num1 = num1*10 +a[counter];
	}

	for(uint8 counter=1;counter<m;counter++)
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	89 83       	std	Y+1, r24	; 0x01
    366c:	1f c0       	rjmp	.+62     	; 0x36ac <calc_sum+0xcc>
	{
		num2= num2*10 +b[counter];
    366e:	8b 81       	ldd	r24, Y+3	; 0x03
    3670:	9c 81       	ldd	r25, Y+4	; 0x04
    3672:	9c 01       	movw	r18, r24
    3674:	22 0f       	add	r18, r18
    3676:	33 1f       	adc	r19, r19
    3678:	c9 01       	movw	r24, r18
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	88 0f       	add	r24, r24
    3680:	99 1f       	adc	r25, r25
    3682:	a9 01       	movw	r20, r18
    3684:	48 0f       	add	r20, r24
    3686:	59 1f       	adc	r21, r25
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	28 2f       	mov	r18, r24
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	89 85       	ldd	r24, Y+9	; 0x09
    3690:	9a 85       	ldd	r25, Y+10	; 0x0a
    3692:	fc 01       	movw	r30, r24
    3694:	e2 0f       	add	r30, r18
    3696:	f3 1f       	adc	r31, r19
    3698:	80 81       	ld	r24, Z
    369a:	88 2f       	mov	r24, r24
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	84 0f       	add	r24, r20
    36a0:	95 1f       	adc	r25, r21
    36a2:	9c 83       	std	Y+4, r25	; 0x04
    36a4:	8b 83       	std	Y+3, r24	; 0x03
	{

		num1 = num1*10 +a[counter];
	}

	for(uint8 counter=1;counter<m;counter++)
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
    36a8:	8f 5f       	subi	r24, 0xFF	; 255
    36aa:	89 83       	std	Y+1, r24	; 0x01
    36ac:	99 81       	ldd	r25, Y+1	; 0x01
    36ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    36b0:	98 17       	cp	r25, r24
    36b2:	e8 f2       	brcs	.-70     	; 0x366e <calc_sum+0x8e>
	{
		num2= num2*10 +b[counter];
	}

	return (num1+num2);
    36b4:	2d 81       	ldd	r18, Y+5	; 0x05
    36b6:	3e 81       	ldd	r19, Y+6	; 0x06
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	9c 81       	ldd	r25, Y+4	; 0x04
    36bc:	82 0f       	add	r24, r18
    36be:	93 1f       	adc	r25, r19
}
    36c0:	2c 96       	adiw	r28, 0x0c	; 12
    36c2:	0f b6       	in	r0, 0x3f	; 63
    36c4:	f8 94       	cli
    36c6:	de bf       	out	0x3e, r29	; 62
    36c8:	0f be       	out	0x3f, r0	; 63
    36ca:	cd bf       	out	0x3d, r28	; 61
    36cc:	cf 91       	pop	r28
    36ce:	df 91       	pop	r29
    36d0:	08 95       	ret

000036d2 <calc_sub>:

uint16 calc_sub(uint8 a[],uint8 b[],uint8 n,uint8 m){
    36d2:	df 93       	push	r29
    36d4:	cf 93       	push	r28
    36d6:	cd b7       	in	r28, 0x3d	; 61
    36d8:	de b7       	in	r29, 0x3e	; 62
    36da:	2c 97       	sbiw	r28, 0x0c	; 12
    36dc:	0f b6       	in	r0, 0x3f	; 63
    36de:	f8 94       	cli
    36e0:	de bf       	out	0x3e, r29	; 62
    36e2:	0f be       	out	0x3f, r0	; 63
    36e4:	cd bf       	out	0x3d, r28	; 61
    36e6:	98 87       	std	Y+8, r25	; 0x08
    36e8:	8f 83       	std	Y+7, r24	; 0x07
    36ea:	7a 87       	std	Y+10, r23	; 0x0a
    36ec:	69 87       	std	Y+9, r22	; 0x09
    36ee:	4b 87       	std	Y+11, r20	; 0x0b
    36f0:	2c 87       	std	Y+12, r18	; 0x0c
	uint16 num1=a[0];
    36f2:	ef 81       	ldd	r30, Y+7	; 0x07
    36f4:	f8 85       	ldd	r31, Y+8	; 0x08
    36f6:	80 81       	ld	r24, Z
    36f8:	88 2f       	mov	r24, r24
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	9e 83       	std	Y+6, r25	; 0x06
    36fe:	8d 83       	std	Y+5, r24	; 0x05
	uint16 num2=b[0];
    3700:	e9 85       	ldd	r30, Y+9	; 0x09
    3702:	fa 85       	ldd	r31, Y+10	; 0x0a
    3704:	80 81       	ld	r24, Z
    3706:	88 2f       	mov	r24, r24
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	9c 83       	std	Y+4, r25	; 0x04
    370c:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8 counter=1;counter<n;counter++)
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	8a 83       	std	Y+2, r24	; 0x02
    3712:	1f c0       	rjmp	.+62     	; 0x3752 <calc_sub+0x80>
	{
		num1 = num1*10 +a[counter];
    3714:	8d 81       	ldd	r24, Y+5	; 0x05
    3716:	9e 81       	ldd	r25, Y+6	; 0x06
    3718:	9c 01       	movw	r18, r24
    371a:	22 0f       	add	r18, r18
    371c:	33 1f       	adc	r19, r19
    371e:	c9 01       	movw	r24, r18
    3720:	88 0f       	add	r24, r24
    3722:	99 1f       	adc	r25, r25
    3724:	88 0f       	add	r24, r24
    3726:	99 1f       	adc	r25, r25
    3728:	a9 01       	movw	r20, r18
    372a:	48 0f       	add	r20, r24
    372c:	59 1f       	adc	r21, r25
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	28 2f       	mov	r18, r24
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	8f 81       	ldd	r24, Y+7	; 0x07
    3736:	98 85       	ldd	r25, Y+8	; 0x08
    3738:	fc 01       	movw	r30, r24
    373a:	e2 0f       	add	r30, r18
    373c:	f3 1f       	adc	r31, r19
    373e:	80 81       	ld	r24, Z
    3740:	88 2f       	mov	r24, r24
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	84 0f       	add	r24, r20
    3746:	95 1f       	adc	r25, r21
    3748:	9e 83       	std	Y+6, r25	; 0x06
    374a:	8d 83       	std	Y+5, r24	; 0x05
}

uint16 calc_sub(uint8 a[],uint8 b[],uint8 n,uint8 m){
	uint16 num1=a[0];
	uint16 num2=b[0];
	for(uint8 counter=1;counter<n;counter++)
    374c:	8a 81       	ldd	r24, Y+2	; 0x02
    374e:	8f 5f       	subi	r24, 0xFF	; 255
    3750:	8a 83       	std	Y+2, r24	; 0x02
    3752:	9a 81       	ldd	r25, Y+2	; 0x02
    3754:	8b 85       	ldd	r24, Y+11	; 0x0b
    3756:	98 17       	cp	r25, r24
    3758:	e8 f2       	brcs	.-70     	; 0x3714 <calc_sub+0x42>
	{
		num1 = num1*10 +a[counter];
	}

	for(uint8 counter=1;counter<m;counter++)
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	89 83       	std	Y+1, r24	; 0x01
    375e:	1f c0       	rjmp	.+62     	; 0x379e <calc_sub+0xcc>
	{
		num2= num2*10 +b[counter];
    3760:	8b 81       	ldd	r24, Y+3	; 0x03
    3762:	9c 81       	ldd	r25, Y+4	; 0x04
    3764:	9c 01       	movw	r18, r24
    3766:	22 0f       	add	r18, r18
    3768:	33 1f       	adc	r19, r19
    376a:	c9 01       	movw	r24, r18
    376c:	88 0f       	add	r24, r24
    376e:	99 1f       	adc	r25, r25
    3770:	88 0f       	add	r24, r24
    3772:	99 1f       	adc	r25, r25
    3774:	a9 01       	movw	r20, r18
    3776:	48 0f       	add	r20, r24
    3778:	59 1f       	adc	r21, r25
    377a:	89 81       	ldd	r24, Y+1	; 0x01
    377c:	28 2f       	mov	r18, r24
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	89 85       	ldd	r24, Y+9	; 0x09
    3782:	9a 85       	ldd	r25, Y+10	; 0x0a
    3784:	fc 01       	movw	r30, r24
    3786:	e2 0f       	add	r30, r18
    3788:	f3 1f       	adc	r31, r19
    378a:	80 81       	ld	r24, Z
    378c:	88 2f       	mov	r24, r24
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	84 0f       	add	r24, r20
    3792:	95 1f       	adc	r25, r21
    3794:	9c 83       	std	Y+4, r25	; 0x04
    3796:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8 counter=1;counter<n;counter++)
	{
		num1 = num1*10 +a[counter];
	}

	for(uint8 counter=1;counter<m;counter++)
    3798:	89 81       	ldd	r24, Y+1	; 0x01
    379a:	8f 5f       	subi	r24, 0xFF	; 255
    379c:	89 83       	std	Y+1, r24	; 0x01
    379e:	99 81       	ldd	r25, Y+1	; 0x01
    37a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    37a2:	98 17       	cp	r25, r24
    37a4:	e8 f2       	brcs	.-70     	; 0x3760 <calc_sub+0x8e>
	{
		num2= num2*10 +b[counter];
	}

	return (num1-num2);
    37a6:	2d 81       	ldd	r18, Y+5	; 0x05
    37a8:	3e 81       	ldd	r19, Y+6	; 0x06
    37aa:	8b 81       	ldd	r24, Y+3	; 0x03
    37ac:	9c 81       	ldd	r25, Y+4	; 0x04
    37ae:	a9 01       	movw	r20, r18
    37b0:	48 1b       	sub	r20, r24
    37b2:	59 0b       	sbc	r21, r25
    37b4:	ca 01       	movw	r24, r20
}
    37b6:	2c 96       	adiw	r28, 0x0c	; 12
    37b8:	0f b6       	in	r0, 0x3f	; 63
    37ba:	f8 94       	cli
    37bc:	de bf       	out	0x3e, r29	; 62
    37be:	0f be       	out	0x3f, r0	; 63
    37c0:	cd bf       	out	0x3d, r28	; 61
    37c2:	cf 91       	pop	r28
    37c4:	df 91       	pop	r29
    37c6:	08 95       	ret

000037c8 <calc_multi>:

uint16 calc_multi(uint8 a[],uint8 b[],uint8 n,uint8 m){
    37c8:	df 93       	push	r29
    37ca:	cf 93       	push	r28
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	2c 97       	sbiw	r28, 0x0c	; 12
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	f8 94       	cli
    37d6:	de bf       	out	0x3e, r29	; 62
    37d8:	0f be       	out	0x3f, r0	; 63
    37da:	cd bf       	out	0x3d, r28	; 61
    37dc:	98 87       	std	Y+8, r25	; 0x08
    37de:	8f 83       	std	Y+7, r24	; 0x07
    37e0:	7a 87       	std	Y+10, r23	; 0x0a
    37e2:	69 87       	std	Y+9, r22	; 0x09
    37e4:	4b 87       	std	Y+11, r20	; 0x0b
    37e6:	2c 87       	std	Y+12, r18	; 0x0c
	uint16 num1=a[0];
    37e8:	ef 81       	ldd	r30, Y+7	; 0x07
    37ea:	f8 85       	ldd	r31, Y+8	; 0x08
    37ec:	80 81       	ld	r24, Z
    37ee:	88 2f       	mov	r24, r24
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	9e 83       	std	Y+6, r25	; 0x06
    37f4:	8d 83       	std	Y+5, r24	; 0x05
	uint16 num2=b[0];
    37f6:	e9 85       	ldd	r30, Y+9	; 0x09
    37f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    37fa:	80 81       	ld	r24, Z
    37fc:	88 2f       	mov	r24, r24
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	9c 83       	std	Y+4, r25	; 0x04
    3802:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8 counter=1;counter<n;counter++)
    3804:	81 e0       	ldi	r24, 0x01	; 1
    3806:	8a 83       	std	Y+2, r24	; 0x02
    3808:	1f c0       	rjmp	.+62     	; 0x3848 <calc_multi+0x80>
	{
		num1 = num1*10 +a[counter];
    380a:	8d 81       	ldd	r24, Y+5	; 0x05
    380c:	9e 81       	ldd	r25, Y+6	; 0x06
    380e:	9c 01       	movw	r18, r24
    3810:	22 0f       	add	r18, r18
    3812:	33 1f       	adc	r19, r19
    3814:	c9 01       	movw	r24, r18
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	88 0f       	add	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	a9 01       	movw	r20, r18
    3820:	48 0f       	add	r20, r24
    3822:	59 1f       	adc	r21, r25
    3824:	8a 81       	ldd	r24, Y+2	; 0x02
    3826:	28 2f       	mov	r18, r24
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	8f 81       	ldd	r24, Y+7	; 0x07
    382c:	98 85       	ldd	r25, Y+8	; 0x08
    382e:	fc 01       	movw	r30, r24
    3830:	e2 0f       	add	r30, r18
    3832:	f3 1f       	adc	r31, r19
    3834:	80 81       	ld	r24, Z
    3836:	88 2f       	mov	r24, r24
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	84 0f       	add	r24, r20
    383c:	95 1f       	adc	r25, r21
    383e:	9e 83       	std	Y+6, r25	; 0x06
    3840:	8d 83       	std	Y+5, r24	; 0x05
}

uint16 calc_multi(uint8 a[],uint8 b[],uint8 n,uint8 m){
	uint16 num1=a[0];
	uint16 num2=b[0];
	for(uint8 counter=1;counter<n;counter++)
    3842:	8a 81       	ldd	r24, Y+2	; 0x02
    3844:	8f 5f       	subi	r24, 0xFF	; 255
    3846:	8a 83       	std	Y+2, r24	; 0x02
    3848:	9a 81       	ldd	r25, Y+2	; 0x02
    384a:	8b 85       	ldd	r24, Y+11	; 0x0b
    384c:	98 17       	cp	r25, r24
    384e:	e8 f2       	brcs	.-70     	; 0x380a <calc_multi+0x42>
	{
		num1 = num1*10 +a[counter];
	}

	for(uint8 counter=1;counter<m;counter++)
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	89 83       	std	Y+1, r24	; 0x01
    3854:	1f c0       	rjmp	.+62     	; 0x3894 <calc_multi+0xcc>
	{
		num2= num2*10 +b[counter];
    3856:	8b 81       	ldd	r24, Y+3	; 0x03
    3858:	9c 81       	ldd	r25, Y+4	; 0x04
    385a:	9c 01       	movw	r18, r24
    385c:	22 0f       	add	r18, r18
    385e:	33 1f       	adc	r19, r19
    3860:	c9 01       	movw	r24, r18
    3862:	88 0f       	add	r24, r24
    3864:	99 1f       	adc	r25, r25
    3866:	88 0f       	add	r24, r24
    3868:	99 1f       	adc	r25, r25
    386a:	a9 01       	movw	r20, r18
    386c:	48 0f       	add	r20, r24
    386e:	59 1f       	adc	r21, r25
    3870:	89 81       	ldd	r24, Y+1	; 0x01
    3872:	28 2f       	mov	r18, r24
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	89 85       	ldd	r24, Y+9	; 0x09
    3878:	9a 85       	ldd	r25, Y+10	; 0x0a
    387a:	fc 01       	movw	r30, r24
    387c:	e2 0f       	add	r30, r18
    387e:	f3 1f       	adc	r31, r19
    3880:	80 81       	ld	r24, Z
    3882:	88 2f       	mov	r24, r24
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	84 0f       	add	r24, r20
    3888:	95 1f       	adc	r25, r21
    388a:	9c 83       	std	Y+4, r25	; 0x04
    388c:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8 counter=1;counter<n;counter++)
	{
		num1 = num1*10 +a[counter];
	}

	for(uint8 counter=1;counter<m;counter++)
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	8f 5f       	subi	r24, 0xFF	; 255
    3892:	89 83       	std	Y+1, r24	; 0x01
    3894:	99 81       	ldd	r25, Y+1	; 0x01
    3896:	8c 85       	ldd	r24, Y+12	; 0x0c
    3898:	98 17       	cp	r25, r24
    389a:	e8 f2       	brcs	.-70     	; 0x3856 <calc_multi+0x8e>
	{
		num2= num2*10 +b[counter];
	}

	return (num1*num2);
    389c:	2d 81       	ldd	r18, Y+5	; 0x05
    389e:	3e 81       	ldd	r19, Y+6	; 0x06
    38a0:	8b 81       	ldd	r24, Y+3	; 0x03
    38a2:	9c 81       	ldd	r25, Y+4	; 0x04
    38a4:	ac 01       	movw	r20, r24
    38a6:	24 9f       	mul	r18, r20
    38a8:	c0 01       	movw	r24, r0
    38aa:	25 9f       	mul	r18, r21
    38ac:	90 0d       	add	r25, r0
    38ae:	34 9f       	mul	r19, r20
    38b0:	90 0d       	add	r25, r0
    38b2:	11 24       	eor	r1, r1
}
    38b4:	2c 96       	adiw	r28, 0x0c	; 12
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	cf 91       	pop	r28
    38c2:	df 91       	pop	r29
    38c4:	08 95       	ret

000038c6 <calc_div>:

uint16 calc_div(uint8 a[],uint8 b[],uint8 n,uint8 m){
    38c6:	df 93       	push	r29
    38c8:	cf 93       	push	r28
    38ca:	cd b7       	in	r28, 0x3d	; 61
    38cc:	de b7       	in	r29, 0x3e	; 62
    38ce:	2c 97       	sbiw	r28, 0x0c	; 12
    38d0:	0f b6       	in	r0, 0x3f	; 63
    38d2:	f8 94       	cli
    38d4:	de bf       	out	0x3e, r29	; 62
    38d6:	0f be       	out	0x3f, r0	; 63
    38d8:	cd bf       	out	0x3d, r28	; 61
    38da:	98 87       	std	Y+8, r25	; 0x08
    38dc:	8f 83       	std	Y+7, r24	; 0x07
    38de:	7a 87       	std	Y+10, r23	; 0x0a
    38e0:	69 87       	std	Y+9, r22	; 0x09
    38e2:	4b 87       	std	Y+11, r20	; 0x0b
    38e4:	2c 87       	std	Y+12, r18	; 0x0c
	uint16 num1=a[0];
    38e6:	ef 81       	ldd	r30, Y+7	; 0x07
    38e8:	f8 85       	ldd	r31, Y+8	; 0x08
    38ea:	80 81       	ld	r24, Z
    38ec:	88 2f       	mov	r24, r24
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	9e 83       	std	Y+6, r25	; 0x06
    38f2:	8d 83       	std	Y+5, r24	; 0x05
	uint16 num2=b[0];
    38f4:	e9 85       	ldd	r30, Y+9	; 0x09
    38f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    38f8:	80 81       	ld	r24, Z
    38fa:	88 2f       	mov	r24, r24
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	9c 83       	std	Y+4, r25	; 0x04
    3900:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8 counter=1;counter<n;counter++)
    3902:	81 e0       	ldi	r24, 0x01	; 1
    3904:	8a 83       	std	Y+2, r24	; 0x02
    3906:	1f c0       	rjmp	.+62     	; 0x3946 <calc_div+0x80>
	{
		num1 = num1*10 +a[counter];
    3908:	8d 81       	ldd	r24, Y+5	; 0x05
    390a:	9e 81       	ldd	r25, Y+6	; 0x06
    390c:	9c 01       	movw	r18, r24
    390e:	22 0f       	add	r18, r18
    3910:	33 1f       	adc	r19, r19
    3912:	c9 01       	movw	r24, r18
    3914:	88 0f       	add	r24, r24
    3916:	99 1f       	adc	r25, r25
    3918:	88 0f       	add	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	a9 01       	movw	r20, r18
    391e:	48 0f       	add	r20, r24
    3920:	59 1f       	adc	r21, r25
    3922:	8a 81       	ldd	r24, Y+2	; 0x02
    3924:	28 2f       	mov	r18, r24
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	8f 81       	ldd	r24, Y+7	; 0x07
    392a:	98 85       	ldd	r25, Y+8	; 0x08
    392c:	fc 01       	movw	r30, r24
    392e:	e2 0f       	add	r30, r18
    3930:	f3 1f       	adc	r31, r19
    3932:	80 81       	ld	r24, Z
    3934:	88 2f       	mov	r24, r24
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	84 0f       	add	r24, r20
    393a:	95 1f       	adc	r25, r21
    393c:	9e 83       	std	Y+6, r25	; 0x06
    393e:	8d 83       	std	Y+5, r24	; 0x05
}

uint16 calc_div(uint8 a[],uint8 b[],uint8 n,uint8 m){
	uint16 num1=a[0];
	uint16 num2=b[0];
	for(uint8 counter=1;counter<n;counter++)
    3940:	8a 81       	ldd	r24, Y+2	; 0x02
    3942:	8f 5f       	subi	r24, 0xFF	; 255
    3944:	8a 83       	std	Y+2, r24	; 0x02
    3946:	9a 81       	ldd	r25, Y+2	; 0x02
    3948:	8b 85       	ldd	r24, Y+11	; 0x0b
    394a:	98 17       	cp	r25, r24
    394c:	e8 f2       	brcs	.-70     	; 0x3908 <calc_div+0x42>
	{
		num1 = num1*10 +a[counter];
	}

	for(uint8 counter=1;counter<m;counter++)
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	89 83       	std	Y+1, r24	; 0x01
    3952:	1f c0       	rjmp	.+62     	; 0x3992 <calc_div+0xcc>
	{
		num2= num2*10 +b[counter];
    3954:	8b 81       	ldd	r24, Y+3	; 0x03
    3956:	9c 81       	ldd	r25, Y+4	; 0x04
    3958:	9c 01       	movw	r18, r24
    395a:	22 0f       	add	r18, r18
    395c:	33 1f       	adc	r19, r19
    395e:	c9 01       	movw	r24, r18
    3960:	88 0f       	add	r24, r24
    3962:	99 1f       	adc	r25, r25
    3964:	88 0f       	add	r24, r24
    3966:	99 1f       	adc	r25, r25
    3968:	a9 01       	movw	r20, r18
    396a:	48 0f       	add	r20, r24
    396c:	59 1f       	adc	r21, r25
    396e:	89 81       	ldd	r24, Y+1	; 0x01
    3970:	28 2f       	mov	r18, r24
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	89 85       	ldd	r24, Y+9	; 0x09
    3976:	9a 85       	ldd	r25, Y+10	; 0x0a
    3978:	fc 01       	movw	r30, r24
    397a:	e2 0f       	add	r30, r18
    397c:	f3 1f       	adc	r31, r19
    397e:	80 81       	ld	r24, Z
    3980:	88 2f       	mov	r24, r24
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	84 0f       	add	r24, r20
    3986:	95 1f       	adc	r25, r21
    3988:	9c 83       	std	Y+4, r25	; 0x04
    398a:	8b 83       	std	Y+3, r24	; 0x03
	for(uint8 counter=1;counter<n;counter++)
	{
		num1 = num1*10 +a[counter];
	}

	for(uint8 counter=1;counter<m;counter++)
    398c:	89 81       	ldd	r24, Y+1	; 0x01
    398e:	8f 5f       	subi	r24, 0xFF	; 255
    3990:	89 83       	std	Y+1, r24	; 0x01
    3992:	99 81       	ldd	r25, Y+1	; 0x01
    3994:	8c 85       	ldd	r24, Y+12	; 0x0c
    3996:	98 17       	cp	r25, r24
    3998:	e8 f2       	brcs	.-70     	; 0x3954 <calc_div+0x8e>
	{
		num2= num2*10 +b[counter];
	}

	return (num1/num2);
    399a:	8d 81       	ldd	r24, Y+5	; 0x05
    399c:	9e 81       	ldd	r25, Y+6	; 0x06
    399e:	2b 81       	ldd	r18, Y+3	; 0x03
    39a0:	3c 81       	ldd	r19, Y+4	; 0x04
    39a2:	b9 01       	movw	r22, r18
    39a4:	0e 94 de 1c 	call	0x39bc	; 0x39bc <__udivmodhi4>
    39a8:	cb 01       	movw	r24, r22
}
    39aa:	2c 96       	adiw	r28, 0x0c	; 12
    39ac:	0f b6       	in	r0, 0x3f	; 63
    39ae:	f8 94       	cli
    39b0:	de bf       	out	0x3e, r29	; 62
    39b2:	0f be       	out	0x3f, r0	; 63
    39b4:	cd bf       	out	0x3d, r28	; 61
    39b6:	cf 91       	pop	r28
    39b8:	df 91       	pop	r29
    39ba:	08 95       	ret

000039bc <__udivmodhi4>:
    39bc:	aa 1b       	sub	r26, r26
    39be:	bb 1b       	sub	r27, r27
    39c0:	51 e1       	ldi	r21, 0x11	; 17
    39c2:	07 c0       	rjmp	.+14     	; 0x39d2 <__udivmodhi4_ep>

000039c4 <__udivmodhi4_loop>:
    39c4:	aa 1f       	adc	r26, r26
    39c6:	bb 1f       	adc	r27, r27
    39c8:	a6 17       	cp	r26, r22
    39ca:	b7 07       	cpc	r27, r23
    39cc:	10 f0       	brcs	.+4      	; 0x39d2 <__udivmodhi4_ep>
    39ce:	a6 1b       	sub	r26, r22
    39d0:	b7 0b       	sbc	r27, r23

000039d2 <__udivmodhi4_ep>:
    39d2:	88 1f       	adc	r24, r24
    39d4:	99 1f       	adc	r25, r25
    39d6:	5a 95       	dec	r21
    39d8:	a9 f7       	brne	.-22     	; 0x39c4 <__udivmodhi4_loop>
    39da:	80 95       	com	r24
    39dc:	90 95       	com	r25
    39de:	bc 01       	movw	r22, r24
    39e0:	cd 01       	movw	r24, r26
    39e2:	08 95       	ret

000039e4 <__udivmodsi4>:
    39e4:	a1 e2       	ldi	r26, 0x21	; 33
    39e6:	1a 2e       	mov	r1, r26
    39e8:	aa 1b       	sub	r26, r26
    39ea:	bb 1b       	sub	r27, r27
    39ec:	fd 01       	movw	r30, r26
    39ee:	0d c0       	rjmp	.+26     	; 0x3a0a <__udivmodsi4_ep>

000039f0 <__udivmodsi4_loop>:
    39f0:	aa 1f       	adc	r26, r26
    39f2:	bb 1f       	adc	r27, r27
    39f4:	ee 1f       	adc	r30, r30
    39f6:	ff 1f       	adc	r31, r31
    39f8:	a2 17       	cp	r26, r18
    39fa:	b3 07       	cpc	r27, r19
    39fc:	e4 07       	cpc	r30, r20
    39fe:	f5 07       	cpc	r31, r21
    3a00:	20 f0       	brcs	.+8      	; 0x3a0a <__udivmodsi4_ep>
    3a02:	a2 1b       	sub	r26, r18
    3a04:	b3 0b       	sbc	r27, r19
    3a06:	e4 0b       	sbc	r30, r20
    3a08:	f5 0b       	sbc	r31, r21

00003a0a <__udivmodsi4_ep>:
    3a0a:	66 1f       	adc	r22, r22
    3a0c:	77 1f       	adc	r23, r23
    3a0e:	88 1f       	adc	r24, r24
    3a10:	99 1f       	adc	r25, r25
    3a12:	1a 94       	dec	r1
    3a14:	69 f7       	brne	.-38     	; 0x39f0 <__udivmodsi4_loop>
    3a16:	60 95       	com	r22
    3a18:	70 95       	com	r23
    3a1a:	80 95       	com	r24
    3a1c:	90 95       	com	r25
    3a1e:	9b 01       	movw	r18, r22
    3a20:	ac 01       	movw	r20, r24
    3a22:	bd 01       	movw	r22, r26
    3a24:	cf 01       	movw	r24, r30
    3a26:	08 95       	ret

00003a28 <__prologue_saves__>:
    3a28:	2f 92       	push	r2
    3a2a:	3f 92       	push	r3
    3a2c:	4f 92       	push	r4
    3a2e:	5f 92       	push	r5
    3a30:	6f 92       	push	r6
    3a32:	7f 92       	push	r7
    3a34:	8f 92       	push	r8
    3a36:	9f 92       	push	r9
    3a38:	af 92       	push	r10
    3a3a:	bf 92       	push	r11
    3a3c:	cf 92       	push	r12
    3a3e:	df 92       	push	r13
    3a40:	ef 92       	push	r14
    3a42:	ff 92       	push	r15
    3a44:	0f 93       	push	r16
    3a46:	1f 93       	push	r17
    3a48:	cf 93       	push	r28
    3a4a:	df 93       	push	r29
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	ca 1b       	sub	r28, r26
    3a52:	db 0b       	sbc	r29, r27
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	f8 94       	cli
    3a58:	de bf       	out	0x3e, r29	; 62
    3a5a:	0f be       	out	0x3f, r0	; 63
    3a5c:	cd bf       	out	0x3d, r28	; 61
    3a5e:	09 94       	ijmp

00003a60 <__epilogue_restores__>:
    3a60:	2a 88       	ldd	r2, Y+18	; 0x12
    3a62:	39 88       	ldd	r3, Y+17	; 0x11
    3a64:	48 88       	ldd	r4, Y+16	; 0x10
    3a66:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a68:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a70:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a72:	b9 84       	ldd	r11, Y+9	; 0x09
    3a74:	c8 84       	ldd	r12, Y+8	; 0x08
    3a76:	df 80       	ldd	r13, Y+7	; 0x07
    3a78:	ee 80       	ldd	r14, Y+6	; 0x06
    3a7a:	fd 80       	ldd	r15, Y+5	; 0x05
    3a7c:	0c 81       	ldd	r16, Y+4	; 0x04
    3a7e:	1b 81       	ldd	r17, Y+3	; 0x03
    3a80:	aa 81       	ldd	r26, Y+2	; 0x02
    3a82:	b9 81       	ldd	r27, Y+1	; 0x01
    3a84:	ce 0f       	add	r28, r30
    3a86:	d1 1d       	adc	r29, r1
    3a88:	0f b6       	in	r0, 0x3f	; 63
    3a8a:	f8 94       	cli
    3a8c:	de bf       	out	0x3e, r29	; 62
    3a8e:	0f be       	out	0x3f, r0	; 63
    3a90:	cd bf       	out	0x3d, r28	; 61
    3a92:	ed 01       	movw	r28, r26
    3a94:	08 95       	ret

00003a96 <_exit>:
    3a96:	f8 94       	cli

00003a98 <__stop_program>:
    3a98:	ff cf       	rjmp	.-2      	; 0x3a98 <__stop_program>
