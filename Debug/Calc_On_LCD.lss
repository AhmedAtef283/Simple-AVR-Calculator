
Calc_On_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e6a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00002e6a  00002efe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080009c  0080009c  00002f3a  2**0
                  ALLOC
  3 .stab         00002100  00000000  00000000  00002f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ede  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000607a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006209  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000824e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000934f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a2d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a454  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a716  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000afa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3a       	cpi	r26, 0xA4	; 164
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <main>
      8a:	0c 94 33 17 	jmp	0x2e66	; 0x2e66 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e8       	ldi	r26, 0x82	; 130
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fc 16 	jmp	0x2df8	; 0x2df8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e8       	ldi	r24, 0x82	; 130
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e8       	ldi	r22, 0x82	; 130
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 24 17 	jmp	0x2e48	; 0x2e48 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0c 17 	jmp	0x2e18	; 0x2e18 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 28 17 	jmp	0x2e50	; 0x2e50 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Dio_PinMode>:
#include "Dio.h"


void Dio_PinMode(u8 ch, u8 Mode)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2a 97       	sbiw	r28, 0x0a	; 10
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8b 83       	std	Y+3, r24	; 0x03
     cb4:	6c 83       	std	Y+4, r22	; 0x04
	u8	port	= ch / 10;
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	9a e0       	ldi	r25, 0x0A	; 10
     cba:	69 2f       	mov	r22, r25
     cbc:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__udivmodqi4>
     cc0:	8a 83       	std	Y+2, r24	; 0x02
	u8	pin		= ch % 10;
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	9a e0       	ldi	r25, 0x0A	; 10
     cc6:	69 2f       	mov	r22, r25
     cc8:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__udivmodqi4>
     ccc:	89 2f       	mov	r24, r25
     cce:	89 83       	std	Y+1, r24	; 0x01

	switch (Mode){
     cd0:	8c 81       	ldd	r24, Y+4	; 0x04
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	3a 87       	std	Y+10, r19	; 0x0a
     cd8:	29 87       	std	Y+9, r18	; 0x09
     cda:	89 85       	ldd	r24, Y+9	; 0x09
     cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	91 05       	cpc	r25, r1
     ce2:	39 f0       	breq	.+14     	; 0xcf2 <Dio_PinMode+0x54>
     ce4:	29 85       	ldd	r18, Y+9	; 0x09
     ce6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	31 05       	cpc	r19, r1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <Dio_PinMode+0x52>
     cee:	71 c0       	rjmp	.+226    	; 0xdd2 <Dio_PinMode+0x134>
     cf0:	e4 c0       	rjmp	.+456    	; 0xeba <Dio_PinMode+0x21c>
		case OUTPUT:
			switch(port){
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	38 87       	std	Y+8, r19	; 0x08
     cfa:	2f 83       	std	Y+7, r18	; 0x07
     cfc:	8f 81       	ldd	r24, Y+7	; 0x07
     cfe:	98 85       	ldd	r25, Y+8	; 0x08
     d00:	82 30       	cpi	r24, 0x02	; 2
     d02:	91 05       	cpc	r25, r1
     d04:	51 f1       	breq	.+84     	; 0xd5a <Dio_PinMode+0xbc>
     d06:	2f 81       	ldd	r18, Y+7	; 0x07
     d08:	38 85       	ldd	r19, Y+8	; 0x08
     d0a:	23 30       	cpi	r18, 0x03	; 3
     d0c:	31 05       	cpc	r19, r1
     d0e:	34 f4       	brge	.+12     	; 0xd1c <Dio_PinMode+0x7e>
     d10:	8f 81       	ldd	r24, Y+7	; 0x07
     d12:	98 85       	ldd	r25, Y+8	; 0x08
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	91 05       	cpc	r25, r1
     d18:	61 f0       	breq	.+24     	; 0xd32 <Dio_PinMode+0x94>
     d1a:	cf c0       	rjmp	.+414    	; 0xeba <Dio_PinMode+0x21c>
     d1c:	2f 81       	ldd	r18, Y+7	; 0x07
     d1e:	38 85       	ldd	r19, Y+8	; 0x08
     d20:	23 30       	cpi	r18, 0x03	; 3
     d22:	31 05       	cpc	r19, r1
     d24:	71 f1       	breq	.+92     	; 0xd82 <Dio_PinMode+0xe4>
     d26:	8f 81       	ldd	r24, Y+7	; 0x07
     d28:	98 85       	ldd	r25, Y+8	; 0x08
     d2a:	84 30       	cpi	r24, 0x04	; 4
     d2c:	91 05       	cpc	r25, r1
     d2e:	e9 f1       	breq	.+122    	; 0xdaa <Dio_PinMode+0x10c>
     d30:	c4 c0       	rjmp	.+392    	; 0xeba <Dio_PinMode+0x21c>
				case 1: Set_bit(DDRA, pin);	break;
     d32:	aa e3       	ldi	r26, 0x3A	; 58
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	ea e3       	ldi	r30, 0x3A	; 58
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <Dio_PinMode+0xb2>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <Dio_PinMode+0xae>
     d54:	84 2b       	or	r24, r20
     d56:	8c 93       	st	X, r24
     d58:	b0 c0       	rjmp	.+352    	; 0xeba <Dio_PinMode+0x21c>
				case 2: Set_bit(DDRB, pin);	break;
     d5a:	a7 e3       	ldi	r26, 0x37	; 55
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e7 e3       	ldi	r30, 0x37	; 55
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <Dio_PinMode+0xda>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <Dio_PinMode+0xd6>
     d7c:	84 2b       	or	r24, r20
     d7e:	8c 93       	st	X, r24
     d80:	9c c0       	rjmp	.+312    	; 0xeba <Dio_PinMode+0x21c>
				case 3: Set_bit(DDRC, pin);	break;
     d82:	a4 e3       	ldi	r26, 0x34	; 52
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e4 e3       	ldi	r30, 0x34	; 52
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <Dio_PinMode+0x102>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <Dio_PinMode+0xfe>
     da4:	84 2b       	or	r24, r20
     da6:	8c 93       	st	X, r24
     da8:	88 c0       	rjmp	.+272    	; 0xeba <Dio_PinMode+0x21c>
				case 4: Set_bit(DDRD, pin);	break;
     daa:	a1 e3       	ldi	r26, 0x31	; 49
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e1 e3       	ldi	r30, 0x31	; 49
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <Dio_PinMode+0x12a>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <Dio_PinMode+0x126>
     dcc:	84 2b       	or	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	74 c0       	rjmp	.+232    	; 0xeba <Dio_PinMode+0x21c>
				default:					break;
			}
			break;
		case INPUT:
			switch(port){
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	3e 83       	std	Y+6, r19	; 0x06
     dda:	2d 83       	std	Y+5, r18	; 0x05
     ddc:	8d 81       	ldd	r24, Y+5	; 0x05
     dde:	9e 81       	ldd	r25, Y+6	; 0x06
     de0:	82 30       	cpi	r24, 0x02	; 2
     de2:	91 05       	cpc	r25, r1
     de4:	61 f1       	breq	.+88     	; 0xe3e <Dio_PinMode+0x1a0>
     de6:	2d 81       	ldd	r18, Y+5	; 0x05
     de8:	3e 81       	ldd	r19, Y+6	; 0x06
     dea:	23 30       	cpi	r18, 0x03	; 3
     dec:	31 05       	cpc	r19, r1
     dee:	34 f4       	brge	.+12     	; 0xdfc <Dio_PinMode+0x15e>
     df0:	8d 81       	ldd	r24, Y+5	; 0x05
     df2:	9e 81       	ldd	r25, Y+6	; 0x06
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	91 05       	cpc	r25, r1
     df8:	69 f0       	breq	.+26     	; 0xe14 <Dio_PinMode+0x176>
     dfa:	5f c0       	rjmp	.+190    	; 0xeba <Dio_PinMode+0x21c>
     dfc:	2d 81       	ldd	r18, Y+5	; 0x05
     dfe:	3e 81       	ldd	r19, Y+6	; 0x06
     e00:	23 30       	cpi	r18, 0x03	; 3
     e02:	31 05       	cpc	r19, r1
     e04:	89 f1       	breq	.+98     	; 0xe68 <Dio_PinMode+0x1ca>
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	9e 81       	ldd	r25, Y+6	; 0x06
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	91 05       	cpc	r25, r1
     e0e:	09 f4       	brne	.+2      	; 0xe12 <Dio_PinMode+0x174>
     e10:	40 c0       	rjmp	.+128    	; 0xe92 <Dio_PinMode+0x1f4>
     e12:	53 c0       	rjmp	.+166    	; 0xeba <Dio_PinMode+0x21c>
				case 1: Clr_bit(DDRA, pin);	break;
     e14:	aa e3       	ldi	r26, 0x3A	; 58
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	ea e3       	ldi	r30, 0x3A	; 58
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <Dio_PinMode+0x194>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <Dio_PinMode+0x190>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	3e c0       	rjmp	.+124    	; 0xeba <Dio_PinMode+0x21c>
				case 2: Clr_bit(DDRB, pin);	break;
     e3e:	a7 e3       	ldi	r26, 0x37	; 55
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e7 e3       	ldi	r30, 0x37	; 55
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <Dio_PinMode+0x1be>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <Dio_PinMode+0x1ba>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	29 c0       	rjmp	.+82     	; 0xeba <Dio_PinMode+0x21c>
				case 3: Clr_bit(DDRC, pin);	break;
     e68:	a4 e3       	ldi	r26, 0x34	; 52
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e4 e3       	ldi	r30, 0x34	; 52
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <Dio_PinMode+0x1e8>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <Dio_PinMode+0x1e4>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	14 c0       	rjmp	.+40     	; 0xeba <Dio_PinMode+0x21c>
				case 4: Clr_bit(DDRD, pin);	break;
     e92:	a1 e3       	ldi	r26, 0x31	; 49
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e1 e3       	ldi	r30, 0x31	; 49
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <Dio_PinMode+0x212>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <Dio_PinMode+0x20e>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
				default:					break;
			}
			break;
		default: break;
	}
}
     eba:	2a 96       	adiw	r28, 0x0a	; 10
     ebc:	0f b6       	in	r0, 0x3f	; 63
     ebe:	f8 94       	cli
     ec0:	de bf       	out	0x3e, r29	; 62
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	cd bf       	out	0x3d, r28	; 61
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <Dio_PortMode>:

void Dio_PortMode(u8 Port , u8 Mode)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
     ed4:	28 97       	sbiw	r28, 0x08	; 8
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	89 83       	std	Y+1, r24	; 0x01
     ee2:	6a 83       	std	Y+2, r22	; 0x02

	switch (Mode){
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	38 87       	std	Y+8, r19	; 0x08
     eec:	2f 83       	std	Y+7, r18	; 0x07
     eee:	8f 81       	ldd	r24, Y+7	; 0x07
     ef0:	98 85       	ldd	r25, Y+8	; 0x08
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	91 05       	cpc	r25, r1
     ef6:	31 f0       	breq	.+12     	; 0xf04 <Dio_PortMode+0x38>
     ef8:	2f 81       	ldd	r18, Y+7	; 0x07
     efa:	38 85       	ldd	r19, Y+8	; 0x08
     efc:	22 30       	cpi	r18, 0x02	; 2
     efe:	31 05       	cpc	r19, r1
     f00:	a9 f1       	breq	.+106    	; 0xf6c <Dio_PortMode+0xa0>
     f02:	63 c0       	rjmp	.+198    	; 0xfca <Dio_PortMode+0xfe>

		case OUTPUT:
			switch(Port){
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	3e 83       	std	Y+6, r19	; 0x06
     f0c:	2d 83       	std	Y+5, r18	; 0x05
     f0e:	8d 81       	ldd	r24, Y+5	; 0x05
     f10:	9e 81       	ldd	r25, Y+6	; 0x06
     f12:	82 30       	cpi	r24, 0x02	; 2
     f14:	91 05       	cpc	r25, r1
     f16:	d9 f0       	breq	.+54     	; 0xf4e <Dio_PortMode+0x82>
     f18:	2d 81       	ldd	r18, Y+5	; 0x05
     f1a:	3e 81       	ldd	r19, Y+6	; 0x06
     f1c:	23 30       	cpi	r18, 0x03	; 3
     f1e:	31 05       	cpc	r19, r1
     f20:	34 f4       	brge	.+12     	; 0xf2e <Dio_PortMode+0x62>
     f22:	8d 81       	ldd	r24, Y+5	; 0x05
     f24:	9e 81       	ldd	r25, Y+6	; 0x06
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	91 05       	cpc	r25, r1
     f2a:	61 f0       	breq	.+24     	; 0xf44 <Dio_PortMode+0x78>
     f2c:	4e c0       	rjmp	.+156    	; 0xfca <Dio_PortMode+0xfe>
     f2e:	2d 81       	ldd	r18, Y+5	; 0x05
     f30:	3e 81       	ldd	r19, Y+6	; 0x06
     f32:	23 30       	cpi	r18, 0x03	; 3
     f34:	31 05       	cpc	r19, r1
     f36:	81 f0       	breq	.+32     	; 0xf58 <Dio_PortMode+0x8c>
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	9e 81       	ldd	r25, Y+6	; 0x06
     f3c:	84 30       	cpi	r24, 0x04	; 4
     f3e:	91 05       	cpc	r25, r1
     f40:	81 f0       	breq	.+32     	; 0xf62 <Dio_PortMode+0x96>
     f42:	43 c0       	rjmp	.+134    	; 0xfca <Dio_PortMode+0xfe>
				case 1: DDRA = 0xFF;	break;
     f44:	ea e3       	ldi	r30, 0x3A	; 58
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	80 83       	st	Z, r24
     f4c:	3e c0       	rjmp	.+124    	; 0xfca <Dio_PortMode+0xfe>
				case 2: DDRB = 0xFF;	break;
     f4e:	e7 e3       	ldi	r30, 0x37	; 55
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	8f ef       	ldi	r24, 0xFF	; 255
     f54:	80 83       	st	Z, r24
     f56:	39 c0       	rjmp	.+114    	; 0xfca <Dio_PortMode+0xfe>
				case 3: DDRC = 0xFF;	break;
     f58:	e4 e3       	ldi	r30, 0x34	; 52
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	80 83       	st	Z, r24
     f60:	34 c0       	rjmp	.+104    	; 0xfca <Dio_PortMode+0xfe>
				case 4: DDRD = 0xFF;	break;
     f62:	e1 e3       	ldi	r30, 0x31	; 49
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	80 83       	st	Z, r24
     f6a:	2f c0       	rjmp	.+94     	; 0xfca <Dio_PortMode+0xfe>
				default:				break;
			}
			break;
		case INPUT:
			switch(Port){
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	3c 83       	std	Y+4, r19	; 0x04
     f74:	2b 83       	std	Y+3, r18	; 0x03
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	91 05       	cpc	r25, r1
     f7e:	d1 f0       	breq	.+52     	; 0xfb4 <Dio_PortMode+0xe8>
     f80:	2b 81       	ldd	r18, Y+3	; 0x03
     f82:	3c 81       	ldd	r19, Y+4	; 0x04
     f84:	23 30       	cpi	r18, 0x03	; 3
     f86:	31 05       	cpc	r19, r1
     f88:	34 f4       	brge	.+12     	; 0xf96 <Dio_PortMode+0xca>
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	91 05       	cpc	r25, r1
     f92:	61 f0       	breq	.+24     	; 0xfac <Dio_PortMode+0xe0>
     f94:	1a c0       	rjmp	.+52     	; 0xfca <Dio_PortMode+0xfe>
     f96:	2b 81       	ldd	r18, Y+3	; 0x03
     f98:	3c 81       	ldd	r19, Y+4	; 0x04
     f9a:	23 30       	cpi	r18, 0x03	; 3
     f9c:	31 05       	cpc	r19, r1
     f9e:	71 f0       	breq	.+28     	; 0xfbc <Dio_PortMode+0xf0>
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	9c 81       	ldd	r25, Y+4	; 0x04
     fa4:	84 30       	cpi	r24, 0x04	; 4
     fa6:	91 05       	cpc	r25, r1
     fa8:	69 f0       	breq	.+26     	; 0xfc4 <Dio_PortMode+0xf8>
     faa:	0f c0       	rjmp	.+30     	; 0xfca <Dio_PortMode+0xfe>
				case 1: DDRA = 0x00;	break;
     fac:	ea e3       	ldi	r30, 0x3A	; 58
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	10 82       	st	Z, r1
     fb2:	0b c0       	rjmp	.+22     	; 0xfca <Dio_PortMode+0xfe>
				case 2: DDRB = 0x00;	break;
     fb4:	e7 e3       	ldi	r30, 0x37	; 55
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	10 82       	st	Z, r1
     fba:	07 c0       	rjmp	.+14     	; 0xfca <Dio_PortMode+0xfe>
				case 3: DDRC = 0x00;	break;
     fbc:	e4 e3       	ldi	r30, 0x34	; 52
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	10 82       	st	Z, r1
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <Dio_PortMode+0xfe>
				case 4: DDRD = 0x00;	break;
     fc4:	e1 e3       	ldi	r30, 0x31	; 49
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	10 82       	st	Z, r1
				default:					break;
			}
			break;
		default: break;
	}
}
     fca:	28 96       	adiw	r28, 0x08	; 8
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	08 95       	ret

00000fdc <Dio_PinWrite>:

void Dio_PinWrite(u8 ch, u8 Mode)
{
     fdc:	df 93       	push	r29
     fde:	cf 93       	push	r28
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	2a 97       	sbiw	r28, 0x0a	; 10
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	8b 83       	std	Y+3, r24	; 0x03
     ff2:	6c 83       	std	Y+4, r22	; 0x04
	u8	port	= ch / 10;
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9a e0       	ldi	r25, 0x0A	; 10
     ff8:	69 2f       	mov	r22, r25
     ffa:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__udivmodqi4>
     ffe:	8a 83       	std	Y+2, r24	; 0x02
	u8	pin		= ch % 10;
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9a e0       	ldi	r25, 0x0A	; 10
    1004:	69 2f       	mov	r22, r25
    1006:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__udivmodqi4>
    100a:	89 2f       	mov	r24, r25
    100c:	89 83       	std	Y+1, r24	; 0x01

	switch (Mode){
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	3a 87       	std	Y+10, r19	; 0x0a
    1016:	29 87       	std	Y+9, r18	; 0x09
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	91 05       	cpc	r25, r1
    1020:	39 f0       	breq	.+14     	; 0x1030 <Dio_PinWrite+0x54>
    1022:	29 85       	ldd	r18, Y+9	; 0x09
    1024:	3a 85       	ldd	r19, Y+10	; 0x0a
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <Dio_PinWrite+0x52>
    102c:	71 c0       	rjmp	.+226    	; 0x1110 <Dio_PinWrite+0x134>
    102e:	e4 c0       	rjmp	.+456    	; 0x11f8 <Dio_PinWrite+0x21c>
		case HIGH:
			switch(port){
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	38 87       	std	Y+8, r19	; 0x08
    1038:	2f 83       	std	Y+7, r18	; 0x07
    103a:	8f 81       	ldd	r24, Y+7	; 0x07
    103c:	98 85       	ldd	r25, Y+8	; 0x08
    103e:	82 30       	cpi	r24, 0x02	; 2
    1040:	91 05       	cpc	r25, r1
    1042:	51 f1       	breq	.+84     	; 0x1098 <Dio_PinWrite+0xbc>
    1044:	2f 81       	ldd	r18, Y+7	; 0x07
    1046:	38 85       	ldd	r19, Y+8	; 0x08
    1048:	23 30       	cpi	r18, 0x03	; 3
    104a:	31 05       	cpc	r19, r1
    104c:	34 f4       	brge	.+12     	; 0x105a <Dio_PinWrite+0x7e>
    104e:	8f 81       	ldd	r24, Y+7	; 0x07
    1050:	98 85       	ldd	r25, Y+8	; 0x08
    1052:	81 30       	cpi	r24, 0x01	; 1
    1054:	91 05       	cpc	r25, r1
    1056:	61 f0       	breq	.+24     	; 0x1070 <Dio_PinWrite+0x94>
    1058:	cf c0       	rjmp	.+414    	; 0x11f8 <Dio_PinWrite+0x21c>
    105a:	2f 81       	ldd	r18, Y+7	; 0x07
    105c:	38 85       	ldd	r19, Y+8	; 0x08
    105e:	23 30       	cpi	r18, 0x03	; 3
    1060:	31 05       	cpc	r19, r1
    1062:	71 f1       	breq	.+92     	; 0x10c0 <Dio_PinWrite+0xe4>
    1064:	8f 81       	ldd	r24, Y+7	; 0x07
    1066:	98 85       	ldd	r25, Y+8	; 0x08
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	91 05       	cpc	r25, r1
    106c:	e9 f1       	breq	.+122    	; 0x10e8 <Dio_PinWrite+0x10c>
    106e:	c4 c0       	rjmp	.+392    	; 0x11f8 <Dio_PinWrite+0x21c>
				case 1: Set_bit(PORTA, pin);	break;
    1070:	ab e3       	ldi	r26, 0x3B	; 59
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	eb e3       	ldi	r30, 0x3B	; 59
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <Dio_PinWrite+0xb2>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <Dio_PinWrite+0xae>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	b0 c0       	rjmp	.+352    	; 0x11f8 <Dio_PinWrite+0x21c>
				case 2: Set_bit(PORTB, pin);	break;
    1098:	a8 e3       	ldi	r26, 0x38	; 56
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e3       	ldi	r30, 0x38	; 56
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <Dio_PinWrite+0xda>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <Dio_PinWrite+0xd6>
    10ba:	84 2b       	or	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	9c c0       	rjmp	.+312    	; 0x11f8 <Dio_PinWrite+0x21c>
				case 3: Set_bit(PORTC, pin);	break;
    10c0:	a5 e3       	ldi	r26, 0x35	; 53
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e5 e3       	ldi	r30, 0x35	; 53
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <Dio_PinWrite+0x102>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <Dio_PinWrite+0xfe>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	88 c0       	rjmp	.+272    	; 0x11f8 <Dio_PinWrite+0x21c>
				case 4: Set_bit(PORTD, pin);	break;
    10e8:	a2 e3       	ldi	r26, 0x32	; 50
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e2 e3       	ldi	r30, 0x32	; 50
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <Dio_PinWrite+0x12a>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <Dio_PinWrite+0x126>
    110a:	84 2b       	or	r24, r20
    110c:	8c 93       	st	X, r24
    110e:	74 c0       	rjmp	.+232    	; 0x11f8 <Dio_PinWrite+0x21c>
				default:						break;
			}
			break;
		case LOW:
			switch(port){
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	3e 83       	std	Y+6, r19	; 0x06
    1118:	2d 83       	std	Y+5, r18	; 0x05
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	91 05       	cpc	r25, r1
    1122:	61 f1       	breq	.+88     	; 0x117c <Dio_PinWrite+0x1a0>
    1124:	2d 81       	ldd	r18, Y+5	; 0x05
    1126:	3e 81       	ldd	r19, Y+6	; 0x06
    1128:	23 30       	cpi	r18, 0x03	; 3
    112a:	31 05       	cpc	r19, r1
    112c:	34 f4       	brge	.+12     	; 0x113a <Dio_PinWrite+0x15e>
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	9e 81       	ldd	r25, Y+6	; 0x06
    1132:	81 30       	cpi	r24, 0x01	; 1
    1134:	91 05       	cpc	r25, r1
    1136:	69 f0       	breq	.+26     	; 0x1152 <Dio_PinWrite+0x176>
    1138:	5f c0       	rjmp	.+190    	; 0x11f8 <Dio_PinWrite+0x21c>
    113a:	2d 81       	ldd	r18, Y+5	; 0x05
    113c:	3e 81       	ldd	r19, Y+6	; 0x06
    113e:	23 30       	cpi	r18, 0x03	; 3
    1140:	31 05       	cpc	r19, r1
    1142:	89 f1       	breq	.+98     	; 0x11a6 <Dio_PinWrite+0x1ca>
    1144:	8d 81       	ldd	r24, Y+5	; 0x05
    1146:	9e 81       	ldd	r25, Y+6	; 0x06
    1148:	84 30       	cpi	r24, 0x04	; 4
    114a:	91 05       	cpc	r25, r1
    114c:	09 f4       	brne	.+2      	; 0x1150 <Dio_PinWrite+0x174>
    114e:	40 c0       	rjmp	.+128    	; 0x11d0 <Dio_PinWrite+0x1f4>
    1150:	53 c0       	rjmp	.+166    	; 0x11f8 <Dio_PinWrite+0x21c>
				case 1: Clr_bit(PORTA, pin);	break;
    1152:	ab e3       	ldi	r26, 0x3B	; 59
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	eb e3       	ldi	r30, 0x3B	; 59
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	48 2f       	mov	r20, r24
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 2e       	mov	r0, r18
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <Dio_PinWrite+0x194>
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	0a 94       	dec	r0
    1172:	e2 f7       	brpl	.-8      	; 0x116c <Dio_PinWrite+0x190>
    1174:	80 95       	com	r24
    1176:	84 23       	and	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	3e c0       	rjmp	.+124    	; 0x11f8 <Dio_PinWrite+0x21c>
				case 2: Clr_bit(PORTB, pin);	break;
    117c:	a8 e3       	ldi	r26, 0x38	; 56
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	e8 e3       	ldi	r30, 0x38	; 56
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	48 2f       	mov	r20, r24
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	02 2e       	mov	r0, r18
    1194:	02 c0       	rjmp	.+4      	; 0x119a <Dio_PinWrite+0x1be>
    1196:	88 0f       	add	r24, r24
    1198:	99 1f       	adc	r25, r25
    119a:	0a 94       	dec	r0
    119c:	e2 f7       	brpl	.-8      	; 0x1196 <Dio_PinWrite+0x1ba>
    119e:	80 95       	com	r24
    11a0:	84 23       	and	r24, r20
    11a2:	8c 93       	st	X, r24
    11a4:	29 c0       	rjmp	.+82     	; 0x11f8 <Dio_PinWrite+0x21c>
				case 3: Clr_bit(PORTC, pin);	break;
    11a6:	a5 e3       	ldi	r26, 0x35	; 53
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e3       	ldi	r30, 0x35	; 53
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <Dio_PinWrite+0x1e8>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <Dio_PinWrite+0x1e4>
    11c8:	80 95       	com	r24
    11ca:	84 23       	and	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <Dio_PinWrite+0x21c>
				case 4: Clr_bit(PORTD, pin);	break;
    11d0:	a2 e3       	ldi	r26, 0x32	; 50
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e2 e3       	ldi	r30, 0x32	; 50
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <Dio_PinWrite+0x212>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <Dio_PinWrite+0x20e>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
			}
			break;

		default: break;
	}
}
    11f8:	2a 96       	adiw	r28, 0x0a	; 10
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <Dio_PortWrite>:

void Dio_PortWrite(u8 Port, u8 value)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <Dio_PortWrite+0x6>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <Dio_PortWrite+0x8>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port){
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3c 83       	std	Y+4, r19	; 0x04
    1222:	2b 83       	std	Y+3, r18	; 0x03
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	82 30       	cpi	r24, 0x02	; 2
    122a:	91 05       	cpc	r25, r1
    122c:	d9 f0       	breq	.+54     	; 0x1264 <Dio_PortWrite+0x5a>
    122e:	2b 81       	ldd	r18, Y+3	; 0x03
    1230:	3c 81       	ldd	r19, Y+4	; 0x04
    1232:	23 30       	cpi	r18, 0x03	; 3
    1234:	31 05       	cpc	r19, r1
    1236:	34 f4       	brge	.+12     	; 0x1244 <Dio_PortWrite+0x3a>
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	91 05       	cpc	r25, r1
    1240:	61 f0       	breq	.+24     	; 0x125a <Dio_PortWrite+0x50>
    1242:	1e c0       	rjmp	.+60     	; 0x1280 <Dio_PortWrite+0x76>
    1244:	2b 81       	ldd	r18, Y+3	; 0x03
    1246:	3c 81       	ldd	r19, Y+4	; 0x04
    1248:	23 30       	cpi	r18, 0x03	; 3
    124a:	31 05       	cpc	r19, r1
    124c:	81 f0       	breq	.+32     	; 0x126e <Dio_PortWrite+0x64>
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	91 05       	cpc	r25, r1
    1256:	81 f0       	breq	.+32     	; 0x1278 <Dio_PortWrite+0x6e>
    1258:	13 c0       	rjmp	.+38     	; 0x1280 <Dio_PortWrite+0x76>
		case 1: PORTA = value;	break;
    125a:	eb e3       	ldi	r30, 0x3B	; 59
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	80 83       	st	Z, r24
    1262:	0e c0       	rjmp	.+28     	; 0x1280 <Dio_PortWrite+0x76>
		case 2: PORTB = value;	break;
    1264:	e8 e3       	ldi	r30, 0x38	; 56
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	80 83       	st	Z, r24
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <Dio_PortWrite+0x76>
		case 3: PORTC = value;	break;
    126e:	e5 e3       	ldi	r30, 0x35	; 53
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	80 83       	st	Z, r24
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <Dio_PortWrite+0x76>
		case 4: PORTD = value;	break;
    1278:	e2 e3       	ldi	r30, 0x32	; 50
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	80 83       	st	Z, r24
		default:						break;
	}
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <Dio_PinTog>:

void Dio_PinTog(u8 ch){
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <Dio_PinTog+0x6>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <Dio_PinTog+0x8>
    1296:	0f 92       	push	r0
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	8b 83       	std	Y+3, r24	; 0x03

	u8	port	= ch / 10;
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9a e0       	ldi	r25, 0x0A	; 10
    12a2:	69 2f       	mov	r22, r25
    12a4:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__udivmodqi4>
    12a8:	8a 83       	std	Y+2, r24	; 0x02
	u8	pin		= ch % 10;
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9a e0       	ldi	r25, 0x0A	; 10
    12ae:	69 2f       	mov	r22, r25
    12b0:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__udivmodqi4>
    12b4:	89 2f       	mov	r24, r25
    12b6:	89 83       	std	Y+1, r24	; 0x01

	switch(port){
    12b8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	3d 83       	std	Y+5, r19	; 0x05
    12c0:	2c 83       	std	Y+4, r18	; 0x04
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	9d 81       	ldd	r25, Y+5	; 0x05
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	91 05       	cpc	r25, r1
    12ca:	51 f1       	breq	.+84     	; 0x1320 <Dio_PinTog+0x92>
    12cc:	2c 81       	ldd	r18, Y+4	; 0x04
    12ce:	3d 81       	ldd	r19, Y+5	; 0x05
    12d0:	23 30       	cpi	r18, 0x03	; 3
    12d2:	31 05       	cpc	r19, r1
    12d4:	34 f4       	brge	.+12     	; 0x12e2 <Dio_PinTog+0x54>
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	91 05       	cpc	r25, r1
    12de:	61 f0       	breq	.+24     	; 0x12f8 <Dio_PinTog+0x6a>
    12e0:	5a c0       	rjmp	.+180    	; 0x1396 <Dio_PinTog+0x108>
    12e2:	2c 81       	ldd	r18, Y+4	; 0x04
    12e4:	3d 81       	ldd	r19, Y+5	; 0x05
    12e6:	23 30       	cpi	r18, 0x03	; 3
    12e8:	31 05       	cpc	r19, r1
    12ea:	71 f1       	breq	.+92     	; 0x1348 <Dio_PinTog+0xba>
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	9d 81       	ldd	r25, Y+5	; 0x05
    12f0:	84 30       	cpi	r24, 0x04	; 4
    12f2:	91 05       	cpc	r25, r1
    12f4:	e9 f1       	breq	.+122    	; 0x1370 <Dio_PinTog+0xe2>
    12f6:	4f c0       	rjmp	.+158    	; 0x1396 <Dio_PinTog+0x108>
		case 1: Tog_bit(PORTA, pin);	break;
    12f8:	ab e3       	ldi	r26, 0x3B	; 59
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	eb e3       	ldi	r30, 0x3B	; 59
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <Dio_PinTog+0x88>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <Dio_PinTog+0x84>
    131a:	84 27       	eor	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	3b c0       	rjmp	.+118    	; 0x1396 <Dio_PinTog+0x108>
		case 2: Tog_bit(PORTB, pin);	break;
    1320:	a8 e3       	ldi	r26, 0x38	; 56
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e8 e3       	ldi	r30, 0x38	; 56
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <Dio_PinTog+0xb0>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <Dio_PinTog+0xac>
    1342:	84 27       	eor	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	27 c0       	rjmp	.+78     	; 0x1396 <Dio_PinTog+0x108>
		case 3: Tog_bit(PORTC, pin);	break;
    1348:	a5 e3       	ldi	r26, 0x35	; 53
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e5 e3       	ldi	r30, 0x35	; 53
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	89 81       	ldd	r24, Y+1	; 0x01
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <Dio_PinTog+0xd8>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <Dio_PinTog+0xd4>
    136a:	84 27       	eor	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	13 c0       	rjmp	.+38     	; 0x1396 <Dio_PinTog+0x108>
		case 4: Tog_bit(PORTD, pin);	break;
    1370:	a2 e3       	ldi	r26, 0x32	; 50
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e2 e3       	ldi	r30, 0x32	; 50
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <Dio_PinTog+0x100>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <Dio_PinTog+0xfc>
    1392:	84 27       	eor	r24, r20
    1394:	8c 93       	st	X, r24
		default:						break;
	}
}
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <Dio_PinRead>:

u8 Dio_PinRead(u8 ch)
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <Dio_PinRead+0x6>
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <Dio_PinRead+0x8>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <Dio_PinRead+0xa>
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	8c 83       	std	Y+4, r24	; 0x04
	u8	port	= ch / 10;
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	9a e0       	ldi	r25, 0x0A	; 10
    13ba:	69 2f       	mov	r22, r25
    13bc:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__udivmodqi4>
    13c0:	8b 83       	std	Y+3, r24	; 0x03
	u8	pin		= ch % 10;
    13c2:	8c 81       	ldd	r24, Y+4	; 0x04
    13c4:	9a e0       	ldi	r25, 0x0A	; 10
    13c6:	69 2f       	mov	r22, r25
    13c8:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__udivmodqi4>
    13cc:	89 2f       	mov	r24, r25
    13ce:	8a 83       	std	Y+2, r24	; 0x02

	u8 PinReading = 0;
    13d0:	19 82       	std	Y+1, r1	; 0x01

	switch(port){
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3e 83       	std	Y+6, r19	; 0x06
    13da:	2d 83       	std	Y+5, r18	; 0x05
    13dc:	4d 81       	ldd	r20, Y+5	; 0x05
    13de:	5e 81       	ldd	r21, Y+6	; 0x06
    13e0:	42 30       	cpi	r20, 0x02	; 2
    13e2:	51 05       	cpc	r21, r1
    13e4:	41 f1       	breq	.+80     	; 0x1436 <Dio_PinRead+0x90>
    13e6:	8d 81       	ldd	r24, Y+5	; 0x05
    13e8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	34 f4       	brge	.+12     	; 0x13fc <Dio_PinRead+0x56>
    13f0:	2d 81       	ldd	r18, Y+5	; 0x05
    13f2:	3e 81       	ldd	r19, Y+6	; 0x06
    13f4:	21 30       	cpi	r18, 0x01	; 1
    13f6:	31 05       	cpc	r19, r1
    13f8:	61 f0       	breq	.+24     	; 0x1412 <Dio_PinRead+0x6c>
    13fa:	52 c0       	rjmp	.+164    	; 0x14a0 <Dio_PinRead+0xfa>
    13fc:	4d 81       	ldd	r20, Y+5	; 0x05
    13fe:	5e 81       	ldd	r21, Y+6	; 0x06
    1400:	43 30       	cpi	r20, 0x03	; 3
    1402:	51 05       	cpc	r21, r1
    1404:	51 f1       	breq	.+84     	; 0x145a <Dio_PinRead+0xb4>
    1406:	8d 81       	ldd	r24, Y+5	; 0x05
    1408:	9e 81       	ldd	r25, Y+6	; 0x06
    140a:	84 30       	cpi	r24, 0x04	; 4
    140c:	91 05       	cpc	r25, r1
    140e:	b9 f1       	breq	.+110    	; 0x147e <Dio_PinRead+0xd8>
    1410:	47 c0       	rjmp	.+142    	; 0x14a0 <Dio_PinRead+0xfa>
		case 1: PinReading = Get_bit(PINA, pin);	break;
    1412:	e9 e3       	ldi	r30, 0x39	; 57
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	88 2f       	mov	r24, r24
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a9 01       	movw	r20, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <Dio_PinRead+0x84>
    1426:	55 95       	asr	r21
    1428:	47 95       	ror	r20
    142a:	8a 95       	dec	r24
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <Dio_PinRead+0x80>
    142e:	ca 01       	movw	r24, r20
    1430:	81 70       	andi	r24, 0x01	; 1
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	35 c0       	rjmp	.+106    	; 0x14a0 <Dio_PinRead+0xfa>
		case 2: PinReading = Get_bit(PINB, pin);	break;
    1436:	e6 e3       	ldi	r30, 0x36	; 54
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	28 2f       	mov	r18, r24
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 2f       	mov	r24, r24
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	a9 01       	movw	r20, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <Dio_PinRead+0xa8>
    144a:	55 95       	asr	r21
    144c:	47 95       	ror	r20
    144e:	8a 95       	dec	r24
    1450:	e2 f7       	brpl	.-8      	; 0x144a <Dio_PinRead+0xa4>
    1452:	ca 01       	movw	r24, r20
    1454:	81 70       	andi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	23 c0       	rjmp	.+70     	; 0x14a0 <Dio_PinRead+0xfa>
		case 3: PinReading = Get_bit(PINC, pin);	break;
    145a:	e3 e3       	ldi	r30, 0x33	; 51
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	a9 01       	movw	r20, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <Dio_PinRead+0xcc>
    146e:	55 95       	asr	r21
    1470:	47 95       	ror	r20
    1472:	8a 95       	dec	r24
    1474:	e2 f7       	brpl	.-8      	; 0x146e <Dio_PinRead+0xc8>
    1476:	ca 01       	movw	r24, r20
    1478:	81 70       	andi	r24, 0x01	; 1
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	11 c0       	rjmp	.+34     	; 0x14a0 <Dio_PinRead+0xfa>
		case 4: PinReading = Get_bit(PIND, pin);	break;
    147e:	e0 e3       	ldi	r30, 0x30	; 48
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	a9 01       	movw	r20, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <Dio_PinRead+0xf0>
    1492:	55 95       	asr	r21
    1494:	47 95       	ror	r20
    1496:	8a 95       	dec	r24
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <Dio_PinRead+0xec>
    149a:	ca 01       	movw	r24, r20
    149c:	81 70       	andi	r24, 0x01	; 1
    149e:	89 83       	std	Y+1, r24	; 0x01
		default:									break;
	}
	return PinReading;
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a2:	26 96       	adiw	r28, 0x06	; 6
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret

000014b4 <Dio_PinPullUpRes>:

void Dio_PinPullUpRes(u8 ch, u8 Mode)
{
    14b4:	df 93       	push	r29
    14b6:	cf 93       	push	r28
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	2a 97       	sbiw	r28, 0x0a	; 10
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	8b 83       	std	Y+3, r24	; 0x03
    14ca:	6c 83       	std	Y+4, r22	; 0x04
	u8	port	= ch / 10;
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9a e0       	ldi	r25, 0x0A	; 10
    14d0:	69 2f       	mov	r22, r25
    14d2:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__udivmodqi4>
    14d6:	8a 83       	std	Y+2, r24	; 0x02
	u8	pin		= ch % 10;
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9a e0       	ldi	r25, 0x0A	; 10
    14dc:	69 2f       	mov	r22, r25
    14de:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <__udivmodqi4>
    14e2:	89 2f       	mov	r24, r25
    14e4:	89 83       	std	Y+1, r24	; 0x01

	switch (Mode){
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	3a 87       	std	Y+10, r19	; 0x0a
    14ee:	29 87       	std	Y+9, r18	; 0x09
    14f0:	89 85       	ldd	r24, Y+9	; 0x09
    14f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	91 05       	cpc	r25, r1
    14f8:	39 f0       	breq	.+14     	; 0x1508 <Dio_PinPullUpRes+0x54>
    14fa:	29 85       	ldd	r18, Y+9	; 0x09
    14fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	09 f4       	brne	.+2      	; 0x1506 <Dio_PinPullUpRes+0x52>
    1504:	71 c0       	rjmp	.+226    	; 0x15e8 <Dio_PinPullUpRes+0x134>
    1506:	e4 c0       	rjmp	.+456    	; 0x16d0 <Dio_PinPullUpRes+0x21c>

		case ENABLE:
			switch(port){
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	38 87       	std	Y+8, r19	; 0x08
    1510:	2f 83       	std	Y+7, r18	; 0x07
    1512:	8f 81       	ldd	r24, Y+7	; 0x07
    1514:	98 85       	ldd	r25, Y+8	; 0x08
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	91 05       	cpc	r25, r1
    151a:	51 f1       	breq	.+84     	; 0x1570 <Dio_PinPullUpRes+0xbc>
    151c:	2f 81       	ldd	r18, Y+7	; 0x07
    151e:	38 85       	ldd	r19, Y+8	; 0x08
    1520:	23 30       	cpi	r18, 0x03	; 3
    1522:	31 05       	cpc	r19, r1
    1524:	34 f4       	brge	.+12     	; 0x1532 <Dio_PinPullUpRes+0x7e>
    1526:	8f 81       	ldd	r24, Y+7	; 0x07
    1528:	98 85       	ldd	r25, Y+8	; 0x08
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	61 f0       	breq	.+24     	; 0x1548 <Dio_PinPullUpRes+0x94>
    1530:	cf c0       	rjmp	.+414    	; 0x16d0 <Dio_PinPullUpRes+0x21c>
    1532:	2f 81       	ldd	r18, Y+7	; 0x07
    1534:	38 85       	ldd	r19, Y+8	; 0x08
    1536:	23 30       	cpi	r18, 0x03	; 3
    1538:	31 05       	cpc	r19, r1
    153a:	71 f1       	breq	.+92     	; 0x1598 <Dio_PinPullUpRes+0xe4>
    153c:	8f 81       	ldd	r24, Y+7	; 0x07
    153e:	98 85       	ldd	r25, Y+8	; 0x08
    1540:	84 30       	cpi	r24, 0x04	; 4
    1542:	91 05       	cpc	r25, r1
    1544:	e9 f1       	breq	.+122    	; 0x15c0 <Dio_PinPullUpRes+0x10c>
    1546:	c4 c0       	rjmp	.+392    	; 0x16d0 <Dio_PinPullUpRes+0x21c>
				case 1: Set_bit(PORTA, pin);	break;
    1548:	ab e3       	ldi	r26, 0x3B	; 59
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	eb e3       	ldi	r30, 0x3B	; 59
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <Dio_PinPullUpRes+0xb2>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <Dio_PinPullUpRes+0xae>
    156a:	84 2b       	or	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	b0 c0       	rjmp	.+352    	; 0x16d0 <Dio_PinPullUpRes+0x21c>
				case 2: Set_bit(PORTB, pin);	break;
    1570:	a8 e3       	ldi	r26, 0x38	; 56
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e8 e3       	ldi	r30, 0x38	; 56
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <Dio_PinPullUpRes+0xda>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <Dio_PinPullUpRes+0xd6>
    1592:	84 2b       	or	r24, r20
    1594:	8c 93       	st	X, r24
    1596:	9c c0       	rjmp	.+312    	; 0x16d0 <Dio_PinPullUpRes+0x21c>
				case 3: Set_bit(PORTC, pin);	break;
    1598:	a5 e3       	ldi	r26, 0x35	; 53
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e5 e3       	ldi	r30, 0x35	; 53
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <Dio_PinPullUpRes+0x102>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <Dio_PinPullUpRes+0xfe>
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	88 c0       	rjmp	.+272    	; 0x16d0 <Dio_PinPullUpRes+0x21c>
				case 4: Set_bit(PORTD, pin);	break;
    15c0:	a2 e3       	ldi	r26, 0x32	; 50
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e2 e3       	ldi	r30, 0x32	; 50
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 2e       	mov	r0, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <Dio_PinPullUpRes+0x12a>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <Dio_PinPullUpRes+0x126>
    15e2:	84 2b       	or	r24, r20
    15e4:	8c 93       	st	X, r24
    15e6:	74 c0       	rjmp	.+232    	; 0x16d0 <Dio_PinPullUpRes+0x21c>
				default:						break;
			}
			break;

		case DISABLE:
			switch(port){
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3e 83       	std	Y+6, r19	; 0x06
    15f0:	2d 83       	std	Y+5, r18	; 0x05
    15f2:	8d 81       	ldd	r24, Y+5	; 0x05
    15f4:	9e 81       	ldd	r25, Y+6	; 0x06
    15f6:	82 30       	cpi	r24, 0x02	; 2
    15f8:	91 05       	cpc	r25, r1
    15fa:	61 f1       	breq	.+88     	; 0x1654 <Dio_PinPullUpRes+0x1a0>
    15fc:	2d 81       	ldd	r18, Y+5	; 0x05
    15fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1600:	23 30       	cpi	r18, 0x03	; 3
    1602:	31 05       	cpc	r19, r1
    1604:	34 f4       	brge	.+12     	; 0x1612 <Dio_PinPullUpRes+0x15e>
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	91 05       	cpc	r25, r1
    160e:	69 f0       	breq	.+26     	; 0x162a <Dio_PinPullUpRes+0x176>
    1610:	5f c0       	rjmp	.+190    	; 0x16d0 <Dio_PinPullUpRes+0x21c>
    1612:	2d 81       	ldd	r18, Y+5	; 0x05
    1614:	3e 81       	ldd	r19, Y+6	; 0x06
    1616:	23 30       	cpi	r18, 0x03	; 3
    1618:	31 05       	cpc	r19, r1
    161a:	89 f1       	breq	.+98     	; 0x167e <Dio_PinPullUpRes+0x1ca>
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	84 30       	cpi	r24, 0x04	; 4
    1622:	91 05       	cpc	r25, r1
    1624:	09 f4       	brne	.+2      	; 0x1628 <Dio_PinPullUpRes+0x174>
    1626:	40 c0       	rjmp	.+128    	; 0x16a8 <Dio_PinPullUpRes+0x1f4>
    1628:	53 c0       	rjmp	.+166    	; 0x16d0 <Dio_PinPullUpRes+0x21c>
				case 1: Clr_bit(PORTA, pin);	break;
    162a:	ab e3       	ldi	r26, 0x3B	; 59
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e3       	ldi	r30, 0x3B	; 59
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <Dio_PinPullUpRes+0x194>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <Dio_PinPullUpRes+0x190>
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	3e c0       	rjmp	.+124    	; 0x16d0 <Dio_PinPullUpRes+0x21c>
				case 2: Clr_bit(PORTB, pin);	break;
    1654:	a8 e3       	ldi	r26, 0x38	; 56
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e8 e3       	ldi	r30, 0x38	; 56
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <Dio_PinPullUpRes+0x1be>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <Dio_PinPullUpRes+0x1ba>
    1676:	80 95       	com	r24
    1678:	84 23       	and	r24, r20
    167a:	8c 93       	st	X, r24
    167c:	29 c0       	rjmp	.+82     	; 0x16d0 <Dio_PinPullUpRes+0x21c>
				case 3: Clr_bit(PORTC, pin);	break;
    167e:	a5 e3       	ldi	r26, 0x35	; 53
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	e5 e3       	ldi	r30, 0x35	; 53
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	80 81       	ld	r24, Z
    1688:	48 2f       	mov	r20, r24
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	02 2e       	mov	r0, r18
    1696:	02 c0       	rjmp	.+4      	; 0x169c <Dio_PinPullUpRes+0x1e8>
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	0a 94       	dec	r0
    169e:	e2 f7       	brpl	.-8      	; 0x1698 <Dio_PinPullUpRes+0x1e4>
    16a0:	80 95       	com	r24
    16a2:	84 23       	and	r24, r20
    16a4:	8c 93       	st	X, r24
    16a6:	14 c0       	rjmp	.+40     	; 0x16d0 <Dio_PinPullUpRes+0x21c>
				case 4: Clr_bit(PORTD, pin);	break;
    16a8:	a2 e3       	ldi	r26, 0x32	; 50
    16aa:	b0 e0       	ldi	r27, 0x00	; 0
    16ac:	e2 e3       	ldi	r30, 0x32	; 50
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	48 2f       	mov	r20, r24
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	28 2f       	mov	r18, r24
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <Dio_PinPullUpRes+0x212>
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <Dio_PinPullUpRes+0x20e>
    16ca:	80 95       	com	r24
    16cc:	84 23       	and	r24, r20
    16ce:	8c 93       	st	X, r24
			}
			break;

		default: break;
	}
}
    16d0:	2a 96       	adiw	r28, 0x0a	; 10
    16d2:	0f b6       	in	r0, 0x3f	; 63
    16d4:	f8 94       	cli
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	0f be       	out	0x3f, r0	; 63
    16da:	cd bf       	out	0x3d, r28	; 61
    16dc:	cf 91       	pop	r28
    16de:	df 91       	pop	r29
    16e0:	08 95       	ret

000016e2 <LCD_Init>:

static void Trigger_Enable();
static void Set_Cursor_Pos(u8 row, u8 column);

 void LCD_Init(void)
{
    16e2:	df 93       	push	r29
    16e4:	cf 93       	push	r28
    16e6:	cd b7       	in	r28, 0x3d	; 61
    16e8:	de b7       	in	r29, 0x3e	; 62
    16ea:	2e 97       	sbiw	r28, 0x0e	; 14
    16ec:	0f b6       	in	r0, 0x3f	; 63
    16ee:	f8 94       	cli
    16f0:	de bf       	out	0x3e, r29	; 62
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	cd bf       	out	0x3d, r28	; 61
	Dio_PinMode(LCD_DATA4_PIN, OUTPUT);
    16f6:	8e e0       	ldi	r24, 0x0E	; 14
    16f8:	61 e0       	ldi	r22, 0x01	; 1
    16fa:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_PinMode>
	Dio_PinMode(LCD_DATA5_PIN, OUTPUT);
    16fe:	8f e0       	ldi	r24, 0x0F	; 15
    1700:	61 e0       	ldi	r22, 0x01	; 1
    1702:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_PinMode>
	Dio_PinMode(LCD_DATA6_PIN, OUTPUT);
    1706:	80 e1       	ldi	r24, 0x10	; 16
    1708:	61 e0       	ldi	r22, 0x01	; 1
    170a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_PinMode>
	Dio_PinMode(LCD_DATA7_PIN, OUTPUT);
    170e:	81 e1       	ldi	r24, 0x11	; 17
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_PinMode>
	Dio_PinMode(LCD_RS_PIN, OUTPUT);
    1716:	84 e1       	ldi	r24, 0x14	; 20
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_PinMode>
	Dio_PinMode(LCD_EN_PIN, OUTPUT);
    171e:	86 e1       	ldi	r24, 0x16	; 22
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_PinMode>
	Dio_PinMode(LCD_RW_PIN, OUTPUT);
    1726:	85 e1       	ldi	r24, 0x15	; 21
    1728:	61 e0       	ldi	r22, 0x01	; 1
    172a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <Dio_PinMode>
	Dio_PinWrite(LCD_RW_PIN, LOW);
    172e:	85 e1       	ldi	r24, 0x15	; 21
    1730:	62 e0       	ldi	r22, 0x02	; 2
    1732:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	a8 ec       	ldi	r26, 0xC8	; 200
    173c:	b2 e4       	ldi	r27, 0x42	; 66
    173e:	8b 87       	std	Y+11, r24	; 0x0b
    1740:	9c 87       	std	Y+12, r25	; 0x0c
    1742:	ad 87       	std	Y+13, r26	; 0x0d
    1744:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1746:	6b 85       	ldd	r22, Y+11	; 0x0b
    1748:	7c 85       	ldd	r23, Y+12	; 0x0c
    174a:	8d 85       	ldd	r24, Y+13	; 0x0d
    174c:	9e 85       	ldd	r25, Y+14	; 0x0e
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	4a ef       	ldi	r20, 0xFA	; 250
    1754:	54 e4       	ldi	r21, 0x44	; 68
    1756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	8f 83       	std	Y+7, r24	; 0x07
    1760:	98 87       	std	Y+8, r25	; 0x08
    1762:	a9 87       	std	Y+9, r26	; 0x09
    1764:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1766:	6f 81       	ldd	r22, Y+7	; 0x07
    1768:	78 85       	ldd	r23, Y+8	; 0x08
    176a:	89 85       	ldd	r24, Y+9	; 0x09
    176c:	9a 85       	ldd	r25, Y+10	; 0x0a
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	40 e8       	ldi	r20, 0x80	; 128
    1774:	5f e3       	ldi	r21, 0x3F	; 63
    1776:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    177a:	88 23       	and	r24, r24
    177c:	2c f4       	brge	.+10     	; 0x1788 <LCD_Init+0xa6>
		__ticks = 1;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	9e 83       	std	Y+6, r25	; 0x06
    1784:	8d 83       	std	Y+5, r24	; 0x05
    1786:	3f c0       	rjmp	.+126    	; 0x1806 <LCD_Init+0x124>
	else if (__tmp > 65535)
    1788:	6f 81       	ldd	r22, Y+7	; 0x07
    178a:	78 85       	ldd	r23, Y+8	; 0x08
    178c:	89 85       	ldd	r24, Y+9	; 0x09
    178e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	3f ef       	ldi	r19, 0xFF	; 255
    1794:	4f e7       	ldi	r20, 0x7F	; 127
    1796:	57 e4       	ldi	r21, 0x47	; 71
    1798:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    179c:	18 16       	cp	r1, r24
    179e:	4c f5       	brge	.+82     	; 0x17f2 <LCD_Init+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e2       	ldi	r20, 0x20	; 32
    17ae:	51 e4       	ldi	r21, 0x41	; 65
    17b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	bc 01       	movw	r22, r24
    17ba:	cd 01       	movw	r24, r26
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	0f c0       	rjmp	.+30     	; 0x17e8 <LCD_Init+0x106>
    17ca:	88 ec       	ldi	r24, 0xC8	; 200
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <LCD_Init+0xf4>
    17da:	9c 83       	std	Y+4, r25	; 0x04
    17dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17de:	8d 81       	ldd	r24, Y+5	; 0x05
    17e0:	9e 81       	ldd	r25, Y+6	; 0x06
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	9e 83       	std	Y+6, r25	; 0x06
    17e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	9e 81       	ldd	r25, Y+6	; 0x06
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	69 f7       	brne	.-38     	; 0x17ca <LCD_Init+0xe8>
    17f0:	14 c0       	rjmp	.+40     	; 0x181a <LCD_Init+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17f2:	6f 81       	ldd	r22, Y+7	; 0x07
    17f4:	78 85       	ldd	r23, Y+8	; 0x08
    17f6:	89 85       	ldd	r24, Y+9	; 0x09
    17f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	9e 83       	std	Y+6, r25	; 0x06
    1804:	8d 83       	std	Y+5, r24	; 0x05
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCD_Init+0x130>
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(100);

    LCD_Send_Command(_LCD_4BIT_MODE_1_LINE);
    181a:	83 e3       	ldi	r24, 0x33	; 51
    181c:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>
    LCD_Send_Command(_LCD_4BIT_MODE_2_LINE);
    1820:	82 e4       	ldi	r24, 0x42	; 66
    1822:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>
    LCD_Send_Command(_LCD_4BIT_MODE_3_LINE);
    1826:	88 e2       	ldi	r24, 0x28	; 40
    1828:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>
    LCD_Send_Command(_LCD_DISPLAY_ON_UNDERLINE_ON_CURSOR_OFF);
    182c:	8e e0       	ldi	r24, 0x0E	; 14
    182e:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>
    LCD_Send_Command(_LCD_CLEAR);
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>
    LCD_Send_Command(_LCD_RETURN_HOME);
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>
}
    183e:	2e 96       	adiw	r28, 0x0e	; 14
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <LCD_Send_Command>:

void LCD_Send_Command(u8 command)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	0f 92       	push	r0
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	89 83       	std	Y+1, r24	; 0x01
	Dio_PinWrite(LCD_RS_PIN, LOW);
    185c:	84 e1       	ldi	r24, 0x14	; 20
    185e:	62 e0       	ldi	r22, 0x02	; 2
    1860:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>

    (Get_bit(command, 7)) ? Dio_PinWrite(_PA7, HIGH) : Dio_PinWrite(_PA7, LOW);
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	88 23       	and	r24, r24
    1868:	2c f4       	brge	.+10     	; 0x1874 <LCD_Send_Command+0x24>
    186a:	81 e1       	ldi	r24, 0x11	; 17
    186c:	61 e0       	ldi	r22, 0x01	; 1
    186e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1872:	04 c0       	rjmp	.+8      	; 0x187c <LCD_Send_Command+0x2c>
    1874:	81 e1       	ldi	r24, 0x11	; 17
    1876:	62 e0       	ldi	r22, 0x02	; 2
    1878:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(command, 6)) ? Dio_PinWrite(_PA6, HIGH) : Dio_PinWrite(_PA6, LOW);
    187c:	89 81       	ldd	r24, Y+1	; 0x01
    187e:	82 95       	swap	r24
    1880:	86 95       	lsr	r24
    1882:	86 95       	lsr	r24
    1884:	83 70       	andi	r24, 0x03	; 3
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	81 70       	andi	r24, 0x01	; 1
    188c:	90 70       	andi	r25, 0x00	; 0
    188e:	88 23       	and	r24, r24
    1890:	29 f0       	breq	.+10     	; 0x189c <LCD_Send_Command+0x4c>
    1892:	80 e1       	ldi	r24, 0x10	; 16
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <LCD_Send_Command+0x54>
    189c:	80 e1       	ldi	r24, 0x10	; 16
    189e:	62 e0       	ldi	r22, 0x02	; 2
    18a0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(command, 5)) ? Dio_PinWrite(_PA5, HIGH) : Dio_PinWrite(_PA5, LOW);
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	82 95       	swap	r24
    18a8:	86 95       	lsr	r24
    18aa:	87 70       	andi	r24, 0x07	; 7
    18ac:	88 2f       	mov	r24, r24
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	81 70       	andi	r24, 0x01	; 1
    18b2:	90 70       	andi	r25, 0x00	; 0
    18b4:	88 23       	and	r24, r24
    18b6:	29 f0       	breq	.+10     	; 0x18c2 <LCD_Send_Command+0x72>
    18b8:	8f e0       	ldi	r24, 0x0F	; 15
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    18c0:	04 c0       	rjmp	.+8      	; 0x18ca <LCD_Send_Command+0x7a>
    18c2:	8f e0       	ldi	r24, 0x0F	; 15
    18c4:	62 e0       	ldi	r22, 0x02	; 2
    18c6:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(command, 4)) ? Dio_PinWrite(_PA4, HIGH) : Dio_PinWrite(_PA4, LOW);
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	82 95       	swap	r24
    18ce:	8f 70       	andi	r24, 0x0F	; 15
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	81 70       	andi	r24, 0x01	; 1
    18d6:	90 70       	andi	r25, 0x00	; 0
    18d8:	88 23       	and	r24, r24
    18da:	29 f0       	breq	.+10     	; 0x18e6 <LCD_Send_Command+0x96>
    18dc:	8e e0       	ldi	r24, 0x0E	; 14
    18de:	61 e0       	ldi	r22, 0x01	; 1
    18e0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <LCD_Send_Command+0x9e>
    18e6:	8e e0       	ldi	r24, 0x0E	; 14
    18e8:	62 e0       	ldi	r22, 0x02	; 2
    18ea:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    // Trigger Enable
    Trigger_Enable();
    18ee:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Trigger_Enable>
    (Get_bit(command, 3)) ? Dio_PinWrite(_PA7, HIGH) : Dio_PinWrite(_PA7, LOW);
    18f2:	89 81       	ldd	r24, Y+1	; 0x01
    18f4:	86 95       	lsr	r24
    18f6:	86 95       	lsr	r24
    18f8:	86 95       	lsr	r24
    18fa:	88 2f       	mov	r24, r24
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	90 70       	andi	r25, 0x00	; 0
    1902:	88 23       	and	r24, r24
    1904:	29 f0       	breq	.+10     	; 0x1910 <LCD_Send_Command+0xc0>
    1906:	81 e1       	ldi	r24, 0x11	; 17
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <LCD_Send_Command+0xc8>
    1910:	81 e1       	ldi	r24, 0x11	; 17
    1912:	62 e0       	ldi	r22, 0x02	; 2
    1914:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(command, 2)) ? Dio_PinWrite(_PA6, HIGH) : Dio_PinWrite(_PA6, LOW);
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	86 95       	lsr	r24
    191c:	86 95       	lsr	r24
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	90 70       	andi	r25, 0x00	; 0
    1926:	88 23       	and	r24, r24
    1928:	29 f0       	breq	.+10     	; 0x1934 <LCD_Send_Command+0xe4>
    192a:	80 e1       	ldi	r24, 0x10	; 16
    192c:	61 e0       	ldi	r22, 0x01	; 1
    192e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1932:	04 c0       	rjmp	.+8      	; 0x193c <LCD_Send_Command+0xec>
    1934:	80 e1       	ldi	r24, 0x10	; 16
    1936:	62 e0       	ldi	r22, 0x02	; 2
    1938:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(command, 1)) ? Dio_PinWrite(_PA5, HIGH) : Dio_PinWrite(_PA5, LOW);
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	86 95       	lsr	r24
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	81 70       	andi	r24, 0x01	; 1
    1946:	90 70       	andi	r25, 0x00	; 0
    1948:	88 23       	and	r24, r24
    194a:	29 f0       	breq	.+10     	; 0x1956 <LCD_Send_Command+0x106>
    194c:	8f e0       	ldi	r24, 0x0F	; 15
    194e:	61 e0       	ldi	r22, 0x01	; 1
    1950:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1954:	04 c0       	rjmp	.+8      	; 0x195e <LCD_Send_Command+0x10e>
    1956:	8f e0       	ldi	r24, 0x0F	; 15
    1958:	62 e0       	ldi	r22, 0x02	; 2
    195a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(command, 0)) ? Dio_PinWrite(_PA4, HIGH) : Dio_PinWrite(_PA4, LOW);
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	88 2f       	mov	r24, r24
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	81 70       	andi	r24, 0x01	; 1
    1966:	90 70       	andi	r25, 0x00	; 0
    1968:	88 23       	and	r24, r24
    196a:	29 f0       	breq	.+10     	; 0x1976 <LCD_Send_Command+0x126>
    196c:	8e e0       	ldi	r24, 0x0E	; 14
    196e:	61 e0       	ldi	r22, 0x01	; 1
    1970:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1974:	04 c0       	rjmp	.+8      	; 0x197e <LCD_Send_Command+0x12e>
    1976:	8e e0       	ldi	r24, 0x0E	; 14
    1978:	62 e0       	ldi	r22, 0x02	; 2
    197a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    // Trigger Enable
    Trigger_Enable();
    197e:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Trigger_Enable>
}
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <LCD_Send_Char>:
void LCD_Send_Char(u8 _char)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	0f 92       	push	r0
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	89 83       	std	Y+1, r24	; 0x01
	Dio_PinWrite(LCD_RS_PIN, HIGH);
    1996:	84 e1       	ldi	r24, 0x14	; 20
    1998:	61 e0       	ldi	r22, 0x01	; 1
    199a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>

    (Get_bit(_char, 7)) ? Dio_PinWrite(_PA7, HIGH) : Dio_PinWrite(_PA7, LOW);
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	88 23       	and	r24, r24
    19a2:	2c f4       	brge	.+10     	; 0x19ae <LCD_Send_Char+0x24>
    19a4:	81 e1       	ldi	r24, 0x11	; 17
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    19ac:	04 c0       	rjmp	.+8      	; 0x19b6 <LCD_Send_Char+0x2c>
    19ae:	81 e1       	ldi	r24, 0x11	; 17
    19b0:	62 e0       	ldi	r22, 0x02	; 2
    19b2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(_char, 6)) ? Dio_PinWrite(_PA6, HIGH) : Dio_PinWrite(_PA6, LOW);
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	82 95       	swap	r24
    19ba:	86 95       	lsr	r24
    19bc:	86 95       	lsr	r24
    19be:	83 70       	andi	r24, 0x03	; 3
    19c0:	88 2f       	mov	r24, r24
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	81 70       	andi	r24, 0x01	; 1
    19c6:	90 70       	andi	r25, 0x00	; 0
    19c8:	88 23       	and	r24, r24
    19ca:	29 f0       	breq	.+10     	; 0x19d6 <LCD_Send_Char+0x4c>
    19cc:	80 e1       	ldi	r24, 0x10	; 16
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    19d4:	04 c0       	rjmp	.+8      	; 0x19de <LCD_Send_Char+0x54>
    19d6:	80 e1       	ldi	r24, 0x10	; 16
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(_char, 5)) ? Dio_PinWrite(_PA5, HIGH) : Dio_PinWrite(_PA5, LOW);
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	82 95       	swap	r24
    19e2:	86 95       	lsr	r24
    19e4:	87 70       	andi	r24, 0x07	; 7
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	81 70       	andi	r24, 0x01	; 1
    19ec:	90 70       	andi	r25, 0x00	; 0
    19ee:	88 23       	and	r24, r24
    19f0:	29 f0       	breq	.+10     	; 0x19fc <LCD_Send_Char+0x72>
    19f2:	8f e0       	ldi	r24, 0x0F	; 15
    19f4:	61 e0       	ldi	r22, 0x01	; 1
    19f6:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    19fa:	04 c0       	rjmp	.+8      	; 0x1a04 <LCD_Send_Char+0x7a>
    19fc:	8f e0       	ldi	r24, 0x0F	; 15
    19fe:	62 e0       	ldi	r22, 0x02	; 2
    1a00:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(_char, 4)) ? Dio_PinWrite(_PA4, HIGH) : Dio_PinWrite(_PA4, LOW);
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	82 95       	swap	r24
    1a08:	8f 70       	andi	r24, 0x0F	; 15
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	81 70       	andi	r24, 0x01	; 1
    1a10:	90 70       	andi	r25, 0x00	; 0
    1a12:	88 23       	and	r24, r24
    1a14:	29 f0       	breq	.+10     	; 0x1a20 <LCD_Send_Char+0x96>
    1a16:	8e e0       	ldi	r24, 0x0E	; 14
    1a18:	61 e0       	ldi	r22, 0x01	; 1
    1a1a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1a1e:	04 c0       	rjmp	.+8      	; 0x1a28 <LCD_Send_Char+0x9e>
    1a20:	8e e0       	ldi	r24, 0x0E	; 14
    1a22:	62 e0       	ldi	r22, 0x02	; 2
    1a24:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    // Trigger Enable
    Trigger_Enable();
    1a28:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Trigger_Enable>
    (Get_bit(_char, 3)) ? Dio_PinWrite(_PA7, HIGH) : Dio_PinWrite(_PA7, LOW);
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	86 95       	lsr	r24
    1a30:	86 95       	lsr	r24
    1a32:	86 95       	lsr	r24
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	81 70       	andi	r24, 0x01	; 1
    1a3a:	90 70       	andi	r25, 0x00	; 0
    1a3c:	88 23       	and	r24, r24
    1a3e:	29 f0       	breq	.+10     	; 0x1a4a <LCD_Send_Char+0xc0>
    1a40:	81 e1       	ldi	r24, 0x11	; 17
    1a42:	61 e0       	ldi	r22, 0x01	; 1
    1a44:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <LCD_Send_Char+0xc8>
    1a4a:	81 e1       	ldi	r24, 0x11	; 17
    1a4c:	62 e0       	ldi	r22, 0x02	; 2
    1a4e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(_char, 2)) ? Dio_PinWrite(_PA6, HIGH) : Dio_PinWrite(_PA6, LOW);
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	86 95       	lsr	r24
    1a56:	86 95       	lsr	r24
    1a58:	88 2f       	mov	r24, r24
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	81 70       	andi	r24, 0x01	; 1
    1a5e:	90 70       	andi	r25, 0x00	; 0
    1a60:	88 23       	and	r24, r24
    1a62:	29 f0       	breq	.+10     	; 0x1a6e <LCD_Send_Char+0xe4>
    1a64:	80 e1       	ldi	r24, 0x10	; 16
    1a66:	61 e0       	ldi	r22, 0x01	; 1
    1a68:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1a6c:	04 c0       	rjmp	.+8      	; 0x1a76 <LCD_Send_Char+0xec>
    1a6e:	80 e1       	ldi	r24, 0x10	; 16
    1a70:	62 e0       	ldi	r22, 0x02	; 2
    1a72:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(_char, 1)) ? Dio_PinWrite(_PA5, HIGH) : Dio_PinWrite(_PA5, LOW);
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	86 95       	lsr	r24
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	81 70       	andi	r24, 0x01	; 1
    1a80:	90 70       	andi	r25, 0x00	; 0
    1a82:	88 23       	and	r24, r24
    1a84:	29 f0       	breq	.+10     	; 0x1a90 <LCD_Send_Char+0x106>
    1a86:	8f e0       	ldi	r24, 0x0F	; 15
    1a88:	61 e0       	ldi	r22, 0x01	; 1
    1a8a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1a8e:	04 c0       	rjmp	.+8      	; 0x1a98 <LCD_Send_Char+0x10e>
    1a90:	8f e0       	ldi	r24, 0x0F	; 15
    1a92:	62 e0       	ldi	r22, 0x02	; 2
    1a94:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    (Get_bit(_char, 0)) ? Dio_PinWrite(_PA4, HIGH) : Dio_PinWrite(_PA4, LOW);
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	81 70       	andi	r24, 0x01	; 1
    1aa0:	90 70       	andi	r25, 0x00	; 0
    1aa2:	88 23       	and	r24, r24
    1aa4:	29 f0       	breq	.+10     	; 0x1ab0 <LCD_Send_Char+0x126>
    1aa6:	8e e0       	ldi	r24, 0x0E	; 14
    1aa8:	61 e0       	ldi	r22, 0x01	; 1
    1aaa:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1aae:	04 c0       	rjmp	.+8      	; 0x1ab8 <LCD_Send_Char+0x12e>
    1ab0:	8e e0       	ldi	r24, 0x0E	; 14
    1ab2:	62 e0       	ldi	r22, 0x02	; 2
    1ab4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    // Trigger Enable
    Trigger_Enable();
    1ab8:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <Trigger_Enable>
}
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <LCD_Send_Char_Pos>:
void LCD_Send_Char_Pos(u8 c, u8 row, u8 column)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <LCD_Send_Char_Pos+0x6>
    1aca:	0f 92       	push	r0
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	6a 83       	std	Y+2, r22	; 0x02
    1ad4:	4b 83       	std	Y+3, r20	; 0x03
    Set_Cursor_Pos(row, column);
    1ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad8:	6b 81       	ldd	r22, Y+3	; 0x03
    1ada:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <Set_Cursor_Pos>
    LCD_Send_Char(c);
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	0e 94 c5 0c 	call	0x198a	; 0x198a <LCD_Send_Char>
}
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <LCD_Send_String>:
void LCD_Send_String(u8 *string)
{
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <LCD_Send_String+0x6>
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62
    1afa:	9a 83       	std	Y+2, r25	; 0x02
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	0b c0       	rjmp	.+22     	; 0x1b16 <LCD_Send_String+0x26>
    while (*string != '\0')
    {
        LCD_Send_Char(*string++);
    1b00:	e9 81       	ldd	r30, Y+1	; 0x01
    1b02:	fa 81       	ldd	r31, Y+2	; 0x02
    1b04:	20 81       	ld	r18, Z
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0a:	01 96       	adiw	r24, 0x01	; 1
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	82 2f       	mov	r24, r18
    1b12:	0e 94 c5 0c 	call	0x198a	; 0x198a <LCD_Send_Char>
    Set_Cursor_Pos(row, column);
    LCD_Send_Char(c);
}
void LCD_Send_String(u8 *string)
{
    while (*string != '\0')
    1b16:	e9 81       	ldd	r30, Y+1	; 0x01
    1b18:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1a:	80 81       	ld	r24, Z
    1b1c:	88 23       	and	r24, r24
    1b1e:	81 f7       	brne	.-32     	; 0x1b00 <LCD_Send_String+0x10>
    {
        LCD_Send_Char(*string++);
    }
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <LCD_Send_String_Pos>:
void LCD_Send_String_Pos(u8 *string, u8 row, u8 column)
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <LCD_Send_String_Pos+0x6>
    1b30:	00 d0       	rcall	.+0      	; 0x1b32 <LCD_Send_String_Pos+0x8>
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	6b 83       	std	Y+3, r22	; 0x03
    1b3c:	4c 83       	std	Y+4, r20	; 0x04
    Set_Cursor_Pos(row, column);
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	6c 81       	ldd	r22, Y+4	; 0x04
    1b42:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <Set_Cursor_Pos>
    LCD_Send_String(string);
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LCD_Send_String>
}
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <LCD_Send_Number>:

void LCD_Send_Number(u32 num)
{
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	60 97       	sbiw	r28, 0x10	; 16
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	6d 87       	std	Y+13, r22	; 0x0d
    1b76:	7e 87       	std	Y+14, r23	; 0x0e
    1b78:	8f 87       	std	Y+15, r24	; 0x0f
    1b7a:	98 8b       	std	Y+16, r25	; 0x10
	u8 arr[10], i = 0, j = 0;
    1b7c:	1a 82       	std	Y+2, r1	; 0x02
    1b7e:	19 82       	std	Y+1, r1	; 0x01
    if (num == 0)
    1b80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b84:	af 85       	ldd	r26, Y+15	; 0x0f
    1b86:	b8 89       	ldd	r27, Y+16	; 0x10
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	a1 05       	cpc	r26, r1
    1b8c:	b1 05       	cpc	r27, r1
    1b8e:	91 f5       	brne	.+100    	; 0x1bf4 <LCD_Send_Number+0x98>
    {
        LCD_Send_Char('0');
    1b90:	80 e3       	ldi	r24, 0x30	; 48
    1b92:	0e 94 c5 0c 	call	0x198a	; 0x198a <LCD_Send_Char>
    1b96:	4d c0       	rjmp	.+154    	; 0x1c32 <LCD_Send_Number+0xd6>
    }
    else
    {
        while (num)
        {
            arr[i] = num % 10 + '0';
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	08 2f       	mov	r16, r24
    1b9c:	10 e0       	ldi	r17, 0x00	; 0
    1b9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ba0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ba2:	af 85       	ldd	r26, Y+15	; 0x0f
    1ba4:	b8 89       	ldd	r27, Y+16	; 0x10
    1ba6:	2a e0       	ldi	r18, 0x0A	; 10
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e0       	ldi	r20, 0x00	; 0
    1bac:	50 e0       	ldi	r21, 0x00	; 0
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__udivmodsi4>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	28 2f       	mov	r18, r24
    1bbc:	20 5d       	subi	r18, 0xD0	; 208
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	03 96       	adiw	r24, 0x03	; 3
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	e0 0f       	add	r30, r16
    1bc6:	f1 1f       	adc	r31, r17
    1bc8:	20 83       	st	Z, r18
            num /= 10;
    1bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bce:	af 85       	ldd	r26, Y+15	; 0x0f
    1bd0:	b8 89       	ldd	r27, Y+16	; 0x10
    1bd2:	2a e0       	ldi	r18, 0x0A	; 10
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e0       	ldi	r20, 0x00	; 0
    1bd8:	50 e0       	ldi	r21, 0x00	; 0
    1bda:	bc 01       	movw	r22, r24
    1bdc:	cd 01       	movw	r24, r26
    1bde:	0e 94 da 16 	call	0x2db4	; 0x2db4 <__udivmodsi4>
    1be2:	da 01       	movw	r26, r20
    1be4:	c9 01       	movw	r24, r18
    1be6:	8d 87       	std	Y+13, r24	; 0x0d
    1be8:	9e 87       	std	Y+14, r25	; 0x0e
    1bea:	af 87       	std	Y+15, r26	; 0x0f
    1bec:	b8 8b       	std	Y+16, r27	; 0x10
            i++;
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	8a 83       	std	Y+2, r24	; 0x02
    {
        LCD_Send_Char('0');
    }
    else
    {
        while (num)
    1bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf8:	af 85       	ldd	r26, Y+15	; 0x0f
    1bfa:	b8 89       	ldd	r27, Y+16	; 0x10
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	a1 05       	cpc	r26, r1
    1c00:	b1 05       	cpc	r27, r1
    1c02:	51 f6       	brne	.-108    	; 0x1b98 <LCD_Send_Number+0x3c>
        {
            arr[i] = num % 10 + '0';
            num /= 10;
            i++;
        }
        for (j = i; j > 0; j--)
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	11 c0       	rjmp	.+34     	; 0x1c2c <LCD_Send_Number+0xd0>
        {
            LCD_Send_Char(arr[j - 1]);
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	88 2f       	mov	r24, r24
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	9c 01       	movw	r18, r24
    1c12:	21 50       	subi	r18, 0x01	; 1
    1c14:	30 40       	sbci	r19, 0x00	; 0
    1c16:	ce 01       	movw	r24, r28
    1c18:	03 96       	adiw	r24, 0x03	; 3
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	e2 0f       	add	r30, r18
    1c1e:	f3 1f       	adc	r31, r19
    1c20:	80 81       	ld	r24, Z
    1c22:	0e 94 c5 0c 	call	0x198a	; 0x198a <LCD_Send_Char>
        {
            arr[i] = num % 10 + '0';
            num /= 10;
            i++;
        }
        for (j = i; j > 0; j--)
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	81 50       	subi	r24, 0x01	; 1
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	88 23       	and	r24, r24
    1c30:	61 f7       	brne	.-40     	; 0x1c0a <LCD_Send_Number+0xae>
        {
            LCD_Send_Char(arr[j - 1]);
        }
    }
}
    1c32:	60 96       	adiw	r28, 0x10	; 16
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	08 95       	ret

00001c48 <LCD_Send_Number_Pos>:
void LCD_Send_Number_Pos(u32 num, u8 row, u8 column)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <LCD_Send_Number_Pos+0x6>
    1c4e:	00 d0       	rcall	.+0      	; 0x1c50 <LCD_Send_Number_Pos+0x8>
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <LCD_Send_Number_Pos+0xa>
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	69 83       	std	Y+1, r22	; 0x01
    1c58:	7a 83       	std	Y+2, r23	; 0x02
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
    1c5c:	9c 83       	std	Y+4, r25	; 0x04
    1c5e:	4d 83       	std	Y+5, r20	; 0x05
    1c60:	2e 83       	std	Y+6, r18	; 0x06
    Set_Cursor_Pos(row, column);
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	6e 81       	ldd	r22, Y+6	; 0x06
    1c66:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <Set_Cursor_Pos>
    LCD_Send_Number(num);
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6e:	ab 81       	ldd	r26, Y+3	; 0x03
    1c70:	bc 81       	ldd	r27, Y+4	; 0x04
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <LCD_Send_Number>
}
    1c7a:	26 96       	adiw	r28, 0x06	; 6
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	de bf       	out	0x3e, r29	; 62
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <Trigger_Enable>:

static void Trigger_Enable()
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	e0 97       	sbiw	r28, 0x30	; 48
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
	Dio_PinWrite(LCD_EN_PIN, HIGH);
    1ca0:	86 e1       	ldi	r24, 0x16	; 22
    1ca2:	61 e0       	ldi	r22, 0x01	; 1
    1ca4:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a0 e2       	ldi	r26, 0x20	; 32
    1cae:	b1 e4       	ldi	r27, 0x41	; 65
    1cb0:	8d a7       	std	Y+45, r24	; 0x2d
    1cb2:	9e a7       	std	Y+46, r25	; 0x2e
    1cb4:	af a7       	std	Y+47, r26	; 0x2f
    1cb6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cb8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1cba:	7e a5       	ldd	r23, Y+46	; 0x2e
    1cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc0:	2b ea       	ldi	r18, 0xAB	; 171
    1cc2:	3a ea       	ldi	r19, 0xAA	; 170
    1cc4:	4a e2       	ldi	r20, 0x2A	; 42
    1cc6:	50 e4       	ldi	r21, 0x40	; 64
    1cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	89 a7       	std	Y+41, r24	; 0x29
    1cd2:	9a a7       	std	Y+42, r25	; 0x2a
    1cd4:	ab a7       	std	Y+43, r26	; 0x2b
    1cd6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1cd8:	69 a5       	ldd	r22, Y+41	; 0x29
    1cda:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cde:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e8       	ldi	r20, 0x80	; 128
    1ce6:	5f e3       	ldi	r21, 0x3F	; 63
    1ce8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cec:	88 23       	and	r24, r24
    1cee:	1c f4       	brge	.+6      	; 0x1cf6 <Trigger_Enable+0x6a>
		__ticks = 1;
    1cf0:	81 e0       	ldi	r24, 0x01	; 1
    1cf2:	88 a7       	std	Y+40, r24	; 0x28
    1cf4:	91 c0       	rjmp	.+290    	; 0x1e18 <Trigger_Enable+0x18c>
	else if (__tmp > 255)
    1cf6:	69 a5       	ldd	r22, Y+41	; 0x29
    1cf8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cfc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4f e7       	ldi	r20, 0x7F	; 127
    1d04:	53 e4       	ldi	r21, 0x43	; 67
    1d06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d0a:	18 16       	cp	r1, r24
    1d0c:	0c f0       	brlt	.+2      	; 0x1d10 <Trigger_Enable+0x84>
    1d0e:	7b c0       	rjmp	.+246    	; 0x1e06 <Trigger_Enable+0x17a>
	{
		_delay_ms(__us / 1000.0);
    1d10:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d12:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d16:	98 a9       	ldd	r25, Y+48	; 0x30
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	4a e7       	ldi	r20, 0x7A	; 122
    1d1e:	54 e4       	ldi	r21, 0x44	; 68
    1d20:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	8c a3       	std	Y+36, r24	; 0x24
    1d2a:	9d a3       	std	Y+37, r25	; 0x25
    1d2c:	ae a3       	std	Y+38, r26	; 0x26
    1d2e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d30:	6c a1       	ldd	r22, Y+36	; 0x24
    1d32:	7d a1       	ldd	r23, Y+37	; 0x25
    1d34:	8e a1       	ldd	r24, Y+38	; 0x26
    1d36:	9f a1       	ldd	r25, Y+39	; 0x27
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a ef       	ldi	r20, 0xFA	; 250
    1d3e:	54 e4       	ldi	r21, 0x44	; 68
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	88 a3       	std	Y+32, r24	; 0x20
    1d4a:	99 a3       	std	Y+33, r25	; 0x21
    1d4c:	aa a3       	std	Y+34, r26	; 0x22
    1d4e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1d50:	68 a1       	ldd	r22, Y+32	; 0x20
    1d52:	79 a1       	ldd	r23, Y+33	; 0x21
    1d54:	8a a1       	ldd	r24, Y+34	; 0x22
    1d56:	9b a1       	ldd	r25, Y+35	; 0x23
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e8       	ldi	r20, 0x80	; 128
    1d5e:	5f e3       	ldi	r21, 0x3F	; 63
    1d60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d64:	88 23       	and	r24, r24
    1d66:	2c f4       	brge	.+10     	; 0x1d72 <Trigger_Enable+0xe6>
		__ticks = 1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	9f 8f       	std	Y+31, r25	; 0x1f
    1d6e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d70:	3f c0       	rjmp	.+126    	; 0x1df0 <Trigger_Enable+0x164>
	else if (__tmp > 65535)
    1d72:	68 a1       	ldd	r22, Y+32	; 0x20
    1d74:	79 a1       	ldd	r23, Y+33	; 0x21
    1d76:	8a a1       	ldd	r24, Y+34	; 0x22
    1d78:	9b a1       	ldd	r25, Y+35	; 0x23
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	3f ef       	ldi	r19, 0xFF	; 255
    1d7e:	4f e7       	ldi	r20, 0x7F	; 127
    1d80:	57 e4       	ldi	r21, 0x47	; 71
    1d82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d86:	18 16       	cp	r1, r24
    1d88:	4c f5       	brge	.+82     	; 0x1ddc <Trigger_Enable+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8a:	6c a1       	ldd	r22, Y+36	; 0x24
    1d8c:	7d a1       	ldd	r23, Y+37	; 0x25
    1d8e:	8e a1       	ldd	r24, Y+38	; 0x26
    1d90:	9f a1       	ldd	r25, Y+39	; 0x27
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e2       	ldi	r20, 0x20	; 32
    1d98:	51 e4       	ldi	r21, 0x41	; 65
    1d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9f 8f       	std	Y+31, r25	; 0x1f
    1db0:	8e 8f       	std	Y+30, r24	; 0x1e
    1db2:	0f c0       	rjmp	.+30     	; 0x1dd2 <Trigger_Enable+0x146>
    1db4:	88 ec       	ldi	r24, 0xC8	; 200
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	9d 8f       	std	Y+29, r25	; 0x1d
    1dba:	8c 8f       	std	Y+28, r24	; 0x1c
    1dbc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1dbe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <Trigger_Enable+0x134>
    1dc4:	9d 8f       	std	Y+29, r25	; 0x1d
    1dc6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	9f 8f       	std	Y+31, r25	; 0x1f
    1dd0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dd4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1dd6:	00 97       	sbiw	r24, 0x00	; 0
    1dd8:	69 f7       	brne	.-38     	; 0x1db4 <Trigger_Enable+0x128>
    1dda:	24 c0       	rjmp	.+72     	; 0x1e24 <Trigger_Enable+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ddc:	68 a1       	ldd	r22, Y+32	; 0x20
    1dde:	79 a1       	ldd	r23, Y+33	; 0x21
    1de0:	8a a1       	ldd	r24, Y+34	; 0x22
    1de2:	9b a1       	ldd	r25, Y+35	; 0x23
    1de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	9f 8f       	std	Y+31, r25	; 0x1f
    1dee:	8e 8f       	std	Y+30, r24	; 0x1e
    1df0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1df2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1df4:	9b 8f       	std	Y+27, r25	; 0x1b
    1df6:	8a 8f       	std	Y+26, r24	; 0x1a
    1df8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dfa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dfc:	01 97       	sbiw	r24, 0x01	; 1
    1dfe:	f1 f7       	brne	.-4      	; 0x1dfc <Trigger_Enable+0x170>
    1e00:	9b 8f       	std	Y+27, r25	; 0x1b
    1e02:	8a 8f       	std	Y+26, r24	; 0x1a
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <Trigger_Enable+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e06:	69 a5       	ldd	r22, Y+41	; 0x29
    1e08:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	88 a7       	std	Y+40, r24	; 0x28
    1e18:	88 a5       	ldd	r24, Y+40	; 0x28
    1e1a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e1c:	89 8d       	ldd	r24, Y+25	; 0x19
    1e1e:	8a 95       	dec	r24
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <Trigger_Enable+0x192>
    1e22:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(10);
    Dio_PinWrite(LCD_EN_PIN, LOW);
    1e24:	86 e1       	ldi	r24, 0x16	; 22
    1e26:	62 e0       	ldi	r22, 0x02	; 2
    1e28:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	aa ef       	ldi	r26, 0xFA	; 250
    1e32:	b4 e4       	ldi	r27, 0x44	; 68
    1e34:	8d 8b       	std	Y+21, r24	; 0x15
    1e36:	9e 8b       	std	Y+22, r25	; 0x16
    1e38:	af 8b       	std	Y+23, r26	; 0x17
    1e3a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e40:	8f 89       	ldd	r24, Y+23	; 0x17
    1e42:	98 8d       	ldd	r25, Y+24	; 0x18
    1e44:	2b ea       	ldi	r18, 0xAB	; 171
    1e46:	3a ea       	ldi	r19, 0xAA	; 170
    1e48:	4a e2       	ldi	r20, 0x2A	; 42
    1e4a:	50 e4       	ldi	r21, 0x40	; 64
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	89 8b       	std	Y+17, r24	; 0x11
    1e56:	9a 8b       	std	Y+18, r25	; 0x12
    1e58:	ab 8b       	std	Y+19, r26	; 0x13
    1e5a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e5c:	69 89       	ldd	r22, Y+17	; 0x11
    1e5e:	7a 89       	ldd	r23, Y+18	; 0x12
    1e60:	8b 89       	ldd	r24, Y+19	; 0x13
    1e62:	9c 89       	ldd	r25, Y+20	; 0x14
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	1c f4       	brge	.+6      	; 0x1e7a <Trigger_Enable+0x1ee>
		__ticks = 1;
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	88 8b       	std	Y+16, r24	; 0x10
    1e78:	91 c0       	rjmp	.+290    	; 0x1f9c <Trigger_Enable+0x310>
	else if (__tmp > 255)
    1e7a:	69 89       	ldd	r22, Y+17	; 0x11
    1e7c:	7a 89       	ldd	r23, Y+18	; 0x12
    1e7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e80:	9c 89       	ldd	r25, Y+20	; 0x14
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4f e7       	ldi	r20, 0x7F	; 127
    1e88:	53 e4       	ldi	r21, 0x43	; 67
    1e8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e8e:	18 16       	cp	r1, r24
    1e90:	0c f0       	brlt	.+2      	; 0x1e94 <Trigger_Enable+0x208>
    1e92:	7b c0       	rjmp	.+246    	; 0x1f8a <Trigger_Enable+0x2fe>
	{
		_delay_ms(__us / 1000.0);
    1e94:	6d 89       	ldd	r22, Y+21	; 0x15
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a e7       	ldi	r20, 0x7A	; 122
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8c 87       	std	Y+12, r24	; 0x0c
    1eae:	9d 87       	std	Y+13, r25	; 0x0d
    1eb0:	ae 87       	std	Y+14, r26	; 0x0e
    1eb2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eb6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1eb8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1eba:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	4a ef       	ldi	r20, 0xFA	; 250
    1ec2:	54 e4       	ldi	r21, 0x44	; 68
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	88 87       	std	Y+8, r24	; 0x08
    1ece:	99 87       	std	Y+9, r25	; 0x09
    1ed0:	aa 87       	std	Y+10, r26	; 0x0a
    1ed2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ed4:	68 85       	ldd	r22, Y+8	; 0x08
    1ed6:	79 85       	ldd	r23, Y+9	; 0x09
    1ed8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eda:	9b 85       	ldd	r25, Y+11	; 0x0b
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e8       	ldi	r20, 0x80	; 128
    1ee2:	5f e3       	ldi	r21, 0x3F	; 63
    1ee4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee8:	88 23       	and	r24, r24
    1eea:	2c f4       	brge	.+10     	; 0x1ef6 <Trigger_Enable+0x26a>
		__ticks = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9f 83       	std	Y+7, r25	; 0x07
    1ef2:	8e 83       	std	Y+6, r24	; 0x06
    1ef4:	3f c0       	rjmp	.+126    	; 0x1f74 <Trigger_Enable+0x2e8>
	else if (__tmp > 65535)
    1ef6:	68 85       	ldd	r22, Y+8	; 0x08
    1ef8:	79 85       	ldd	r23, Y+9	; 0x09
    1efa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1efc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	3f ef       	ldi	r19, 0xFF	; 255
    1f02:	4f e7       	ldi	r20, 0x7F	; 127
    1f04:	57 e4       	ldi	r21, 0x47	; 71
    1f06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	4c f5       	brge	.+82     	; 0x1f60 <Trigger_Enable+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f10:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f12:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f14:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e2       	ldi	r20, 0x20	; 32
    1f1c:	51 e4       	ldi	r21, 0x41	; 65
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9f 83       	std	Y+7, r25	; 0x07
    1f34:	8e 83       	std	Y+6, r24	; 0x06
    1f36:	0f c0       	rjmp	.+30     	; 0x1f56 <Trigger_Enable+0x2ca>
    1f38:	88 ec       	ldi	r24, 0xC8	; 200
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9d 83       	std	Y+5, r25	; 0x05
    1f3e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f40:	8c 81       	ldd	r24, Y+4	; 0x04
    1f42:	9d 81       	ldd	r25, Y+5	; 0x05
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <Trigger_Enable+0x2b8>
    1f48:	9d 83       	std	Y+5, r25	; 0x05
    1f4a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	9f 83       	std	Y+7, r25	; 0x07
    1f54:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f56:	8e 81       	ldd	r24, Y+6	; 0x06
    1f58:	9f 81       	ldd	r25, Y+7	; 0x07
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	69 f7       	brne	.-38     	; 0x1f38 <Trigger_Enable+0x2ac>
    1f5e:	24 c0       	rjmp	.+72     	; 0x1fa8 <Trigger_Enable+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f60:	68 85       	ldd	r22, Y+8	; 0x08
    1f62:	79 85       	ldd	r23, Y+9	; 0x09
    1f64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	9f 83       	std	Y+7, r25	; 0x07
    1f72:	8e 83       	std	Y+6, r24	; 0x06
    1f74:	8e 81       	ldd	r24, Y+6	; 0x06
    1f76:	9f 81       	ldd	r25, Y+7	; 0x07
    1f78:	9b 83       	std	Y+3, r25	; 0x03
    1f7a:	8a 83       	std	Y+2, r24	; 0x02
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <Trigger_Enable+0x2f4>
    1f84:	9b 83       	std	Y+3, r25	; 0x03
    1f86:	8a 83       	std	Y+2, r24	; 0x02
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <Trigger_Enable+0x31c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f8a:	69 89       	ldd	r22, Y+17	; 0x11
    1f8c:	7a 89       	ldd	r23, Y+18	; 0x12
    1f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f90:	9c 89       	ldd	r25, Y+20	; 0x14
    1f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	88 8b       	std	Y+16, r24	; 0x10
    1f9c:	88 89       	ldd	r24, Y+16	; 0x10
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	8a 95       	dec	r24
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <Trigger_Enable+0x316>
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2000 );
}
    1fa8:	e0 96       	adiw	r28, 0x30	; 48
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	de bf       	out	0x3e, r29	; 62
    1fb0:	0f be       	out	0x3f, r0	; 63
    1fb2:	cd bf       	out	0x3d, r28	; 61
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <Set_Cursor_Pos>:
static void Set_Cursor_Pos(u8 row, u8 column)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <Set_Cursor_Pos+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <Set_Cursor_Pos+0x8>
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	6a 83       	std	Y+2, r22	; 0x02
    column--;
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	81 50       	subi	r24, 0x01	; 1
    1fce:	8a 83       	std	Y+2, r24	; 0x02
    switch (row)
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	28 2f       	mov	r18, r24
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	3c 83       	std	Y+4, r19	; 0x04
    1fd8:	2b 83       	std	Y+3, r18	; 0x03
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	91 05       	cpc	r25, r1
    1fe2:	31 f0       	breq	.+12     	; 0x1ff0 <Set_Cursor_Pos+0x36>
    1fe4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe8:	22 30       	cpi	r18, 0x02	; 2
    1fea:	31 05       	cpc	r19, r1
    1fec:	31 f0       	breq	.+12     	; 0x1ffa <Set_Cursor_Pos+0x40>
    1fee:	09 c0       	rjmp	.+18     	; 0x2002 <Set_Cursor_Pos+0x48>
    {
    case 1:
        LCD_Send_Command((0x80 + column));
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	80 58       	subi	r24, 0x80	; 128
    1ff4:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>
    1ff8:	04 c0       	rjmp	.+8      	; 0x2002 <Set_Cursor_Pos+0x48>
        break;
    case 2:
        LCD_Send_Command((0xc0 + column));
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	80 54       	subi	r24, 0x40	; 64
    1ffe:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>
        break;
    default:;
    }
}
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <KP_GetPressed>:
    {'4' , '5' , '6' , 'x'},
    {'1' , '2' , '3' , '-'},
    {'C' , '0' , '=' , '+'}
};
u8 KP_GetPressed()
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	63 97       	sbiw	r28, 0x13	; 19
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    u8 LRowConter = 0;
    2024:	1b 8a       	std	Y+19, r1	; 0x13
    u8 RowConter = 0;
    2026:	1a 8a       	std	Y+18, r1	; 0x12
    u8 LColumnConter = 0;
    2028:	19 8a       	std	Y+17, r1	; 0x11
    u8 state = LOW;
    202a:	82 e0       	ldi	r24, 0x02	; 2
    202c:	88 8b       	std	Y+16, r24	; 0x10
    u8 Btn = 0;
    202e:	1f 86       	std	Y+15, r1	; 0x0f
    for (LRowConter = 0; LRowConter < KEYPAD_ROWS; LRowConter++)
    2030:	1b 8a       	std	Y+19, r1	; 0x13
    2032:	ac c0       	rjmp	.+344    	; 0x218c <KP_GetPressed+0x17c>
    {
        for (RowConter = KEYPAD_ROW_1; RowConter < KEYPAD_ROW_1 + KEYPAD_ROWS; RowConter++)
    2034:	8e e1       	ldi	r24, 0x1E	; 30
    2036:	8a 8b       	std	Y+18, r24	; 0x12
    2038:	07 c0       	rjmp	.+14     	; 0x2048 <KP_GetPressed+0x38>
        {
        	Dio_PinWrite(RowConter, LOW);
    203a:	8a 89       	ldd	r24, Y+18	; 0x12
    203c:	62 e0       	ldi	r22, 0x02	; 2
    203e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    u8 LColumnConter = 0;
    u8 state = LOW;
    u8 Btn = 0;
    for (LRowConter = 0; LRowConter < KEYPAD_ROWS; LRowConter++)
    {
        for (RowConter = KEYPAD_ROW_1; RowConter < KEYPAD_ROW_1 + KEYPAD_ROWS; RowConter++)
    2042:	8a 89       	ldd	r24, Y+18	; 0x12
    2044:	8f 5f       	subi	r24, 0xFF	; 255
    2046:	8a 8b       	std	Y+18, r24	; 0x12
    2048:	8a 89       	ldd	r24, Y+18	; 0x12
    204a:	82 32       	cpi	r24, 0x22	; 34
    204c:	b0 f3       	brcs	.-20     	; 0x203a <KP_GetPressed+0x2a>
        {
        	Dio_PinWrite(RowConter, LOW);
        }
        Dio_PinWrite(LRowConter + KEYPAD_ROW_1, HIGH);
    204e:	8b 89       	ldd	r24, Y+19	; 0x13
    2050:	82 5e       	subi	r24, 0xE2	; 226
    2052:	61 e0       	ldi	r22, 0x01	; 1
    2054:	0e 94 ee 07 	call	0xfdc	; 0xfdc <Dio_PinWrite>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 ea       	ldi	r26, 0xA0	; 160
    205e:	b0 e4       	ldi	r27, 0x40	; 64
    2060:	8b 87       	std	Y+11, r24	; 0x0b
    2062:	9c 87       	std	Y+12, r25	; 0x0c
    2064:	ad 87       	std	Y+13, r26	; 0x0d
    2066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8f 83       	std	Y+7, r24	; 0x07
    2082:	98 87       	std	Y+8, r25	; 0x08
    2084:	a9 87       	std	Y+9, r26	; 0x09
    2086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <KP_GetPressed+0x9a>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <KP_GetPressed+0x118>
	else if (__tmp > 65535)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <KP_GetPressed+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <KP_GetPressed+0xfa>
    20ec:	88 ec       	ldi	r24, 0xC8	; 200
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <KP_GetPressed+0xe8>
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <KP_GetPressed+0xdc>
    2112:	14 c0       	rjmp	.+40     	; 0x213c <KP_GetPressed+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	6f 81       	ldd	r22, Y+7	; 0x07
    2116:	78 85       	ldd	r23, Y+8	; 0x08
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <KP_GetPressed+0x124>
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(5);
        for (LColumnConter = KEYPAD_COLUMNS_1; LColumnConter < KEYPAD_COLUMNS_1 + KEYPAD_COLUMNS; LColumnConter++)
    213c:	82 e2       	ldi	r24, 0x22	; 34
    213e:	89 8b       	std	Y+17, r24	; 0x11
    2140:	1f c0       	rjmp	.+62     	; 0x2180 <KP_GetPressed+0x170>
        {
            state = Dio_PinRead(LColumnConter);
    2142:	89 89       	ldd	r24, Y+17	; 0x11
    2144:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <Dio_PinRead>
    2148:	88 8b       	std	Y+16, r24	; 0x10
            if (state == HIGH)
    214a:	88 89       	ldd	r24, Y+16	; 0x10
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	a9 f4       	brne	.+42     	; 0x217a <KP_GetPressed+0x16a>
            {
                Btn = KP_Maparr[LRowConter][LColumnConter - KEYPAD_COLUMNS_1];
    2150:	8b 89       	ldd	r24, Y+19	; 0x13
    2152:	48 2f       	mov	r20, r24
    2154:	50 e0       	ldi	r21, 0x00	; 0
    2156:	89 89       	ldd	r24, Y+17	; 0x11
    2158:	88 2f       	mov	r24, r24
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9c 01       	movw	r18, r24
    215e:	22 52       	subi	r18, 0x22	; 34
    2160:	30 40       	sbci	r19, 0x00	; 0
    2162:	ca 01       	movw	r24, r20
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	82 0f       	add	r24, r18
    216e:	93 1f       	adc	r25, r19
    2170:	fc 01       	movw	r30, r24
    2172:	e5 57       	subi	r30, 0x75	; 117
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	80 81       	ld	r24, Z
    2178:	8f 87       	std	Y+15, r24	; 0x0f
        {
        	Dio_PinWrite(RowConter, LOW);
        }
        Dio_PinWrite(LRowConter + KEYPAD_ROW_1, HIGH);
        _delay_ms(5);
        for (LColumnConter = KEYPAD_COLUMNS_1; LColumnConter < KEYPAD_COLUMNS_1 + KEYPAD_COLUMNS; LColumnConter++)
    217a:	89 89       	ldd	r24, Y+17	; 0x11
    217c:	8f 5f       	subi	r24, 0xFF	; 255
    217e:	89 8b       	std	Y+17, r24	; 0x11
    2180:	89 89       	ldd	r24, Y+17	; 0x11
    2182:	86 32       	cpi	r24, 0x26	; 38
    2184:	f0 f2       	brcs	.-68     	; 0x2142 <KP_GetPressed+0x132>
    u8 LRowConter = 0;
    u8 RowConter = 0;
    u8 LColumnConter = 0;
    u8 state = LOW;
    u8 Btn = 0;
    for (LRowConter = 0; LRowConter < KEYPAD_ROWS; LRowConter++)
    2186:	8b 89       	ldd	r24, Y+19	; 0x13
    2188:	8f 5f       	subi	r24, 0xFF	; 255
    218a:	8b 8b       	std	Y+19, r24	; 0x13
    218c:	8b 89       	ldd	r24, Y+19	; 0x13
    218e:	84 30       	cpi	r24, 0x04	; 4
    2190:	08 f4       	brcc	.+2      	; 0x2194 <KP_GetPressed+0x184>
    2192:	50 cf       	rjmp	.-352    	; 0x2034 <KP_GetPressed+0x24>
                Btn = KP_Maparr[LRowConter][LColumnConter - KEYPAD_COLUMNS_1];
            }
        }
    }

    return Btn;
    2194:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2196:	63 96       	adiw	r28, 0x13	; 19
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <main>:

u8 FristNum[4];  // Array to store the first number (Assuming the number of digits 4)
u8 SecondNum[4]; // Array to store the Second number (Assuming the number of digits 4)

int main()
{
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	cd 56       	subi	r28, 0x6D	; 109
    21b6:	d0 40       	sbci	r29, 0x00	; 0
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    LCD_Init(); // Initialize LCD;
    21c2:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <LCD_Init>
    while (1)
    {
        /*   Loading to Start Calculator */
        LCD_Send_Command(_LCD_CLEAR);
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>
        LCD_Send_String_Pos((u8 *)"Loading", 1 , 1);
    21cc:	80 e6       	ldi	r24, 0x60	; 96
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	61 e0       	ldi	r22, 0x01	; 1
    21d2:	41 e0       	ldi	r20, 0x01	; 1
    21d4:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <LCD_Send_String_Pos>
        for (u8 counter = 0; counter < 3; counter++)
    21d8:	fe 01       	movw	r30, r28
    21da:	e3 59       	subi	r30, 0x93	; 147
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	10 82       	st	Z, r1
    21e0:	c7 c0       	rjmp	.+398    	; 0x2370 <main+0x1c8>
        {
            LCD_Send_Char_Pos('.', 1, counter + 8);
    21e2:	fe 01       	movw	r30, r28
    21e4:	e3 59       	subi	r30, 0x93	; 147
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	80 81       	ld	r24, Z
    21ea:	98 2f       	mov	r25, r24
    21ec:	98 5f       	subi	r25, 0xF8	; 248
    21ee:	8e e2       	ldi	r24, 0x2E	; 46
    21f0:	61 e0       	ldi	r22, 0x01	; 1
    21f2:	49 2f       	mov	r20, r25
    21f4:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_Send_Char_Pos>
    21f8:	fe 01       	movw	r30, r28
    21fa:	eb 59       	subi	r30, 0x9B	; 155
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e2       	ldi	r26, 0x20	; 32
    2204:	b1 e4       	ldi	r27, 0x41	; 65
    2206:	80 83       	st	Z, r24
    2208:	91 83       	std	Z+1, r25	; 0x01
    220a:	a2 83       	std	Z+2, r26	; 0x02
    220c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	8e 01       	movw	r16, r28
    2210:	0f 59       	subi	r16, 0x9F	; 159
    2212:	1f 4f       	sbci	r17, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	eb 59       	subi	r30, 0x9B	; 155
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4a ef       	ldi	r20, 0xFA	; 250
    2228:	54 e4       	ldi	r21, 0x44	; 68
    222a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	f8 01       	movw	r30, r16
    2234:	80 83       	st	Z, r24
    2236:	91 83       	std	Z+1, r25	; 0x01
    2238:	a2 83       	std	Z+2, r26	; 0x02
    223a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    223c:	fe 01       	movw	r30, r28
    223e:	ef 59       	subi	r30, 0x9F	; 159
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	60 81       	ld	r22, Z
    2244:	71 81       	ldd	r23, Z+1	; 0x01
    2246:	82 81       	ldd	r24, Z+2	; 0x02
    2248:	93 81       	ldd	r25, Z+3	; 0x03
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e8       	ldi	r20, 0x80	; 128
    2250:	5f e3       	ldi	r21, 0x3F	; 63
    2252:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2256:	88 23       	and	r24, r24
    2258:	44 f4       	brge	.+16     	; 0x226a <main+0xc2>
		__ticks = 1;
    225a:	fe 01       	movw	r30, r28
    225c:	e1 5a       	subi	r30, 0xA1	; 161
    225e:	ff 4f       	sbci	r31, 0xFF	; 255
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	91 83       	std	Z+1, r25	; 0x01
    2266:	80 83       	st	Z, r24
    2268:	64 c0       	rjmp	.+200    	; 0x2332 <main+0x18a>
	else if (__tmp > 65535)
    226a:	fe 01       	movw	r30, r28
    226c:	ef 59       	subi	r30, 0x9F	; 159
    226e:	ff 4f       	sbci	r31, 0xFF	; 255
    2270:	60 81       	ld	r22, Z
    2272:	71 81       	ldd	r23, Z+1	; 0x01
    2274:	82 81       	ldd	r24, Z+2	; 0x02
    2276:	93 81       	ldd	r25, Z+3	; 0x03
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	3f ef       	ldi	r19, 0xFF	; 255
    227c:	4f e7       	ldi	r20, 0x7F	; 127
    227e:	57 e4       	ldi	r21, 0x47	; 71
    2280:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2284:	18 16       	cp	r1, r24
    2286:	0c f0       	brlt	.+2      	; 0x228a <main+0xe2>
    2288:	43 c0       	rjmp	.+134    	; 0x2310 <main+0x168>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	fe 01       	movw	r30, r28
    228c:	eb 59       	subi	r30, 0x9B	; 155
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	82 81       	ldd	r24, Z+2	; 0x02
    2296:	93 81       	ldd	r25, Z+3	; 0x03
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e2       	ldi	r20, 0x20	; 32
    229e:	51 e4       	ldi	r21, 0x41	; 65
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8e 01       	movw	r16, r28
    22aa:	01 5a       	subi	r16, 0xA1	; 161
    22ac:	1f 4f       	sbci	r17, 0xFF	; 255
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	f8 01       	movw	r30, r16
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
    22c0:	1f c0       	rjmp	.+62     	; 0x2300 <main+0x158>
    22c2:	fe 01       	movw	r30, r28
    22c4:	e3 5a       	subi	r30, 0xA3	; 163
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	88 ec       	ldi	r24, 0xC8	; 200
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	91 83       	std	Z+1, r25	; 0x01
    22ce:	80 83       	st	Z, r24
    22d0:	fe 01       	movw	r30, r28
    22d2:	e3 5a       	subi	r30, 0xA3	; 163
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <main+0x132>
    22de:	fe 01       	movw	r30, r28
    22e0:	e3 5a       	subi	r30, 0xA3	; 163
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e8:	de 01       	movw	r26, r28
    22ea:	a1 5a       	subi	r26, 0xA1	; 161
    22ec:	bf 4f       	sbci	r27, 0xFF	; 255
    22ee:	fe 01       	movw	r30, r28
    22f0:	e1 5a       	subi	r30, 0xA1	; 161
    22f2:	ff 4f       	sbci	r31, 0xFF	; 255
    22f4:	80 81       	ld	r24, Z
    22f6:	91 81       	ldd	r25, Z+1	; 0x01
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	11 96       	adiw	r26, 0x01	; 1
    22fc:	9c 93       	st	X, r25
    22fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2300:	fe 01       	movw	r30, r28
    2302:	e1 5a       	subi	r30, 0xA1	; 161
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	91 81       	ldd	r25, Z+1	; 0x01
    230a:	00 97       	sbiw	r24, 0x00	; 0
    230c:	d1 f6       	brne	.-76     	; 0x22c2 <main+0x11a>
    230e:	27 c0       	rjmp	.+78     	; 0x235e <main+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2310:	8e 01       	movw	r16, r28
    2312:	01 5a       	subi	r16, 0xA1	; 161
    2314:	1f 4f       	sbci	r17, 0xFF	; 255
    2316:	fe 01       	movw	r30, r28
    2318:	ef 59       	subi	r30, 0x9F	; 159
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	60 81       	ld	r22, Z
    231e:	71 81       	ldd	r23, Z+1	; 0x01
    2320:	82 81       	ldd	r24, Z+2	; 0x02
    2322:	93 81       	ldd	r25, Z+3	; 0x03
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	f8 01       	movw	r30, r16
    232e:	91 83       	std	Z+1, r25	; 0x01
    2330:	80 83       	st	Z, r24
    2332:	de 01       	movw	r26, r28
    2334:	a5 5a       	subi	r26, 0xA5	; 165
    2336:	bf 4f       	sbci	r27, 0xFF	; 255
    2338:	fe 01       	movw	r30, r28
    233a:	e1 5a       	subi	r30, 0xA1	; 161
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	8d 93       	st	X+, r24
    2344:	9c 93       	st	X, r25
    2346:	fe 01       	movw	r30, r28
    2348:	e5 5a       	subi	r30, 0xA5	; 165
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 81       	ld	r24, Z
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <main+0x1a8>
    2354:	fe 01       	movw	r30, r28
    2356:	e5 5a       	subi	r30, 0xA5	; 165
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	91 83       	std	Z+1, r25	; 0x01
    235c:	80 83       	st	Z, r24
    while (1)
    {
        /*   Loading to Start Calculator */
        LCD_Send_Command(_LCD_CLEAR);
        LCD_Send_String_Pos((u8 *)"Loading", 1 , 1);
        for (u8 counter = 0; counter < 3; counter++)
    235e:	de 01       	movw	r26, r28
    2360:	a3 59       	subi	r26, 0x93	; 147
    2362:	bf 4f       	sbci	r27, 0xFF	; 255
    2364:	fe 01       	movw	r30, r28
    2366:	e3 59       	subi	r30, 0x93	; 147
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	80 81       	ld	r24, Z
    236c:	8f 5f       	subi	r24, 0xFF	; 255
    236e:	8c 93       	st	X, r24
    2370:	fe 01       	movw	r30, r28
    2372:	e3 59       	subi	r30, 0x93	; 147
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	80 81       	ld	r24, Z
    2378:	83 30       	cpi	r24, 0x03	; 3
    237a:	08 f4       	brcc	.+2      	; 0x237e <main+0x1d6>
    237c:	32 cf       	rjmp	.-412    	; 0x21e2 <main+0x3a>
    237e:	fe 01       	movw	r30, r28
    2380:	e9 5a       	subi	r30, 0xA9	; 169
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	a8 e4       	ldi	r26, 0x48	; 72
    238a:	b3 e4       	ldi	r27, 0x43	; 67
    238c:	80 83       	st	Z, r24
    238e:	91 83       	std	Z+1, r25	; 0x01
    2390:	a2 83       	std	Z+2, r26	; 0x02
    2392:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2394:	8e 01       	movw	r16, r28
    2396:	0d 5a       	subi	r16, 0xAD	; 173
    2398:	1f 4f       	sbci	r17, 0xFF	; 255
    239a:	fe 01       	movw	r30, r28
    239c:	e9 5a       	subi	r30, 0xA9	; 169
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	60 81       	ld	r22, Z
    23a2:	71 81       	ldd	r23, Z+1	; 0x01
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	93 81       	ldd	r25, Z+3	; 0x03
    23a8:	20 e0       	ldi	r18, 0x00	; 0
    23aa:	30 e0       	ldi	r19, 0x00	; 0
    23ac:	4a ef       	ldi	r20, 0xFA	; 250
    23ae:	54 e4       	ldi	r21, 0x44	; 68
    23b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	f8 01       	movw	r30, r16
    23ba:	80 83       	st	Z, r24
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	a2 83       	std	Z+2, r26	; 0x02
    23c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23c2:	fe 01       	movw	r30, r28
    23c4:	ed 5a       	subi	r30, 0xAD	; 173
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	40 e8       	ldi	r20, 0x80	; 128
    23d6:	5f e3       	ldi	r21, 0x3F	; 63
    23d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23dc:	88 23       	and	r24, r24
    23de:	44 f4       	brge	.+16     	; 0x23f0 <main+0x248>
		__ticks = 1;
    23e0:	fe 01       	movw	r30, r28
    23e2:	ef 5a       	subi	r30, 0xAF	; 175
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	80 83       	st	Z, r24
    23ee:	64 c0       	rjmp	.+200    	; 0x24b8 <main+0x310>
	else if (__tmp > 65535)
    23f0:	fe 01       	movw	r30, r28
    23f2:	ed 5a       	subi	r30, 0xAD	; 173
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	60 81       	ld	r22, Z
    23f8:	71 81       	ldd	r23, Z+1	; 0x01
    23fa:	82 81       	ldd	r24, Z+2	; 0x02
    23fc:	93 81       	ldd	r25, Z+3	; 0x03
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	3f ef       	ldi	r19, 0xFF	; 255
    2402:	4f e7       	ldi	r20, 0x7F	; 127
    2404:	57 e4       	ldi	r21, 0x47	; 71
    2406:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    240a:	18 16       	cp	r1, r24
    240c:	0c f0       	brlt	.+2      	; 0x2410 <main+0x268>
    240e:	43 c0       	rjmp	.+134    	; 0x2496 <main+0x2ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2410:	fe 01       	movw	r30, r28
    2412:	e9 5a       	subi	r30, 0xA9	; 169
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	60 81       	ld	r22, Z
    2418:	71 81       	ldd	r23, Z+1	; 0x01
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	93 81       	ldd	r25, Z+3	; 0x03
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e2       	ldi	r20, 0x20	; 32
    2424:	51 e4       	ldi	r21, 0x41	; 65
    2426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	8e 01       	movw	r16, r28
    2430:	0f 5a       	subi	r16, 0xAF	; 175
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	bc 01       	movw	r22, r24
    2436:	cd 01       	movw	r24, r26
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	f8 01       	movw	r30, r16
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	80 83       	st	Z, r24
    2446:	1f c0       	rjmp	.+62     	; 0x2486 <main+0x2de>
    2448:	fe 01       	movw	r30, r28
    244a:	e1 5b       	subi	r30, 0xB1	; 177
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	88 ec       	ldi	r24, 0xC8	; 200
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	80 83       	st	Z, r24
    2456:	fe 01       	movw	r30, r28
    2458:	e1 5b       	subi	r30, 0xB1	; 177
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	80 81       	ld	r24, Z
    245e:	91 81       	ldd	r25, Z+1	; 0x01
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <main+0x2b8>
    2464:	fe 01       	movw	r30, r28
    2466:	e1 5b       	subi	r30, 0xB1	; 177
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	91 83       	std	Z+1, r25	; 0x01
    246c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246e:	de 01       	movw	r26, r28
    2470:	af 5a       	subi	r26, 0xAF	; 175
    2472:	bf 4f       	sbci	r27, 0xFF	; 255
    2474:	fe 01       	movw	r30, r28
    2476:	ef 5a       	subi	r30, 0xAF	; 175
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 81       	ld	r24, Z
    247c:	91 81       	ldd	r25, Z+1	; 0x01
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	11 96       	adiw	r26, 0x01	; 1
    2482:	9c 93       	st	X, r25
    2484:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2486:	fe 01       	movw	r30, r28
    2488:	ef 5a       	subi	r30, 0xAF	; 175
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 81       	ld	r24, Z
    248e:	91 81       	ldd	r25, Z+1	; 0x01
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	d1 f6       	brne	.-76     	; 0x2448 <main+0x2a0>
    2494:	27 c0       	rjmp	.+78     	; 0x24e4 <main+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2496:	8e 01       	movw	r16, r28
    2498:	0f 5a       	subi	r16, 0xAF	; 175
    249a:	1f 4f       	sbci	r17, 0xFF	; 255
    249c:	fe 01       	movw	r30, r28
    249e:	ed 5a       	subi	r30, 0xAD	; 173
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	60 81       	ld	r22, Z
    24a4:	71 81       	ldd	r23, Z+1	; 0x01
    24a6:	82 81       	ldd	r24, Z+2	; 0x02
    24a8:	93 81       	ldd	r25, Z+3	; 0x03
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	f8 01       	movw	r30, r16
    24b4:	91 83       	std	Z+1, r25	; 0x01
    24b6:	80 83       	st	Z, r24
    24b8:	de 01       	movw	r26, r28
    24ba:	a3 5b       	subi	r26, 0xB3	; 179
    24bc:	bf 4f       	sbci	r27, 0xFF	; 255
    24be:	fe 01       	movw	r30, r28
    24c0:	ef 5a       	subi	r30, 0xAF	; 175
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	80 81       	ld	r24, Z
    24c6:	91 81       	ldd	r25, Z+1	; 0x01
    24c8:	8d 93       	st	X+, r24
    24ca:	9c 93       	st	X, r25
    24cc:	fe 01       	movw	r30, r28
    24ce:	e3 5b       	subi	r30, 0xB3	; 179
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	80 81       	ld	r24, Z
    24d4:	91 81       	ldd	r25, Z+1	; 0x01
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	f1 f7       	brne	.-4      	; 0x24d6 <main+0x32e>
    24da:	fe 01       	movw	r30, r28
    24dc:	e3 5b       	subi	r30, 0xB3	; 179
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	80 83       	st	Z, r24
        {
            LCD_Send_Char_Pos('.', 1, counter + 8);
            _delay_ms(10);
        }
        _delay_ms(200);
        LCD_Send_Command(_LCD_CLEAR);
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>
        LCD_Send_String_Pos((u8 *)"Welcome!", 1, 1);
    24ea:	88 e6       	ldi	r24, 0x68	; 104
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	61 e0       	ldi	r22, 0x01	; 1
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <LCD_Send_String_Pos>
        LCD_Send_String_Pos((u8 *)"Calculator ready", 2, 1);
    24f6:	81 e7       	ldi	r24, 0x71	; 113
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	62 e0       	ldi	r22, 0x02	; 2
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <LCD_Send_String_Pos>
    2502:	fe 01       	movw	r30, r28
    2504:	e7 5b       	subi	r30, 0xB7	; 183
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	aa ef       	ldi	r26, 0xFA	; 250
    250e:	b3 e4       	ldi	r27, 0x43	; 67
    2510:	80 83       	st	Z, r24
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	a2 83       	std	Z+2, r26	; 0x02
    2516:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2518:	8e 01       	movw	r16, r28
    251a:	0b 5b       	subi	r16, 0xBB	; 187
    251c:	1f 4f       	sbci	r17, 0xFF	; 255
    251e:	fe 01       	movw	r30, r28
    2520:	e7 5b       	subi	r30, 0xB7	; 183
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	82 81       	ldd	r24, Z+2	; 0x02
    252a:	93 81       	ldd	r25, Z+3	; 0x03
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	4a ef       	ldi	r20, 0xFA	; 250
    2532:	54 e4       	ldi	r21, 0x44	; 68
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	f8 01       	movw	r30, r16
    253e:	80 83       	st	Z, r24
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	a2 83       	std	Z+2, r26	; 0x02
    2544:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2546:	fe 01       	movw	r30, r28
    2548:	eb 5b       	subi	r30, 0xBB	; 187
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	60 81       	ld	r22, Z
    254e:	71 81       	ldd	r23, Z+1	; 0x01
    2550:	82 81       	ldd	r24, Z+2	; 0x02
    2552:	93 81       	ldd	r25, Z+3	; 0x03
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	44 f4       	brge	.+16     	; 0x2574 <main+0x3cc>
		__ticks = 1;
    2564:	fe 01       	movw	r30, r28
    2566:	ed 5b       	subi	r30, 0xBD	; 189
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	81 e0       	ldi	r24, 0x01	; 1
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	91 83       	std	Z+1, r25	; 0x01
    2570:	80 83       	st	Z, r24
    2572:	64 c0       	rjmp	.+200    	; 0x263c <main+0x494>
	else if (__tmp > 65535)
    2574:	fe 01       	movw	r30, r28
    2576:	eb 5b       	subi	r30, 0xBB	; 187
    2578:	ff 4f       	sbci	r31, 0xFF	; 255
    257a:	60 81       	ld	r22, Z
    257c:	71 81       	ldd	r23, Z+1	; 0x01
    257e:	82 81       	ldd	r24, Z+2	; 0x02
    2580:	93 81       	ldd	r25, Z+3	; 0x03
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	0c f0       	brlt	.+2      	; 0x2594 <main+0x3ec>
    2592:	43 c0       	rjmp	.+134    	; 0x261a <main+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2594:	fe 01       	movw	r30, r28
    2596:	e7 5b       	subi	r30, 0xB7	; 183
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	60 81       	ld	r22, Z
    259c:	71 81       	ldd	r23, Z+1	; 0x01
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	40 e2       	ldi	r20, 0x20	; 32
    25a8:	51 e4       	ldi	r21, 0x41	; 65
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	8e 01       	movw	r16, r28
    25b4:	0d 5b       	subi	r16, 0xBD	; 189
    25b6:	1f 4f       	sbci	r17, 0xFF	; 255
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	f8 01       	movw	r30, r16
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
    25ca:	1f c0       	rjmp	.+62     	; 0x260a <main+0x462>
    25cc:	fe 01       	movw	r30, r28
    25ce:	ef 5b       	subi	r30, 0xBF	; 191
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	88 ec       	ldi	r24, 0xC8	; 200
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	80 83       	st	Z, r24
    25da:	fe 01       	movw	r30, r28
    25dc:	ef 5b       	subi	r30, 0xBF	; 191
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	80 81       	ld	r24, Z
    25e2:	91 81       	ldd	r25, Z+1	; 0x01
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <main+0x43c>
    25e8:	fe 01       	movw	r30, r28
    25ea:	ef 5b       	subi	r30, 0xBF	; 191
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	91 83       	std	Z+1, r25	; 0x01
    25f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f2:	de 01       	movw	r26, r28
    25f4:	ad 5b       	subi	r26, 0xBD	; 189
    25f6:	bf 4f       	sbci	r27, 0xFF	; 255
    25f8:	fe 01       	movw	r30, r28
    25fa:	ed 5b       	subi	r30, 0xBD	; 189
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	80 81       	ld	r24, Z
    2600:	91 81       	ldd	r25, Z+1	; 0x01
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	11 96       	adiw	r26, 0x01	; 1
    2606:	9c 93       	st	X, r25
    2608:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260a:	fe 01       	movw	r30, r28
    260c:	ed 5b       	subi	r30, 0xBD	; 189
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 81       	ld	r24, Z
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	00 97       	sbiw	r24, 0x00	; 0
    2616:	d1 f6       	brne	.-76     	; 0x25cc <main+0x424>
    2618:	24 c0       	rjmp	.+72     	; 0x2662 <main+0x4ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    261a:	8e 01       	movw	r16, r28
    261c:	0d 5b       	subi	r16, 0xBD	; 189
    261e:	1f 4f       	sbci	r17, 0xFF	; 255
    2620:	fe 01       	movw	r30, r28
    2622:	eb 5b       	subi	r30, 0xBB	; 187
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	f8 01       	movw	r30, r16
    2638:	91 83       	std	Z+1, r25	; 0x01
    263a:	80 83       	st	Z, r24
    263c:	fe 01       	movw	r30, r28
    263e:	ed 5b       	subi	r30, 0xBD	; 189
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	80 81       	ld	r24, Z
    2644:	91 81       	ldd	r25, Z+1	; 0x01
    2646:	fe 01       	movw	r30, r28
    2648:	ff 96       	adiw	r30, 0x3f	; 63
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	80 83       	st	Z, r24
    264e:	fe 01       	movw	r30, r28
    2650:	ff 96       	adiw	r30, 0x3f	; 63
    2652:	80 81       	ld	r24, Z
    2654:	91 81       	ldd	r25, Z+1	; 0x01
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <main+0x4ae>
    265a:	fe 01       	movw	r30, r28
    265c:	ff 96       	adiw	r30, 0x3f	; 63
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24
        _delay_ms(500);

        /*    loop for repeating the calculation    */
        while (1)
        {
            LCD_Send_Command(_LCD_CLEAR);
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>

            /*    Getting The First Number    */
            u8 counter = 0;
    2668:	fe 01       	movw	r30, r28
    266a:	e4 59       	subi	r30, 0x94	; 148
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	10 82       	st	Z, r1
            u8 operation = 0;
    2670:	fe 01       	movw	r30, r28
    2672:	e5 59       	subi	r30, 0x95	; 149
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	10 82       	st	Z, r1
            while (1)
            {
                do
                {
                    KpValue = KP_GetPressed();
    2678:	0e 94 08 10 	call	0x2010	; 0x2010 <KP_GetPressed>
    267c:	80 93 8a 00 	sts	0x008A, r24
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a0 e8       	ldi	r26, 0x80	; 128
    2686:	bf e3       	ldi	r27, 0x3F	; 63
    2688:	8b af       	std	Y+59, r24	; 0x3b
    268a:	9c af       	std	Y+60, r25	; 0x3c
    268c:	ad af       	std	Y+61, r26	; 0x3d
    268e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2690:	6b ad       	ldd	r22, Y+59	; 0x3b
    2692:	7c ad       	ldd	r23, Y+60	; 0x3c
    2694:	8d ad       	ldd	r24, Y+61	; 0x3d
    2696:	9e ad       	ldd	r25, Y+62	; 0x3e
    2698:	2b ea       	ldi	r18, 0xAB	; 171
    269a:	3a ea       	ldi	r19, 0xAA	; 170
    269c:	4a e2       	ldi	r20, 0x2A	; 42
    269e:	50 e4       	ldi	r21, 0x40	; 64
    26a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	8f ab       	std	Y+55, r24	; 0x37
    26aa:	98 af       	std	Y+56, r25	; 0x38
    26ac:	a9 af       	std	Y+57, r26	; 0x39
    26ae:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    26b0:	6f a9       	ldd	r22, Y+55	; 0x37
    26b2:	78 ad       	ldd	r23, Y+56	; 0x38
    26b4:	89 ad       	ldd	r24, Y+57	; 0x39
    26b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e8       	ldi	r20, 0x80	; 128
    26be:	5f e3       	ldi	r21, 0x3F	; 63
    26c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26c4:	88 23       	and	r24, r24
    26c6:	1c f4       	brge	.+6      	; 0x26ce <main+0x526>
		__ticks = 1;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	8e ab       	std	Y+54, r24	; 0x36
    26cc:	91 c0       	rjmp	.+290    	; 0x27f0 <main+0x648>
	else if (__tmp > 255)
    26ce:	6f a9       	ldd	r22, Y+55	; 0x37
    26d0:	78 ad       	ldd	r23, Y+56	; 0x38
    26d2:	89 ad       	ldd	r24, Y+57	; 0x39
    26d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	4f e7       	ldi	r20, 0x7F	; 127
    26dc:	53 e4       	ldi	r21, 0x43	; 67
    26de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e2:	18 16       	cp	r1, r24
    26e4:	0c f0       	brlt	.+2      	; 0x26e8 <main+0x540>
    26e6:	7b c0       	rjmp	.+246    	; 0x27de <main+0x636>
	{
		_delay_ms(__us / 1000.0);
    26e8:	6b ad       	ldd	r22, Y+59	; 0x3b
    26ea:	7c ad       	ldd	r23, Y+60	; 0x3c
    26ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    26ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	4a e7       	ldi	r20, 0x7A	; 122
    26f6:	54 e4       	ldi	r21, 0x44	; 68
    26f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	8a ab       	std	Y+50, r24	; 0x32
    2702:	9b ab       	std	Y+51, r25	; 0x33
    2704:	ac ab       	std	Y+52, r26	; 0x34
    2706:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2708:	6a a9       	ldd	r22, Y+50	; 0x32
    270a:	7b a9       	ldd	r23, Y+51	; 0x33
    270c:	8c a9       	ldd	r24, Y+52	; 0x34
    270e:	9d a9       	ldd	r25, Y+53	; 0x35
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	4a ef       	ldi	r20, 0xFA	; 250
    2716:	54 e4       	ldi	r21, 0x44	; 68
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	8e a7       	std	Y+46, r24	; 0x2e
    2722:	9f a7       	std	Y+47, r25	; 0x2f
    2724:	a8 ab       	std	Y+48, r26	; 0x30
    2726:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2728:	6e a5       	ldd	r22, Y+46	; 0x2e
    272a:	7f a5       	ldd	r23, Y+47	; 0x2f
    272c:	88 a9       	ldd	r24, Y+48	; 0x30
    272e:	99 a9       	ldd	r25, Y+49	; 0x31
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	40 e8       	ldi	r20, 0x80	; 128
    2736:	5f e3       	ldi	r21, 0x3F	; 63
    2738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    273c:	88 23       	and	r24, r24
    273e:	2c f4       	brge	.+10     	; 0x274a <main+0x5a2>
		__ticks = 1;
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	9d a7       	std	Y+45, r25	; 0x2d
    2746:	8c a7       	std	Y+44, r24	; 0x2c
    2748:	3f c0       	rjmp	.+126    	; 0x27c8 <main+0x620>
	else if (__tmp > 65535)
    274a:	6e a5       	ldd	r22, Y+46	; 0x2e
    274c:	7f a5       	ldd	r23, Y+47	; 0x2f
    274e:	88 a9       	ldd	r24, Y+48	; 0x30
    2750:	99 a9       	ldd	r25, Y+49	; 0x31
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	3f ef       	ldi	r19, 0xFF	; 255
    2756:	4f e7       	ldi	r20, 0x7F	; 127
    2758:	57 e4       	ldi	r21, 0x47	; 71
    275a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    275e:	18 16       	cp	r1, r24
    2760:	4c f5       	brge	.+82     	; 0x27b4 <main+0x60c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2762:	6a a9       	ldd	r22, Y+50	; 0x32
    2764:	7b a9       	ldd	r23, Y+51	; 0x33
    2766:	8c a9       	ldd	r24, Y+52	; 0x34
    2768:	9d a9       	ldd	r25, Y+53	; 0x35
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e2       	ldi	r20, 0x20	; 32
    2770:	51 e4       	ldi	r21, 0x41	; 65
    2772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	bc 01       	movw	r22, r24
    277c:	cd 01       	movw	r24, r26
    277e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	9d a7       	std	Y+45, r25	; 0x2d
    2788:	8c a7       	std	Y+44, r24	; 0x2c
    278a:	0f c0       	rjmp	.+30     	; 0x27aa <main+0x602>
    278c:	88 ec       	ldi	r24, 0xC8	; 200
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9b a7       	std	Y+43, r25	; 0x2b
    2792:	8a a7       	std	Y+42, r24	; 0x2a
    2794:	8a a5       	ldd	r24, Y+42	; 0x2a
    2796:	9b a5       	ldd	r25, Y+43	; 0x2b
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <main+0x5f0>
    279c:	9b a7       	std	Y+43, r25	; 0x2b
    279e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a0:	8c a5       	ldd	r24, Y+44	; 0x2c
    27a2:	9d a5       	ldd	r25, Y+45	; 0x2d
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	9d a7       	std	Y+45, r25	; 0x2d
    27a8:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27aa:	8c a5       	ldd	r24, Y+44	; 0x2c
    27ac:	9d a5       	ldd	r25, Y+45	; 0x2d
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	69 f7       	brne	.-38     	; 0x278c <main+0x5e4>
    27b2:	24 c0       	rjmp	.+72     	; 0x27fc <main+0x654>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b4:	6e a5       	ldd	r22, Y+46	; 0x2e
    27b6:	7f a5       	ldd	r23, Y+47	; 0x2f
    27b8:	88 a9       	ldd	r24, Y+48	; 0x30
    27ba:	99 a9       	ldd	r25, Y+49	; 0x31
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9d a7       	std	Y+45, r25	; 0x2d
    27c6:	8c a7       	std	Y+44, r24	; 0x2c
    27c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    27ca:	9d a5       	ldd	r25, Y+45	; 0x2d
    27cc:	99 a7       	std	Y+41, r25	; 0x29
    27ce:	88 a7       	std	Y+40, r24	; 0x28
    27d0:	88 a5       	ldd	r24, Y+40	; 0x28
    27d2:	99 a5       	ldd	r25, Y+41	; 0x29
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <main+0x62c>
    27d8:	99 a7       	std	Y+41, r25	; 0x29
    27da:	88 a7       	std	Y+40, r24	; 0x28
    27dc:	0f c0       	rjmp	.+30     	; 0x27fc <main+0x654>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27de:	6f a9       	ldd	r22, Y+55	; 0x37
    27e0:	78 ad       	ldd	r23, Y+56	; 0x38
    27e2:	89 ad       	ldd	r24, Y+57	; 0x39
    27e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	8e ab       	std	Y+54, r24	; 0x36
    27f0:	8e a9       	ldd	r24, Y+54	; 0x36
    27f2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27f4:	8f a1       	ldd	r24, Y+39	; 0x27
    27f6:	8a 95       	dec	r24
    27f8:	f1 f7       	brne	.-4      	; 0x27f6 <main+0x64e>
    27fa:	8f a3       	std	Y+39, r24	; 0x27
                    _delay_us(1);
                } while (KpValue == '\0');
    27fc:	80 91 8a 00 	lds	r24, 0x008A
    2800:	88 23       	and	r24, r24
    2802:	09 f4       	brne	.+2      	; 0x2806 <main+0x65e>
    2804:	39 cf       	rjmp	.-398    	; 0x2678 <main+0x4d0>
                if (KpValue == '+' || KpValue == '-' || KpValue == '/' || KpValue == 'x')
    2806:	80 91 8a 00 	lds	r24, 0x008A
    280a:	8b 32       	cpi	r24, 0x2B	; 43
    280c:	61 f0       	breq	.+24     	; 0x2826 <main+0x67e>
    280e:	80 91 8a 00 	lds	r24, 0x008A
    2812:	8d 32       	cpi	r24, 0x2D	; 45
    2814:	41 f0       	breq	.+16     	; 0x2826 <main+0x67e>
    2816:	80 91 8a 00 	lds	r24, 0x008A
    281a:	8f 32       	cpi	r24, 0x2F	; 47
    281c:	21 f0       	breq	.+8      	; 0x2826 <main+0x67e>
    281e:	80 91 8a 00 	lds	r24, 0x008A
    2822:	88 37       	cpi	r24, 0x78	; 120
    2824:	09 f5       	brne	.+66     	; 0x2868 <main+0x6c0>
                {
                    operation = KpValue;
    2826:	fe 01       	movw	r30, r28
    2828:	e5 59       	subi	r30, 0x95	; 149
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 91 8a 00 	lds	r24, 0x008A
    2830:	80 83       	st	Z, r24
                    LCD_Send_Char_Pos(KpValue, 1, counter + 1);
    2832:	20 91 8a 00 	lds	r18, 0x008A
    2836:	fe 01       	movw	r30, r28
    2838:	e4 59       	subi	r30, 0x94	; 148
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	80 81       	ld	r24, Z
    283e:	98 2f       	mov	r25, r24
    2840:	9f 5f       	subi	r25, 0xFF	; 255
    2842:	82 2f       	mov	r24, r18
    2844:	61 e0       	ldi	r22, 0x01	; 1
    2846:	49 2f       	mov	r20, r25
    2848:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_Send_Char_Pos>
                counter++;
                LCD_Send_Number_Pos(KpValue, 1, counter);
            }

            /*    Getting The Second Number    */
            u8 counter2 = counter + 1;
    284c:	de 01       	movw	r26, r28
    284e:	a6 59       	subi	r26, 0x96	; 150
    2850:	bf 4f       	sbci	r27, 0xFF	; 255
    2852:	fe 01       	movw	r30, r28
    2854:	e4 59       	subi	r30, 0x94	; 148
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	8f 5f       	subi	r24, 0xFF	; 255
    285c:	8c 93       	st	X, r24
            u8 counter3 = 0;
    285e:	fe 01       	movw	r30, r28
    2860:	e7 59       	subi	r30, 0x97	; 151
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	10 82       	st	Z, r1
    2866:	25 c0       	rjmp	.+74     	; 0x28b2 <main+0x70a>
                {
                    operation = KpValue;
                    LCD_Send_Char_Pos(KpValue, 1, counter + 1);
                    break;
                }
                FristNum[counter] = KpValue;
    2868:	fe 01       	movw	r30, r28
    286a:	e4 59       	subi	r30, 0x94	; 148
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	20 91 8a 00 	lds	r18, 0x008A
    2878:	fc 01       	movw	r30, r24
    287a:	e0 56       	subi	r30, 0x60	; 96
    287c:	ff 4f       	sbci	r31, 0xFF	; 255
    287e:	20 83       	st	Z, r18
                counter++;
    2880:	de 01       	movw	r26, r28
    2882:	a4 59       	subi	r26, 0x94	; 148
    2884:	bf 4f       	sbci	r27, 0xFF	; 255
    2886:	fe 01       	movw	r30, r28
    2888:	e4 59       	subi	r30, 0x94	; 148
    288a:	ff 4f       	sbci	r31, 0xFF	; 255
    288c:	80 81       	ld	r24, Z
    288e:	8f 5f       	subi	r24, 0xFF	; 255
    2890:	8c 93       	st	X, r24
                LCD_Send_Number_Pos(KpValue, 1, counter);
    2892:	80 91 8a 00 	lds	r24, 0x008A
    2896:	88 2f       	mov	r24, r24
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a0 e0       	ldi	r26, 0x00	; 0
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	fe 01       	movw	r30, r28
    28a0:	e4 59       	subi	r30, 0x94	; 148
    28a2:	ff 4f       	sbci	r31, 0xFF	; 255
    28a4:	bc 01       	movw	r22, r24
    28a6:	cd 01       	movw	r24, r26
    28a8:	41 e0       	ldi	r20, 0x01	; 1
    28aa:	20 81       	ld	r18, Z
    28ac:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_Send_Number_Pos>
    28b0:	e3 ce       	rjmp	.-570    	; 0x2678 <main+0x4d0>
            u8 counter3 = 0;
            while (1)
            {
                do
                {
                    KpValue = KP_GetPressed();
    28b2:	0e 94 08 10 	call	0x2010	; 0x2010 <KP_GetPressed>
    28b6:	80 93 8a 00 	sts	0x008A, r24
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	a0 e8       	ldi	r26, 0x80	; 128
    28c0:	bf e3       	ldi	r27, 0x3F	; 63
    28c2:	8b a3       	std	Y+35, r24	; 0x23
    28c4:	9c a3       	std	Y+36, r25	; 0x24
    28c6:	ad a3       	std	Y+37, r26	; 0x25
    28c8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28ca:	6b a1       	ldd	r22, Y+35	; 0x23
    28cc:	7c a1       	ldd	r23, Y+36	; 0x24
    28ce:	8d a1       	ldd	r24, Y+37	; 0x25
    28d0:	9e a1       	ldd	r25, Y+38	; 0x26
    28d2:	2b ea       	ldi	r18, 0xAB	; 171
    28d4:	3a ea       	ldi	r19, 0xAA	; 170
    28d6:	4a e2       	ldi	r20, 0x2A	; 42
    28d8:	50 e4       	ldi	r21, 0x40	; 64
    28da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	8f 8f       	std	Y+31, r24	; 0x1f
    28e4:	98 a3       	std	Y+32, r25	; 0x20
    28e6:	a9 a3       	std	Y+33, r26	; 0x21
    28e8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    28ea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28ec:	78 a1       	ldd	r23, Y+32	; 0x20
    28ee:	89 a1       	ldd	r24, Y+33	; 0x21
    28f0:	9a a1       	ldd	r25, Y+34	; 0x22
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e8       	ldi	r20, 0x80	; 128
    28f8:	5f e3       	ldi	r21, 0x3F	; 63
    28fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28fe:	88 23       	and	r24, r24
    2900:	1c f4       	brge	.+6      	; 0x2908 <main+0x760>
		__ticks = 1;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	8e 8f       	std	Y+30, r24	; 0x1e
    2906:	91 c0       	rjmp	.+290    	; 0x2a2a <main+0x882>
	else if (__tmp > 255)
    2908:	6f 8d       	ldd	r22, Y+31	; 0x1f
    290a:	78 a1       	ldd	r23, Y+32	; 0x20
    290c:	89 a1       	ldd	r24, Y+33	; 0x21
    290e:	9a a1       	ldd	r25, Y+34	; 0x22
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	4f e7       	ldi	r20, 0x7F	; 127
    2916:	53 e4       	ldi	r21, 0x43	; 67
    2918:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    291c:	18 16       	cp	r1, r24
    291e:	0c f0       	brlt	.+2      	; 0x2922 <main+0x77a>
    2920:	7b c0       	rjmp	.+246    	; 0x2a18 <main+0x870>
	{
		_delay_ms(__us / 1000.0);
    2922:	6b a1       	ldd	r22, Y+35	; 0x23
    2924:	7c a1       	ldd	r23, Y+36	; 0x24
    2926:	8d a1       	ldd	r24, Y+37	; 0x25
    2928:	9e a1       	ldd	r25, Y+38	; 0x26
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	4a e7       	ldi	r20, 0x7A	; 122
    2930:	54 e4       	ldi	r21, 0x44	; 68
    2932:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	8a 8f       	std	Y+26, r24	; 0x1a
    293c:	9b 8f       	std	Y+27, r25	; 0x1b
    293e:	ac 8f       	std	Y+28, r26	; 0x1c
    2940:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2942:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2944:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2946:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2948:	9d 8d       	ldd	r25, Y+29	; 0x1d
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	4a ef       	ldi	r20, 0xFA	; 250
    2950:	54 e4       	ldi	r21, 0x44	; 68
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	8e 8b       	std	Y+22, r24	; 0x16
    295c:	9f 8b       	std	Y+23, r25	; 0x17
    295e:	a8 8f       	std	Y+24, r26	; 0x18
    2960:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2962:	6e 89       	ldd	r22, Y+22	; 0x16
    2964:	7f 89       	ldd	r23, Y+23	; 0x17
    2966:	88 8d       	ldd	r24, Y+24	; 0x18
    2968:	99 8d       	ldd	r25, Y+25	; 0x19
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e8       	ldi	r20, 0x80	; 128
    2970:	5f e3       	ldi	r21, 0x3F	; 63
    2972:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2976:	88 23       	and	r24, r24
    2978:	2c f4       	brge	.+10     	; 0x2984 <main+0x7dc>
		__ticks = 1;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	9d 8b       	std	Y+21, r25	; 0x15
    2980:	8c 8b       	std	Y+20, r24	; 0x14
    2982:	3f c0       	rjmp	.+126    	; 0x2a02 <main+0x85a>
	else if (__tmp > 65535)
    2984:	6e 89       	ldd	r22, Y+22	; 0x16
    2986:	7f 89       	ldd	r23, Y+23	; 0x17
    2988:	88 8d       	ldd	r24, Y+24	; 0x18
    298a:	99 8d       	ldd	r25, Y+25	; 0x19
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	3f ef       	ldi	r19, 0xFF	; 255
    2990:	4f e7       	ldi	r20, 0x7F	; 127
    2992:	57 e4       	ldi	r21, 0x47	; 71
    2994:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2998:	18 16       	cp	r1, r24
    299a:	4c f5       	brge	.+82     	; 0x29ee <main+0x846>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    299e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    29a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    29a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e2       	ldi	r20, 0x20	; 32
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9d 8b       	std	Y+21, r25	; 0x15
    29c2:	8c 8b       	std	Y+20, r24	; 0x14
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <main+0x83c>
    29c6:	88 ec       	ldi	r24, 0xC8	; 200
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9b 8b       	std	Y+19, r25	; 0x13
    29cc:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29ce:	8a 89       	ldd	r24, Y+18	; 0x12
    29d0:	9b 89       	ldd	r25, Y+19	; 0x13
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <main+0x82a>
    29d6:	9b 8b       	std	Y+19, r25	; 0x13
    29d8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29da:	8c 89       	ldd	r24, Y+20	; 0x14
    29dc:	9d 89       	ldd	r25, Y+21	; 0x15
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	9d 8b       	std	Y+21, r25	; 0x15
    29e2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e4:	8c 89       	ldd	r24, Y+20	; 0x14
    29e6:	9d 89       	ldd	r25, Y+21	; 0x15
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	69 f7       	brne	.-38     	; 0x29c6 <main+0x81e>
    29ec:	24 c0       	rjmp	.+72     	; 0x2a36 <main+0x88e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ee:	6e 89       	ldd	r22, Y+22	; 0x16
    29f0:	7f 89       	ldd	r23, Y+23	; 0x17
    29f2:	88 8d       	ldd	r24, Y+24	; 0x18
    29f4:	99 8d       	ldd	r25, Y+25	; 0x19
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9d 8b       	std	Y+21, r25	; 0x15
    2a00:	8c 8b       	std	Y+20, r24	; 0x14
    2a02:	8c 89       	ldd	r24, Y+20	; 0x14
    2a04:	9d 89       	ldd	r25, Y+21	; 0x15
    2a06:	99 8b       	std	Y+17, r25	; 0x11
    2a08:	88 8b       	std	Y+16, r24	; 0x10
    2a0a:	88 89       	ldd	r24, Y+16	; 0x10
    2a0c:	99 89       	ldd	r25, Y+17	; 0x11
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <main+0x866>
    2a12:	99 8b       	std	Y+17, r25	; 0x11
    2a14:	88 8b       	std	Y+16, r24	; 0x10
    2a16:	0f c0       	rjmp	.+30     	; 0x2a36 <main+0x88e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a18:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a1a:	78 a1       	ldd	r23, Y+32	; 0x20
    2a1c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a1e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8e 8f       	std	Y+30, r24	; 0x1e
    2a2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a2c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a30:	8a 95       	dec	r24
    2a32:	f1 f7       	brne	.-4      	; 0x2a30 <main+0x888>
    2a34:	8f 87       	std	Y+15, r24	; 0x0f
                    _delay_us(1);
                } while (KpValue == '\0');
    2a36:	80 91 8a 00 	lds	r24, 0x008A
    2a3a:	88 23       	and	r24, r24
    2a3c:	09 f4       	brne	.+2      	; 0x2a40 <main+0x898>
    2a3e:	39 cf       	rjmp	.-398    	; 0x28b2 <main+0x70a>
                if (KpValue == '=')
    2a40:	80 91 8a 00 	lds	r24, 0x008A
    2a44:	8d 33       	cpi	r24, 0x3D	; 61
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <main+0x8a2>
    2a48:	a0 c0       	rjmp	.+320    	; 0x2b8a <main+0x9e2>
                {
                    LCD_Send_Char_Pos(KpValue, 1, counter2 + 1);
    2a4a:	20 91 8a 00 	lds	r18, 0x008A
    2a4e:	fe 01       	movw	r30, r28
    2a50:	e6 59       	subi	r30, 0x96	; 150
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	80 81       	ld	r24, Z
    2a56:	98 2f       	mov	r25, r24
    2a58:	9f 5f       	subi	r25, 0xFF	; 255
    2a5a:	82 2f       	mov	r24, r18
    2a5c:	61 e0       	ldi	r22, 0x01	; 1
    2a5e:	49 2f       	mov	r20, r25
    2a60:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <LCD_Send_Char_Pos>
                counter2++;
                counter3++;
                LCD_Send_Number_Pos(KpValue, 1, counter2);
            }

            LCD_Send_Number_Pos(calculate(FristNum, SecondNum, counter, counter3, operation), 2, 1);
    2a64:	80 ea       	ldi	r24, 0xA0	; 160
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	2c e9       	ldi	r18, 0x9C	; 156
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e4 59       	subi	r30, 0x94	; 148
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	de 01       	movw	r26, r28
    2a74:	a7 59       	subi	r26, 0x97	; 151
    2a76:	bf 4f       	sbci	r27, 0xFF	; 255
    2a78:	8e 01       	movw	r16, r28
    2a7a:	05 59       	subi	r16, 0x95	; 149
    2a7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7e:	b9 01       	movw	r22, r18
    2a80:	40 81       	ld	r20, Z
    2a82:	2c 91       	ld	r18, X
    2a84:	f8 01       	movw	r30, r16
    2a86:	00 81       	ld	r16, Z
    2a88:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <calculate>
    2a8c:	cc 01       	movw	r24, r24
    2a8e:	a0 e0       	ldi	r26, 0x00	; 0
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	bc 01       	movw	r22, r24
    2a94:	cd 01       	movw	r24, r26
    2a96:	42 e0       	ldi	r20, 0x02	; 2
    2a98:	21 e0       	ldi	r18, 0x01	; 1
    2a9a:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_Send_Number_Pos>
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	a6 e9       	ldi	r26, 0x96	; 150
    2aa4:	b3 e4       	ldi	r27, 0x43	; 67
    2aa6:	8b 87       	std	Y+11, r24	; 0x0b
    2aa8:	9c 87       	std	Y+12, r25	; 0x0c
    2aaa:	ad 87       	std	Y+13, r26	; 0x0d
    2aac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a ef       	ldi	r20, 0xFA	; 250
    2abc:	54 e4       	ldi	r21, 0x44	; 68
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	8f 83       	std	Y+7, r24	; 0x07
    2ac8:	98 87       	std	Y+8, r25	; 0x08
    2aca:	a9 87       	std	Y+9, r26	; 0x09
    2acc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ace:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad0:	78 85       	ldd	r23, Y+8	; 0x08
    2ad2:	89 85       	ldd	r24, Y+9	; 0x09
    2ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <main+0x948>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9e 83       	std	Y+6, r25	; 0x06
    2aec:	8d 83       	std	Y+5, r24	; 0x05
    2aee:	3f c0       	rjmp	.+126    	; 0x2b6e <main+0x9c6>
	else if (__tmp > 65535)
    2af0:	6f 81       	ldd	r22, Y+7	; 0x07
    2af2:	78 85       	ldd	r23, Y+8	; 0x08
    2af4:	89 85       	ldd	r24, Y+9	; 0x09
    2af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	3f ef       	ldi	r19, 0xFF	; 255
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	57 e4       	ldi	r21, 0x47	; 71
    2b00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b04:	18 16       	cp	r1, r24
    2b06:	4c f5       	brge	.+82     	; 0x2b5a <main+0x9b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9e 83       	std	Y+6, r25	; 0x06
    2b2e:	8d 83       	std	Y+5, r24	; 0x05
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <main+0x9a8>
    2b32:	88 ec       	ldi	r24, 0xC8	; 200
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9c 83       	std	Y+4, r25	; 0x04
    2b38:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <main+0x996>
    2b42:	9c 83       	std	Y+4, r25	; 0x04
    2b44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	9e 83       	std	Y+6, r25	; 0x06
    2b4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b50:	8d 81       	ldd	r24, Y+5	; 0x05
    2b52:	9e 81       	ldd	r25, Y+6	; 0x06
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <main+0x98a>
    2b58:	14 c0       	rjmp	.+40     	; 0x2b82 <main+0x9da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5c:	78 85       	ldd	r23, Y+8	; 0x08
    2b5e:	89 85       	ldd	r24, Y+9	; 0x09
    2b60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9e 83       	std	Y+6, r25	; 0x06
    2b6c:	8d 83       	std	Y+5, r24	; 0x05
    2b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b70:	9e 81       	ldd	r25, Y+6	; 0x06
    2b72:	9a 83       	std	Y+2, r25	; 0x02
    2b74:	89 83       	std	Y+1, r24	; 0x01
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <main+0x9d2>
    2b7e:	9a 83       	std	Y+2, r25	; 0x02
    2b80:	89 83       	std	Y+1, r24	; 0x01
            _delay_ms(300);
            LCD_Send_Command(_LCD_CLEAR);
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Send_Command>
    2b88:	6c cd       	rjmp	.-1320   	; 0x2662 <main+0x4ba>
                if (KpValue == '=')
                {
                    LCD_Send_Char_Pos(KpValue, 1, counter2 + 1);
                    break;
                }
                SecondNum[counter3] = KpValue;
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e7 59       	subi	r30, 0x97	; 151
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 81       	ld	r24, Z
    2b92:	88 2f       	mov	r24, r24
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	20 91 8a 00 	lds	r18, 0x008A
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	e4 56       	subi	r30, 0x64	; 100
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	20 83       	st	Z, r18
                counter2++;
    2ba2:	de 01       	movw	r26, r28
    2ba4:	a6 59       	subi	r26, 0x96	; 150
    2ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba8:	fe 01       	movw	r30, r28
    2baa:	e6 59       	subi	r30, 0x96	; 150
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	8f 5f       	subi	r24, 0xFF	; 255
    2bb2:	8c 93       	st	X, r24
                counter3++;
    2bb4:	de 01       	movw	r26, r28
    2bb6:	a7 59       	subi	r26, 0x97	; 151
    2bb8:	bf 4f       	sbci	r27, 0xFF	; 255
    2bba:	fe 01       	movw	r30, r28
    2bbc:	e7 59       	subi	r30, 0x97	; 151
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	80 81       	ld	r24, Z
    2bc2:	8f 5f       	subi	r24, 0xFF	; 255
    2bc4:	8c 93       	st	X, r24
                LCD_Send_Number_Pos(KpValue, 1, counter2);
    2bc6:	80 91 8a 00 	lds	r24, 0x008A
    2bca:	88 2f       	mov	r24, r24
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	a0 e0       	ldi	r26, 0x00	; 0
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e6 59       	subi	r30, 0x96	; 150
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	41 e0       	ldi	r20, 0x01	; 1
    2bde:	20 81       	ld	r18, Z
    2be0:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <LCD_Send_Number_Pos>
    2be4:	66 ce       	rjmp	.-820    	; 0x28b2 <main+0x70a>

00002be6 <calculate>:
        }
    }
}

u16 calculate(u8 a[], u8 b[], u8 n, u8 m, u8 op)
{
    2be6:	0f 93       	push	r16
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	61 97       	sbiw	r28, 0x11	; 17
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	98 87       	std	Y+8, r25	; 0x08
    2bfe:	8f 83       	std	Y+7, r24	; 0x07
    2c00:	7a 87       	std	Y+10, r23	; 0x0a
    2c02:	69 87       	std	Y+9, r22	; 0x09
    2c04:	4b 87       	std	Y+11, r20	; 0x0b
    2c06:	2c 87       	std	Y+12, r18	; 0x0c
    2c08:	0d 87       	std	Y+13, r16	; 0x0d
    u16 num1 = a[0];
    2c0a:	ef 81       	ldd	r30, Y+7	; 0x07
    2c0c:	f8 85       	ldd	r31, Y+8	; 0x08
    2c0e:	80 81       	ld	r24, Z
    2c10:	88 2f       	mov	r24, r24
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
    u16 num2 = b[0];
    2c18:	e9 85       	ldd	r30, Y+9	; 0x09
    2c1a:	fa 85       	ldd	r31, Y+10	; 0x0a
    2c1c:	80 81       	ld	r24, Z
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9c 83       	std	Y+4, r25	; 0x04
    2c24:	8b 83       	std	Y+3, r24	; 0x03
    for (u8 counter = 1; counter < n; counter++)
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	8a 83       	std	Y+2, r24	; 0x02
    2c2a:	1f c0       	rjmp	.+62     	; 0x2c6a <calculate+0x84>
    {
        num1 = num1 * 10 + a[counter];
    2c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c30:	9c 01       	movw	r18, r24
    2c32:	22 0f       	add	r18, r18
    2c34:	33 1f       	adc	r19, r19
    2c36:	c9 01       	movw	r24, r18
    2c38:	88 0f       	add	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	88 0f       	add	r24, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	a9 01       	movw	r20, r18
    2c42:	48 0f       	add	r20, r24
    2c44:	59 1f       	adc	r21, r25
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	28 2f       	mov	r18, r24
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	8f 81       	ldd	r24, Y+7	; 0x07
    2c4e:	98 85       	ldd	r25, Y+8	; 0x08
    2c50:	fc 01       	movw	r30, r24
    2c52:	e2 0f       	add	r30, r18
    2c54:	f3 1f       	adc	r31, r19
    2c56:	80 81       	ld	r24, Z
    2c58:	88 2f       	mov	r24, r24
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	84 0f       	add	r24, r20
    2c5e:	95 1f       	adc	r25, r21
    2c60:	9e 83       	std	Y+6, r25	; 0x06
    2c62:	8d 83       	std	Y+5, r24	; 0x05

u16 calculate(u8 a[], u8 b[], u8 n, u8 m, u8 op)
{
    u16 num1 = a[0];
    u16 num2 = b[0];
    for (u8 counter = 1; counter < n; counter++)
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	8f 5f       	subi	r24, 0xFF	; 255
    2c68:	8a 83       	std	Y+2, r24	; 0x02
    2c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c6e:	98 17       	cp	r25, r24
    2c70:	e8 f2       	brcs	.-70     	; 0x2c2c <calculate+0x46>
    {
        num1 = num1 * 10 + a[counter];
    }
    for (u8 counter = 1; counter < m; counter++)
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	1f c0       	rjmp	.+62     	; 0x2cb6 <calculate+0xd0>
    {
        num2 = num2 * 10 + b[counter];
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7c:	9c 01       	movw	r18, r24
    2c7e:	22 0f       	add	r18, r18
    2c80:	33 1f       	adc	r19, r19
    2c82:	c9 01       	movw	r24, r18
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	a9 01       	movw	r20, r18
    2c8e:	48 0f       	add	r20, r24
    2c90:	59 1f       	adc	r21, r25
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	28 2f       	mov	r18, r24
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	89 85       	ldd	r24, Y+9	; 0x09
    2c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	e2 0f       	add	r30, r18
    2ca0:	f3 1f       	adc	r31, r19
    2ca2:	80 81       	ld	r24, Z
    2ca4:	88 2f       	mov	r24, r24
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	84 0f       	add	r24, r20
    2caa:	95 1f       	adc	r25, r21
    2cac:	9c 83       	std	Y+4, r25	; 0x04
    2cae:	8b 83       	std	Y+3, r24	; 0x03
    u16 num2 = b[0];
    for (u8 counter = 1; counter < n; counter++)
    {
        num1 = num1 * 10 + a[counter];
    }
    for (u8 counter = 1; counter < m; counter++)
    2cb0:	89 81       	ldd	r24, Y+1	; 0x01
    2cb2:	8f 5f       	subi	r24, 0xFF	; 255
    2cb4:	89 83       	std	Y+1, r24	; 0x01
    2cb6:	99 81       	ldd	r25, Y+1	; 0x01
    2cb8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cba:	98 17       	cp	r25, r24
    2cbc:	e8 f2       	brcs	.-70     	; 0x2c78 <calculate+0x92>
    {
        num2 = num2 * 10 + b[counter];
    }
    switch (op)
    2cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	39 8b       	std	Y+17, r19	; 0x11
    2cc6:	28 8b       	std	Y+16, r18	; 0x10
    2cc8:	48 89       	ldd	r20, Y+16	; 0x10
    2cca:	59 89       	ldd	r21, Y+17	; 0x11
    2ccc:	4f 32       	cpi	r20, 0x2F	; 47
    2cce:	51 05       	cpc	r21, r1
    2cd0:	c1 f1       	breq	.+112    	; 0x2d42 <calculate+0x15c>
    2cd2:	88 89       	ldd	r24, Y+16	; 0x10
    2cd4:	99 89       	ldd	r25, Y+17	; 0x11
    2cd6:	80 33       	cpi	r24, 0x30	; 48
    2cd8:	91 05       	cpc	r25, r1
    2cda:	5c f4       	brge	.+22     	; 0x2cf2 <calculate+0x10c>
    2cdc:	28 89       	ldd	r18, Y+16	; 0x10
    2cde:	39 89       	ldd	r19, Y+17	; 0x11
    2ce0:	2b 32       	cpi	r18, 0x2B	; 43
    2ce2:	31 05       	cpc	r19, r1
    2ce4:	61 f0       	breq	.+24     	; 0x2cfe <calculate+0x118>
    2ce6:	48 89       	ldd	r20, Y+16	; 0x10
    2ce8:	59 89       	ldd	r21, Y+17	; 0x11
    2cea:	4d 32       	cpi	r20, 0x2D	; 45
    2cec:	51 05       	cpc	r21, r1
    2cee:	89 f0       	breq	.+34     	; 0x2d12 <calculate+0x12c>
    2cf0:	33 c0       	rjmp	.+102    	; 0x2d58 <calculate+0x172>
    2cf2:	88 89       	ldd	r24, Y+16	; 0x10
    2cf4:	99 89       	ldd	r25, Y+17	; 0x11
    2cf6:	88 37       	cpi	r24, 0x78	; 120
    2cf8:	91 05       	cpc	r25, r1
    2cfa:	a9 f0       	breq	.+42     	; 0x2d26 <calculate+0x140>
    2cfc:	2d c0       	rjmp	.+90     	; 0x2d58 <calculate+0x172>
    {
    case '+':
        return (num1 + num2);
    2cfe:	2d 81       	ldd	r18, Y+5	; 0x05
    2d00:	3e 81       	ldd	r19, Y+6	; 0x06
    2d02:	8b 81       	ldd	r24, Y+3	; 0x03
    2d04:	9c 81       	ldd	r25, Y+4	; 0x04
    2d06:	a9 01       	movw	r20, r18
    2d08:	48 0f       	add	r20, r24
    2d0a:	59 1f       	adc	r21, r25
    2d0c:	5f 87       	std	Y+15, r21	; 0x0f
    2d0e:	4e 87       	std	Y+14, r20	; 0x0e
    2d10:	25 c0       	rjmp	.+74     	; 0x2d5c <calculate+0x176>
        break;
    case '-':
        return (num1 - num2);
    2d12:	2d 81       	ldd	r18, Y+5	; 0x05
    2d14:	3e 81       	ldd	r19, Y+6	; 0x06
    2d16:	8b 81       	ldd	r24, Y+3	; 0x03
    2d18:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1a:	a9 01       	movw	r20, r18
    2d1c:	48 1b       	sub	r20, r24
    2d1e:	59 0b       	sbc	r21, r25
    2d20:	5f 87       	std	Y+15, r21	; 0x0f
    2d22:	4e 87       	std	Y+14, r20	; 0x0e
    2d24:	1b c0       	rjmp	.+54     	; 0x2d5c <calculate+0x176>
        break;
    case 'x':
        return (num1 * num2);
    2d26:	2d 81       	ldd	r18, Y+5	; 0x05
    2d28:	3e 81       	ldd	r19, Y+6	; 0x06
    2d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d2e:	28 9f       	mul	r18, r24
    2d30:	a0 01       	movw	r20, r0
    2d32:	29 9f       	mul	r18, r25
    2d34:	50 0d       	add	r21, r0
    2d36:	38 9f       	mul	r19, r24
    2d38:	50 0d       	add	r21, r0
    2d3a:	11 24       	eor	r1, r1
    2d3c:	5f 87       	std	Y+15, r21	; 0x0f
    2d3e:	4e 87       	std	Y+14, r20	; 0x0e
    2d40:	0d c0       	rjmp	.+26     	; 0x2d5c <calculate+0x176>
        break;
    case '/':
        return (num1 / num2);
    2d42:	8d 81       	ldd	r24, Y+5	; 0x05
    2d44:	9e 81       	ldd	r25, Y+6	; 0x06
    2d46:	2b 81       	ldd	r18, Y+3	; 0x03
    2d48:	3c 81       	ldd	r19, Y+4	; 0x04
    2d4a:	b9 01       	movw	r22, r18
    2d4c:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__udivmodhi4>
    2d50:	cb 01       	movw	r24, r22
    2d52:	9f 87       	std	Y+15, r25	; 0x0f
    2d54:	8e 87       	std	Y+14, r24	; 0x0e
    2d56:	02 c0       	rjmp	.+4      	; 0x2d5c <calculate+0x176>
        break;
    default:
    	return 0;
    2d58:	1f 86       	std	Y+15, r1	; 0x0f
    2d5a:	1e 86       	std	Y+14, r1	; 0x0e
    2d5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    }
}
    2d60:	61 96       	adiw	r28, 0x11	; 17
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	0f 91       	pop	r16
    2d72:	08 95       	ret

00002d74 <__udivmodqi4>:
    2d74:	99 1b       	sub	r25, r25
    2d76:	79 e0       	ldi	r23, 0x09	; 9
    2d78:	04 c0       	rjmp	.+8      	; 0x2d82 <__udivmodqi4_ep>

00002d7a <__udivmodqi4_loop>:
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	96 17       	cp	r25, r22
    2d7e:	08 f0       	brcs	.+2      	; 0x2d82 <__udivmodqi4_ep>
    2d80:	96 1b       	sub	r25, r22

00002d82 <__udivmodqi4_ep>:
    2d82:	88 1f       	adc	r24, r24
    2d84:	7a 95       	dec	r23
    2d86:	c9 f7       	brne	.-14     	; 0x2d7a <__udivmodqi4_loop>
    2d88:	80 95       	com	r24
    2d8a:	08 95       	ret

00002d8c <__udivmodhi4>:
    2d8c:	aa 1b       	sub	r26, r26
    2d8e:	bb 1b       	sub	r27, r27
    2d90:	51 e1       	ldi	r21, 0x11	; 17
    2d92:	07 c0       	rjmp	.+14     	; 0x2da2 <__udivmodhi4_ep>

00002d94 <__udivmodhi4_loop>:
    2d94:	aa 1f       	adc	r26, r26
    2d96:	bb 1f       	adc	r27, r27
    2d98:	a6 17       	cp	r26, r22
    2d9a:	b7 07       	cpc	r27, r23
    2d9c:	10 f0       	brcs	.+4      	; 0x2da2 <__udivmodhi4_ep>
    2d9e:	a6 1b       	sub	r26, r22
    2da0:	b7 0b       	sbc	r27, r23

00002da2 <__udivmodhi4_ep>:
    2da2:	88 1f       	adc	r24, r24
    2da4:	99 1f       	adc	r25, r25
    2da6:	5a 95       	dec	r21
    2da8:	a9 f7       	brne	.-22     	; 0x2d94 <__udivmodhi4_loop>
    2daa:	80 95       	com	r24
    2dac:	90 95       	com	r25
    2dae:	bc 01       	movw	r22, r24
    2db0:	cd 01       	movw	r24, r26
    2db2:	08 95       	ret

00002db4 <__udivmodsi4>:
    2db4:	a1 e2       	ldi	r26, 0x21	; 33
    2db6:	1a 2e       	mov	r1, r26
    2db8:	aa 1b       	sub	r26, r26
    2dba:	bb 1b       	sub	r27, r27
    2dbc:	fd 01       	movw	r30, r26
    2dbe:	0d c0       	rjmp	.+26     	; 0x2dda <__udivmodsi4_ep>

00002dc0 <__udivmodsi4_loop>:
    2dc0:	aa 1f       	adc	r26, r26
    2dc2:	bb 1f       	adc	r27, r27
    2dc4:	ee 1f       	adc	r30, r30
    2dc6:	ff 1f       	adc	r31, r31
    2dc8:	a2 17       	cp	r26, r18
    2dca:	b3 07       	cpc	r27, r19
    2dcc:	e4 07       	cpc	r30, r20
    2dce:	f5 07       	cpc	r31, r21
    2dd0:	20 f0       	brcs	.+8      	; 0x2dda <__udivmodsi4_ep>
    2dd2:	a2 1b       	sub	r26, r18
    2dd4:	b3 0b       	sbc	r27, r19
    2dd6:	e4 0b       	sbc	r30, r20
    2dd8:	f5 0b       	sbc	r31, r21

00002dda <__udivmodsi4_ep>:
    2dda:	66 1f       	adc	r22, r22
    2ddc:	77 1f       	adc	r23, r23
    2dde:	88 1f       	adc	r24, r24
    2de0:	99 1f       	adc	r25, r25
    2de2:	1a 94       	dec	r1
    2de4:	69 f7       	brne	.-38     	; 0x2dc0 <__udivmodsi4_loop>
    2de6:	60 95       	com	r22
    2de8:	70 95       	com	r23
    2dea:	80 95       	com	r24
    2dec:	90 95       	com	r25
    2dee:	9b 01       	movw	r18, r22
    2df0:	ac 01       	movw	r20, r24
    2df2:	bd 01       	movw	r22, r26
    2df4:	cf 01       	movw	r24, r30
    2df6:	08 95       	ret

00002df8 <__prologue_saves__>:
    2df8:	2f 92       	push	r2
    2dfa:	3f 92       	push	r3
    2dfc:	4f 92       	push	r4
    2dfe:	5f 92       	push	r5
    2e00:	6f 92       	push	r6
    2e02:	7f 92       	push	r7
    2e04:	8f 92       	push	r8
    2e06:	9f 92       	push	r9
    2e08:	af 92       	push	r10
    2e0a:	bf 92       	push	r11
    2e0c:	cf 92       	push	r12
    2e0e:	df 92       	push	r13
    2e10:	ef 92       	push	r14
    2e12:	ff 92       	push	r15
    2e14:	0f 93       	push	r16
    2e16:	1f 93       	push	r17
    2e18:	cf 93       	push	r28
    2e1a:	df 93       	push	r29
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	ca 1b       	sub	r28, r26
    2e22:	db 0b       	sbc	r29, r27
    2e24:	0f b6       	in	r0, 0x3f	; 63
    2e26:	f8 94       	cli
    2e28:	de bf       	out	0x3e, r29	; 62
    2e2a:	0f be       	out	0x3f, r0	; 63
    2e2c:	cd bf       	out	0x3d, r28	; 61
    2e2e:	09 94       	ijmp

00002e30 <__epilogue_restores__>:
    2e30:	2a 88       	ldd	r2, Y+18	; 0x12
    2e32:	39 88       	ldd	r3, Y+17	; 0x11
    2e34:	48 88       	ldd	r4, Y+16	; 0x10
    2e36:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e38:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e3a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e3c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e3e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e40:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e42:	b9 84       	ldd	r11, Y+9	; 0x09
    2e44:	c8 84       	ldd	r12, Y+8	; 0x08
    2e46:	df 80       	ldd	r13, Y+7	; 0x07
    2e48:	ee 80       	ldd	r14, Y+6	; 0x06
    2e4a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e4c:	0c 81       	ldd	r16, Y+4	; 0x04
    2e4e:	1b 81       	ldd	r17, Y+3	; 0x03
    2e50:	aa 81       	ldd	r26, Y+2	; 0x02
    2e52:	b9 81       	ldd	r27, Y+1	; 0x01
    2e54:	ce 0f       	add	r28, r30
    2e56:	d1 1d       	adc	r29, r1
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	cd bf       	out	0x3d, r28	; 61
    2e62:	ed 01       	movw	r28, r26
    2e64:	08 95       	ret

00002e66 <_exit>:
    2e66:	f8 94       	cli

00002e68 <__stop_program>:
    2e68:	ff cf       	rjmp	.-2      	; 0x2e68 <__stop_program>
